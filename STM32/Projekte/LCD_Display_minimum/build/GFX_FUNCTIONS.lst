ARM GAS  /tmp/cctVOKLy.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"GFX_FUNCTIONS.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/GFX_FUNCTIONS.c"
  18              		.section	.text.drawPixel,"ax",%progbits
  19              		.align	1
  20              		.global	drawPixel
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	drawPixel:
  26              	.LVL0:
  27              	.LFB65:
   1:Core/Src/GFX_FUNCTIONS.c **** /*
   2:Core/Src/GFX_FUNCTIONS.c ****  * GFX_FUNCTIONS.c
   3:Core/Src/GFX_FUNCTIONS.c ****  *
   4:Core/Src/GFX_FUNCTIONS.c ****  *  Created on: 30-Oct-2020
   5:Core/Src/GFX_FUNCTIONS.c ****  *      Author: meh
   6:Core/Src/GFX_FUNCTIONS.c ****  */
   7:Core/Src/GFX_FUNCTIONS.c **** 
   8:Core/Src/GFX_FUNCTIONS.c **** #include "ST7735.h"
   9:Core/Src/GFX_FUNCTIONS.c **** #include "stdint.h"
  10:Core/Src/GFX_FUNCTIONS.c **** #include "stdlib.h"
  11:Core/Src/GFX_FUNCTIONS.c **** 
  12:Core/Src/GFX_FUNCTIONS.c **** extern int16_t _width;    ///< Display width as modified by current rotation
  13:Core/Src/GFX_FUNCTIONS.c **** extern int16_t _height;   ///< Display height as modified by current rotation
  14:Core/Src/GFX_FUNCTIONS.c **** extern int16_t cursor_x;  ///< x location to start print()ing text
  15:Core/Src/GFX_FUNCTIONS.c **** extern int16_t cursor_y;  ///< y location to start print()ing text
  16:Core/Src/GFX_FUNCTIONS.c **** extern uint8_t rotation;  ///< Display rotation (0 thru 3)
  17:Core/Src/GFX_FUNCTIONS.c **** extern uint8_t _colstart; ///< Some displays need this changed to offset
  18:Core/Src/GFX_FUNCTIONS.c **** extern uint8_t _rowstart; ///< Some displays need this changed to offset
  19:Core/Src/GFX_FUNCTIONS.c **** extern uint8_t _xstart;
  20:Core/Src/GFX_FUNCTIONS.c **** extern uint8_t _ystart;
  21:Core/Src/GFX_FUNCTIONS.c **** 
  22:Core/Src/GFX_FUNCTIONS.c **** void drawPixel(int16_t x, int16_t y, uint16_t color) {
  28              		.loc 1 22 54 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 22 54 is_stmt 0 view .LVU1
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
ARM GAS  /tmp/cctVOKLy.s 			page 2


  37              		.cfi_offset 14, -4
  23:Core/Src/GFX_FUNCTIONS.c ****   ST7735_DrawPixel(x, y, color);
  38              		.loc 1 23 3 is_stmt 1 view .LVU2
  39 0002 89B2     		uxth	r1, r1
  40              		.loc 1 23 3 is_stmt 0 view .LVU3
  41 0004 80B2     		uxth	r0, r0
  42              		.loc 1 23 3 view .LVU4
  43 0006 FFF7FEFF 		bl	ST7735_DrawPixel
  44              	.LVL1:
  24:Core/Src/GFX_FUNCTIONS.c **** }
  45              		.loc 1 24 1 view .LVU5
  46 000a 08BD     		pop	{r3, pc}
  47              		.cfi_endproc
  48              	.LFE65:
  50              		.section	.text.fillRect,"ax",%progbits
  51              		.align	1
  52              		.global	fillRect
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  57              	fillRect:
  58              	.LVL2:
  59              	.LFB66:
  25:Core/Src/GFX_FUNCTIONS.c **** 
  26:Core/Src/GFX_FUNCTIONS.c **** void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
  60              		.loc 1 26 75 is_stmt 1 view -0
  61              		.cfi_startproc
  62              		@ args = 4, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		.loc 1 26 75 is_stmt 0 view .LVU7
  65 0000 10B5     		push	{r4, lr}
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 4, -8
  69              		.cfi_offset 14, -4
  70 0002 82B0     		sub	sp, sp, #8
  71              	.LCFI2:
  72              		.cfi_def_cfa_offset 16
  27:Core/Src/GFX_FUNCTIONS.c ****   ST7735_FillRectangle(x, y, w, h, color);
  73              		.loc 1 27 3 is_stmt 1 view .LVU8
  74 0004 BDF81040 		ldrh	r4, [sp, #16]
  75 0008 0094     		str	r4, [sp]
  76 000a 9BB2     		uxth	r3, r3
  77              		.loc 1 27 3 is_stmt 0 view .LVU9
  78 000c 92B2     		uxth	r2, r2
  79              		.loc 1 27 3 view .LVU10
  80 000e 89B2     		uxth	r1, r1
  81              		.loc 1 27 3 view .LVU11
  82 0010 80B2     		uxth	r0, r0
  83              		.loc 1 27 3 view .LVU12
  84 0012 FFF7FEFF 		bl	ST7735_FillRectangle
  85              	.LVL3:
  28:Core/Src/GFX_FUNCTIONS.c **** }
  86              		.loc 1 28 1 view .LVU13
  87 0016 02B0     		add	sp, sp, #8
  88              	.LCFI3:
  89              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cctVOKLy.s 			page 3


  90              		@ sp needed
  91 0018 10BD     		pop	{r4, pc}
  92              		.loc 1 28 1 view .LVU14
  93              		.cfi_endproc
  94              	.LFE66:
  96              		.section	.text.writePixel,"ax",%progbits
  97              		.align	1
  98              		.global	writePixel
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 103              	writePixel:
 104              	.LVL4:
 105              	.LFB67:
  29:Core/Src/GFX_FUNCTIONS.c **** 
  30:Core/Src/GFX_FUNCTIONS.c **** /**************************************************************************************************
  31:Core/Src/GFX_FUNCTIONS.c **** 
  32:Core/Src/GFX_FUNCTIONS.c **** #define _swap_int16_t(a, b)                                                    \
  33:Core/Src/GFX_FUNCTIONS.c ****   {                                                                            \
  34:Core/Src/GFX_FUNCTIONS.c ****     int16_t t = a;                                                             \
  35:Core/Src/GFX_FUNCTIONS.c ****     a = b;                                                                     \
  36:Core/Src/GFX_FUNCTIONS.c ****     b = t;                                                                     \
  37:Core/Src/GFX_FUNCTIONS.c ****   }
  38:Core/Src/GFX_FUNCTIONS.c **** 
  39:Core/Src/GFX_FUNCTIONS.c **** #define min(a, b) (((a) < (b)) ? (a) : (b))
  40:Core/Src/GFX_FUNCTIONS.c **** 
  41:Core/Src/GFX_FUNCTIONS.c **** void writePixel(int16_t x, int16_t y, uint16_t color) {
 106              		.loc 1 41 55 is_stmt 1 view -0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		.loc 1 41 55 is_stmt 0 view .LVU16
 111 0000 08B5     		push	{r3, lr}
 112              	.LCFI4:
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 3, -8
 115              		.cfi_offset 14, -4
  42:Core/Src/GFX_FUNCTIONS.c ****   drawPixel(x, y, color);
 116              		.loc 1 42 3 is_stmt 1 view .LVU17
 117 0002 FFF7FEFF 		bl	drawPixel
 118              	.LVL5:
  43:Core/Src/GFX_FUNCTIONS.c **** }
 119              		.loc 1 43 1 is_stmt 0 view .LVU18
 120 0006 08BD     		pop	{r3, pc}
 121              		.cfi_endproc
 122              	.LFE67:
 124              		.section	.text.writeLine,"ax",%progbits
 125              		.align	1
 126              		.global	writeLine
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 131              	writeLine:
 132              	.LVL6:
 133              	.LFB68:
  44:Core/Src/GFX_FUNCTIONS.c **** 
  45:Core/Src/GFX_FUNCTIONS.c **** void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
ARM GAS  /tmp/cctVOKLy.s 			page 4


 134              		.loc 1 45 80 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 4, pretend = 0, frame = 8
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		.loc 1 45 80 is_stmt 0 view .LVU20
 139 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 140              	.LCFI5:
 141              		.cfi_def_cfa_offset 36
 142              		.cfi_offset 4, -36
 143              		.cfi_offset 5, -32
 144              		.cfi_offset 6, -28
 145              		.cfi_offset 7, -24
 146              		.cfi_offset 8, -20
 147              		.cfi_offset 9, -16
 148              		.cfi_offset 10, -12
 149              		.cfi_offset 11, -8
 150              		.cfi_offset 14, -4
 151 0004 83B0     		sub	sp, sp, #12
 152              	.LCFI6:
 153              		.cfi_def_cfa_offset 48
 154 0006 8B46     		mov	fp, r1
 155 0008 1546     		mov	r5, r2
 156 000a 1E46     		mov	r6, r3
 157 000c BDF83080 		ldrh	r8, [sp, #48]
  46:Core/Src/GFX_FUNCTIONS.c ****   int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 158              		.loc 1 46 3 is_stmt 1 view .LVU21
 159              		.loc 1 46 26 is_stmt 0 view .LVU22
 160 0010 5A1A     		subs	r2, r3, r1
 161              	.LVL7:
 162              		.loc 1 46 19 view .LVU23
 163 0012 82EAE279 		eor	r9, r2, r2, asr #31
 164 0016 A9EBE279 		sub	r9, r9, r2, asr #31
 165              		.loc 1 46 41 view .LVU24
 166 001a 291A     		subs	r1, r5, r0
 167              	.LVL8:
 168              		.loc 1 46 34 view .LVU25
 169 001c 81EAE17A 		eor	r10, r1, r1, asr #31
 170 0020 AAEBE17A 		sub	r10, r10, r1, asr #31
 171              	.LVL9:
  47:Core/Src/GFX_FUNCTIONS.c ****   if (steep) {
 172              		.loc 1 47 3 is_stmt 1 view .LVU26
 173              		.loc 1 47 6 is_stmt 0 view .LVU27
 174 0024 D145     		cmp	r9, r10
 175 0026 04DC     		bgt	.L8
 176 0028 2E46     		mov	r6, r5
 177 002a 1D46     		mov	r5, r3
 178              	.LVL10:
 179              		.loc 1 47 6 view .LVU28
 180 002c 5B46     		mov	r3, fp
 181              	.LVL11:
 182              		.loc 1 47 6 view .LVU29
 183 002e 8346     		mov	fp, r0
 184              	.LVL12:
 185              		.loc 1 47 6 view .LVU30
 186 0030 1846     		mov	r0, r3
 187              	.LVL13:
 188              	.L8:
ARM GAS  /tmp/cctVOKLy.s 			page 5


  48:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(x0, y0);
  49:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(x1, y1);
 189              		.loc 1 49 26 is_stmt 1 discriminator 1 view .LVU31
  50:Core/Src/GFX_FUNCTIONS.c ****   }
  51:Core/Src/GFX_FUNCTIONS.c **** 
  52:Core/Src/GFX_FUNCTIONS.c ****   if (x0 > x1) {
 190              		.loc 1 52 3 view .LVU32
 191              		.loc 1 52 6 is_stmt 0 view .LVU33
 192 0032 B345     		cmp	fp, r6
 193 0034 05DC     		bgt	.L9
 194 0036 2B46     		mov	r3, r5
 195 0038 0546     		mov	r5, r0
 196              	.LVL14:
 197              		.loc 1 52 6 view .LVU34
 198 003a 1846     		mov	r0, r3
 199              	.LVL15:
 200              		.loc 1 52 6 view .LVU35
 201 003c 3346     		mov	r3, r6
 202              	.LVL16:
 203              		.loc 1 52 6 view .LVU36
 204 003e 5E46     		mov	r6, fp
 205              	.LVL17:
 206              		.loc 1 52 6 view .LVU37
 207 0040 9B46     		mov	fp, r3
 208              	.LVL18:
 209              	.L9:
  53:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(x0, x1);
  54:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(y0, y1);
 210              		.loc 1 54 26 is_stmt 1 discriminator 1 view .LVU38
  55:Core/Src/GFX_FUNCTIONS.c ****   }
  56:Core/Src/GFX_FUNCTIONS.c **** 
  57:Core/Src/GFX_FUNCTIONS.c ****   int16_t dx, dy;
 211              		.loc 1 57 3 view .LVU39
  58:Core/Src/GFX_FUNCTIONS.c ****   dx = x1 - x0;
 212              		.loc 1 58 3 view .LVU40
 213              		.loc 1 58 11 is_stmt 0 view .LVU41
 214 0042 ABEB0604 		sub	r4, fp, r6
 215 0046 A3B2     		uxth	r3, r4
 216 0048 0093     		str	r3, [sp]
 217              		.loc 1 58 6 view .LVU42
 218 004a 23B2     		sxth	r3, r4
 219              	.LVL19:
  59:Core/Src/GFX_FUNCTIONS.c ****   dy = abs(y1 - y0);
 220              		.loc 1 59 3 is_stmt 1 view .LVU43
 221              		.loc 1 59 15 is_stmt 0 view .LVU44
 222 004c 471B     		subs	r7, r0, r5
 223              		.loc 1 59 8 view .LVU45
 224 004e 002F     		cmp	r7, #0
 225 0050 B8BF     		it	lt
 226 0052 7F42     		rsblt	r7, r7, #0
 227              	.LVL20:
  60:Core/Src/GFX_FUNCTIONS.c **** 
  61:Core/Src/GFX_FUNCTIONS.c ****   int16_t err = dx / 2;
 228              		.loc 1 61 3 is_stmt 1 view .LVU46
 229              		.loc 1 61 11 is_stmt 0 view .LVU47
 230 0054 C4F3C034 		ubfx	r4, r4, #15, #1
 231 0058 1C44     		add	r4, r4, r3
ARM GAS  /tmp/cctVOKLy.s 			page 6


 232 005a 6410     		asrs	r4, r4, #1
 233              	.LVL21:
  62:Core/Src/GFX_FUNCTIONS.c ****   int16_t ystep;
 234              		.loc 1 62 3 is_stmt 1 view .LVU48
  63:Core/Src/GFX_FUNCTIONS.c **** 
  64:Core/Src/GFX_FUNCTIONS.c ****   if (y0 < y1) {
 235              		.loc 1 64 3 view .LVU49
 236              		.loc 1 64 6 is_stmt 0 view .LVU50
 237 005c 8542     		cmp	r5, r0
 238 005e 20DB     		blt	.L10
  65:Core/Src/GFX_FUNCTIONS.c ****     ystep = 1;
  66:Core/Src/GFX_FUNCTIONS.c ****   } else {
  67:Core/Src/GFX_FUNCTIONS.c ****     ystep = -1;
 239              		.loc 1 67 11 view .LVU51
 240 0060 4FF0FF33 		mov	r3, #-1
 241              	.LVL22:
 242              		.loc 1 67 11 view .LVU52
 243 0064 0193     		str	r3, [sp, #4]
 244 0066 0BE0     		b	.L15
 245              	.LVL23:
 246              	.L12:
  68:Core/Src/GFX_FUNCTIONS.c ****   }
  69:Core/Src/GFX_FUNCTIONS.c **** 
  70:Core/Src/GFX_FUNCTIONS.c ****   for (; x0 <= x1; x0++) {
  71:Core/Src/GFX_FUNCTIONS.c ****     if (steep) {
  72:Core/Src/GFX_FUNCTIONS.c ****       writePixel(y0, x0, color);
  73:Core/Src/GFX_FUNCTIONS.c ****     } else {
  74:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0, y0, color);
 247              		.loc 1 74 7 is_stmt 1 view .LVU53
 248 0068 4246     		mov	r2, r8
 249 006a 2946     		mov	r1, r5
 250 006c 3046     		mov	r0, r6
 251 006e FFF7FEFF 		bl	writePixel
 252              	.LVL24:
 253              	.L13:
  75:Core/Src/GFX_FUNCTIONS.c ****     }
  76:Core/Src/GFX_FUNCTIONS.c ****     err -= dy;
 254              		.loc 1 76 5 view .LVU54
 255              		.loc 1 76 9 is_stmt 0 view .LVU55
 256 0072 E41B     		subs	r4, r4, r7
 257              	.LVL25:
 258              		.loc 1 76 9 view .LVU56
 259 0074 A3B2     		uxth	r3, r4
 260 0076 24B2     		sxth	r4, r4
 261              	.LVL26:
  77:Core/Src/GFX_FUNCTIONS.c ****     if (err < 0) {
 262              		.loc 1 77 5 is_stmt 1 view .LVU57
 263              		.loc 1 77 8 is_stmt 0 view .LVU58
 264 0078 002C     		cmp	r4, #0
 265 007a 0BDB     		blt	.L18
 266              	.L14:
  70:Core/Src/GFX_FUNCTIONS.c ****     if (steep) {
 267              		.loc 1 70 22 is_stmt 1 view .LVU59
 268 007c 0136     		adds	r6, r6, #1
 269              	.LVL27:
  70:Core/Src/GFX_FUNCTIONS.c ****     if (steep) {
 270              		.loc 1 70 22 is_stmt 0 view .LVU60
ARM GAS  /tmp/cctVOKLy.s 			page 7


 271 007e 36B2     		sxth	r6, r6
 272              	.LVL28:
 273              	.L15:
  70:Core/Src/GFX_FUNCTIONS.c ****     if (steep) {
 274              		.loc 1 70 13 is_stmt 1 discriminator 1 view .LVU61
 275 0080 5E45     		cmp	r6, fp
 276 0082 11DC     		bgt	.L19
  71:Core/Src/GFX_FUNCTIONS.c ****       writePixel(y0, x0, color);
 277              		.loc 1 71 5 view .LVU62
  71:Core/Src/GFX_FUNCTIONS.c ****       writePixel(y0, x0, color);
 278              		.loc 1 71 8 is_stmt 0 view .LVU63
 279 0084 D145     		cmp	r9, r10
 280 0086 EFDD     		ble	.L12
  72:Core/Src/GFX_FUNCTIONS.c ****     } else {
 281              		.loc 1 72 7 is_stmt 1 view .LVU64
 282 0088 4246     		mov	r2, r8
 283 008a 3146     		mov	r1, r6
 284 008c 2846     		mov	r0, r5
 285 008e FFF7FEFF 		bl	writePixel
 286              	.LVL29:
 287 0092 EEE7     		b	.L13
 288              	.L18:
  78:Core/Src/GFX_FUNCTIONS.c ****       y0 += ystep;
 289              		.loc 1 78 7 view .LVU65
 290              		.loc 1 78 10 is_stmt 0 view .LVU66
 291 0094 019A     		ldr	r2, [sp, #4]
 292 0096 1544     		add	r5, r5, r2
 293              	.LVL30:
 294              		.loc 1 78 10 view .LVU67
 295 0098 2DB2     		sxth	r5, r5
 296              	.LVL31:
  79:Core/Src/GFX_FUNCTIONS.c ****       err += dx;
 297              		.loc 1 79 7 is_stmt 1 view .LVU68
 298              		.loc 1 79 11 is_stmt 0 view .LVU69
 299 009a 009A     		ldr	r2, [sp]
 300 009c 1344     		add	r3, r3, r2
 301 009e 1CB2     		sxth	r4, r3
 302              	.LVL32:
 303              		.loc 1 79 11 view .LVU70
 304 00a0 ECE7     		b	.L14
 305              	.LVL33:
 306              	.L10:
  65:Core/Src/GFX_FUNCTIONS.c ****   } else {
 307              		.loc 1 65 11 view .LVU71
 308 00a2 0123     		movs	r3, #1
 309              	.LVL34:
  65:Core/Src/GFX_FUNCTIONS.c ****   } else {
 310              		.loc 1 65 11 view .LVU72
 311 00a4 0193     		str	r3, [sp, #4]
 312 00a6 EBE7     		b	.L15
 313              	.LVL35:
 314              	.L19:
  80:Core/Src/GFX_FUNCTIONS.c ****     }
  81:Core/Src/GFX_FUNCTIONS.c ****   }
  82:Core/Src/GFX_FUNCTIONS.c **** }
 315              		.loc 1 82 1 view .LVU73
 316 00a8 03B0     		add	sp, sp, #12
ARM GAS  /tmp/cctVOKLy.s 			page 8


 317              	.LCFI7:
 318              		.cfi_def_cfa_offset 36
 319              	.LVL36:
 320              		.loc 1 82 1 view .LVU74
 321              		@ sp needed
 322 00aa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 323              		.loc 1 82 1 view .LVU75
 324              		.cfi_endproc
 325              	.LFE68:
 327              		.section	.text.drawFastVLine,"ax",%progbits
 328              		.align	1
 329              		.global	drawFastVLine
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 334              	drawFastVLine:
 335              	.LVL37:
 336              	.LFB69:
  83:Core/Src/GFX_FUNCTIONS.c **** 
  84:Core/Src/GFX_FUNCTIONS.c **** void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 337              		.loc 1 84 69 is_stmt 1 view -0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              		.loc 1 84 69 is_stmt 0 view .LVU77
 342 0000 00B5     		push	{lr}
 343              	.LCFI8:
 344              		.cfi_def_cfa_offset 4
 345              		.cfi_offset 14, -4
 346 0002 83B0     		sub	sp, sp, #12
 347              	.LCFI9:
 348              		.cfi_def_cfa_offset 16
  85:Core/Src/GFX_FUNCTIONS.c ****   writeLine(x, y, x, y + h - 1, color);
 349              		.loc 1 85 3 is_stmt 1 view .LVU78
 350              		.loc 1 85 24 is_stmt 0 view .LVU79
 351 0004 0A44     		add	r2, r2, r1
 352              	.LVL38:
 353              		.loc 1 85 24 view .LVU80
 354 0006 92B2     		uxth	r2, r2
 355              		.loc 1 85 28 view .LVU81
 356 0008 013A     		subs	r2, r2, #1
 357              		.loc 1 85 3 view .LVU82
 358 000a 0093     		str	r3, [sp]
 359 000c 13B2     		sxth	r3, r2
 360              	.LVL39:
 361              		.loc 1 85 3 view .LVU83
 362 000e 0246     		mov	r2, r0
 363 0010 FFF7FEFF 		bl	writeLine
 364              	.LVL40:
  86:Core/Src/GFX_FUNCTIONS.c **** }
 365              		.loc 1 86 1 view .LVU84
 366 0014 03B0     		add	sp, sp, #12
 367              	.LCFI10:
 368              		.cfi_def_cfa_offset 4
 369              		@ sp needed
 370 0016 5DF804FB 		ldr	pc, [sp], #4
 371              		.cfi_endproc
ARM GAS  /tmp/cctVOKLy.s 			page 9


 372              	.LFE69:
 374              		.section	.text.drawFastHLine,"ax",%progbits
 375              		.align	1
 376              		.global	drawFastHLine
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 381              	drawFastHLine:
 382              	.LVL41:
 383              	.LFB70:
  87:Core/Src/GFX_FUNCTIONS.c **** void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 384              		.loc 1 87 69 is_stmt 1 view -0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              		.loc 1 87 69 is_stmt 0 view .LVU86
 389 0000 00B5     		push	{lr}
 390              	.LCFI11:
 391              		.cfi_def_cfa_offset 4
 392              		.cfi_offset 14, -4
 393 0002 83B0     		sub	sp, sp, #12
 394              	.LCFI12:
 395              		.cfi_def_cfa_offset 16
  88:Core/Src/GFX_FUNCTIONS.c ****   writeLine(x, y, x + w - 1, y, color);
 396              		.loc 1 88 3 is_stmt 1 view .LVU87
 397              		.loc 1 88 21 is_stmt 0 view .LVU88
 398 0004 0244     		add	r2, r2, r0
 399              	.LVL42:
 400              		.loc 1 88 21 view .LVU89
 401 0006 92B2     		uxth	r2, r2
 402              		.loc 1 88 25 view .LVU90
 403 0008 013A     		subs	r2, r2, #1
 404              		.loc 1 88 3 view .LVU91
 405 000a 0093     		str	r3, [sp]
 406 000c 0B46     		mov	r3, r1
 407              	.LVL43:
 408              		.loc 1 88 3 view .LVU92
 409 000e 12B2     		sxth	r2, r2
 410 0010 FFF7FEFF 		bl	writeLine
 411              	.LVL44:
  89:Core/Src/GFX_FUNCTIONS.c **** }
 412              		.loc 1 89 1 view .LVU93
 413 0014 03B0     		add	sp, sp, #12
 414              	.LCFI13:
 415              		.cfi_def_cfa_offset 4
 416              		@ sp needed
 417 0016 5DF804FB 		ldr	pc, [sp], #4
 418              		.cfi_endproc
 419              	.LFE70:
 421              		.section	.text.drawLine,"ax",%progbits
 422              		.align	1
 423              		.global	drawLine
 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 428              	drawLine:
 429              	.LVL45:
ARM GAS  /tmp/cctVOKLy.s 			page 10


 430              	.LFB71:
  90:Core/Src/GFX_FUNCTIONS.c **** 
  91:Core/Src/GFX_FUNCTIONS.c **** void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 431              		.loc 1 91 79 is_stmt 1 view -0
 432              		.cfi_startproc
 433              		@ args = 4, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		.loc 1 91 79 is_stmt 0 view .LVU95
 436 0000 00B5     		push	{lr}
 437              	.LCFI14:
 438              		.cfi_def_cfa_offset 4
 439              		.cfi_offset 14, -4
 440 0002 83B0     		sub	sp, sp, #12
 441              	.LCFI15:
 442              		.cfi_def_cfa_offset 16
 443 0004 9E46     		mov	lr, r3
 444 0006 BDF81030 		ldrh	r3, [sp, #16]
 445              	.LVL46:
  92:Core/Src/GFX_FUNCTIONS.c ****   if (x0 == x1) {
 446              		.loc 1 92 3 is_stmt 1 view .LVU96
 447              		.loc 1 92 6 is_stmt 0 view .LVU97
 448 000a 9042     		cmp	r0, r2
 449 000c 0FD0     		beq	.L31
 450 000e 9446     		mov	ip, r2
  93:Core/Src/GFX_FUNCTIONS.c ****     if (y0 > y1)
  94:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(y0, y1);
  95:Core/Src/GFX_FUNCTIONS.c ****     drawFastVLine(x0, y0, y1 - y0 + 1, color);
  96:Core/Src/GFX_FUNCTIONS.c ****   } else if (y0 == y1) {
 451              		.loc 1 96 10 is_stmt 1 view .LVU98
 452              		.loc 1 96 13 is_stmt 0 view .LVU99
 453 0010 7145     		cmp	r1, lr
 454 0012 1CD1     		bne	.L28
  97:Core/Src/GFX_FUNCTIONS.c ****     if (x0 > x1)
 455              		.loc 1 97 5 is_stmt 1 view .LVU100
 456              		.loc 1 97 8 is_stmt 0 view .LVU101
 457 0014 9042     		cmp	r0, r2
 458 0016 01DC     		bgt	.L29
 459 0018 8446     		mov	ip, r0
 460 001a 1046     		mov	r0, r2
 461              	.LVL47:
 462              	.L29:
  98:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(x0, x1);
 463              		.loc 1 98 28 is_stmt 1 discriminator 1 view .LVU102
  99:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(x0, y0, x1 - x0 + 1, color);
 464              		.loc 1 99 5 view .LVU103
 465              		.loc 1 99 30 is_stmt 0 view .LVU104
 466 001c A0EB0C02 		sub	r2, r0, ip
 467 0020 92B2     		uxth	r2, r2
 468              		.loc 1 99 35 view .LVU105
 469 0022 0132     		adds	r2, r2, #1
 470              		.loc 1 99 5 view .LVU106
 471 0024 12B2     		sxth	r2, r2
 472 0026 6046     		mov	r0, ip
 473              	.LVL48:
 474              		.loc 1 99 5 view .LVU107
 475 0028 FFF7FEFF 		bl	drawFastHLine
 476              	.LVL49:
ARM GAS  /tmp/cctVOKLy.s 			page 11


 477              		.loc 1 99 5 view .LVU108
 478 002c 0CE0     		b	.L24
 479              	.LVL50:
 480              	.L31:
  93:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(y0, y1);
 481              		.loc 1 93 5 is_stmt 1 view .LVU109
  93:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(y0, y1);
 482              		.loc 1 93 8 is_stmt 0 view .LVU110
 483 002e 7145     		cmp	r1, lr
 484 0030 02DC     		bgt	.L26
 485 0032 7246     		mov	r2, lr
 486              	.LVL51:
  93:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(y0, y1);
 487              		.loc 1 93 8 view .LVU111
 488 0034 8E46     		mov	lr, r1
 489 0036 1146     		mov	r1, r2
 490              	.LVL52:
 491              	.L26:
  94:Core/Src/GFX_FUNCTIONS.c ****     drawFastVLine(x0, y0, y1 - y0 + 1, color);
 492              		.loc 1 94 28 is_stmt 1 discriminator 1 view .LVU112
  95:Core/Src/GFX_FUNCTIONS.c ****   } else if (y0 == y1) {
 493              		.loc 1 95 5 view .LVU113
  95:Core/Src/GFX_FUNCTIONS.c ****   } else if (y0 == y1) {
 494              		.loc 1 95 30 is_stmt 0 view .LVU114
 495 0038 A1EB0E02 		sub	r2, r1, lr
 496 003c 92B2     		uxth	r2, r2
  95:Core/Src/GFX_FUNCTIONS.c ****   } else if (y0 == y1) {
 497              		.loc 1 95 35 view .LVU115
 498 003e 0132     		adds	r2, r2, #1
  95:Core/Src/GFX_FUNCTIONS.c ****   } else if (y0 == y1) {
 499              		.loc 1 95 5 view .LVU116
 500 0040 12B2     		sxth	r2, r2
 501 0042 7146     		mov	r1, lr
 502              	.LVL53:
  95:Core/Src/GFX_FUNCTIONS.c ****   } else if (y0 == y1) {
 503              		.loc 1 95 5 view .LVU117
 504 0044 FFF7FEFF 		bl	drawFastVLine
 505              	.LVL54:
 506              	.L24:
 100:Core/Src/GFX_FUNCTIONS.c ****   } else {
 101:Core/Src/GFX_FUNCTIONS.c ****     writeLine(x0, y0, x1, y1, color);
 102:Core/Src/GFX_FUNCTIONS.c ****   }
 103:Core/Src/GFX_FUNCTIONS.c **** }
 507              		.loc 1 103 1 view .LVU118
 508 0048 03B0     		add	sp, sp, #12
 509              	.LCFI16:
 510              		.cfi_remember_state
 511              		.cfi_def_cfa_offset 4
 512              		@ sp needed
 513 004a 5DF804FB 		ldr	pc, [sp], #4
 514              	.LVL55:
 515              	.L28:
 516              	.LCFI17:
 517              		.cfi_restore_state
 101:Core/Src/GFX_FUNCTIONS.c ****   }
 518              		.loc 1 101 5 is_stmt 1 view .LVU119
 519 004e 0093     		str	r3, [sp]
ARM GAS  /tmp/cctVOKLy.s 			page 12


 520 0050 7346     		mov	r3, lr
 521 0052 FFF7FEFF 		bl	writeLine
 522              	.LVL56:
 523              		.loc 1 103 1 is_stmt 0 view .LVU120
 524 0056 F7E7     		b	.L24
 525              		.cfi_endproc
 526              	.LFE71:
 528              		.section	.text.drawCircle,"ax",%progbits
 529              		.align	1
 530              		.global	drawCircle
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 535              	drawCircle:
 536              	.LVL57:
 537              	.LFB72:
 104:Core/Src/GFX_FUNCTIONS.c **** 
 105:Core/Src/GFX_FUNCTIONS.c **** void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 538              		.loc 1 105 68 is_stmt 1 view -0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 24
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              		.loc 1 105 68 is_stmt 0 view .LVU122
 543 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 544              	.LCFI18:
 545              		.cfi_def_cfa_offset 36
 546              		.cfi_offset 4, -36
 547              		.cfi_offset 5, -32
 548              		.cfi_offset 6, -28
 549              		.cfi_offset 7, -24
 550              		.cfi_offset 8, -20
 551              		.cfi_offset 9, -16
 552              		.cfi_offset 10, -12
 553              		.cfi_offset 11, -8
 554              		.cfi_offset 14, -4
 555 0004 87B0     		sub	sp, sp, #28
 556              	.LCFI19:
 557              		.cfi_def_cfa_offset 64
 558 0006 8246     		mov	r10, r0
 559 0008 0D46     		mov	r5, r1
 560 000a 0192     		str	r2, [sp, #4]
 561 000c 1E46     		mov	r6, r3
 106:Core/Src/GFX_FUNCTIONS.c ****   int16_t f = 1 - r;
 562              		.loc 1 106 3 is_stmt 1 view .LVU123
 563              		.loc 1 106 17 is_stmt 0 view .LVU124
 564 000e 94B2     		uxth	r4, r2
 565 0010 C4F10103 		rsb	r3, r4, #1
 566              	.LVL58:
 567              		.loc 1 106 11 view .LVU125
 568 0014 0FFA83F9 		sxth	r9, r3
 569              	.LVL59:
 107:Core/Src/GFX_FUNCTIONS.c ****   int16_t ddF_x = 1;
 570              		.loc 1 107 3 is_stmt 1 view .LVU126
 108:Core/Src/GFX_FUNCTIONS.c ****   int16_t ddF_y = -2 * r;
 571              		.loc 1 108 3 view .LVU127
 572              		.loc 1 108 22 is_stmt 0 view .LVU128
 573 0018 C4EBC433 		rsb	r3, r4, r4, lsl #15
ARM GAS  /tmp/cctVOKLy.s 			page 13


 574 001c 5B00     		lsls	r3, r3, #1
 575              		.loc 1 108 11 view .LVU129
 576 001e 1BB2     		sxth	r3, r3
 577 0020 0593     		str	r3, [sp, #20]
 578              	.LVL60:
 109:Core/Src/GFX_FUNCTIONS.c ****   int16_t x = 0;
 579              		.loc 1 109 3 is_stmt 1 view .LVU130
 110:Core/Src/GFX_FUNCTIONS.c ****   int16_t y = r;
 580              		.loc 1 110 3 view .LVU131
 111:Core/Src/GFX_FUNCTIONS.c **** 
 112:Core/Src/GFX_FUNCTIONS.c ****   writePixel(x0, y0 + r, color);
 581              		.loc 1 112 3 view .LVU132
 582              		.loc 1 112 21 is_stmt 0 view .LVU133
 583 0022 1FFA81FB 		uxth	fp, r1
 584 0026 04EB0B01 		add	r1, r4, fp
 585              	.LVL61:
 586              		.loc 1 112 3 view .LVU134
 587 002a 3246     		mov	r2, r6
 588              	.LVL62:
 589              		.loc 1 112 3 view .LVU135
 590 002c 09B2     		sxth	r1, r1
 591 002e FFF7FEFF 		bl	writePixel
 592              	.LVL63:
 113:Core/Src/GFX_FUNCTIONS.c ****   writePixel(x0, y0 - r, color);
 593              		.loc 1 113 3 is_stmt 1 view .LVU136
 594              		.loc 1 113 21 is_stmt 0 view .LVU137
 595 0032 ABEB0401 		sub	r1, fp, r4
 596              		.loc 1 113 3 view .LVU138
 597 0036 3246     		mov	r2, r6
 598 0038 09B2     		sxth	r1, r1
 599 003a 5046     		mov	r0, r10
 600 003c FFF7FEFF 		bl	writePixel
 601              	.LVL64:
 114:Core/Src/GFX_FUNCTIONS.c ****   writePixel(x0 + r, y0, color);
 602              		.loc 1 114 3 is_stmt 1 view .LVU139
 603              		.loc 1 114 17 is_stmt 0 view .LVU140
 604 0040 1FFA8AFA 		uxth	r10, r10
 605              	.LVL65:
 606              		.loc 1 114 17 view .LVU141
 607 0044 04EB0A00 		add	r0, r4, r10
 608              		.loc 1 114 3 view .LVU142
 609 0048 3246     		mov	r2, r6
 610 004a 2946     		mov	r1, r5
 611 004c 00B2     		sxth	r0, r0
 612 004e FFF7FEFF 		bl	writePixel
 613              	.LVL66:
 115:Core/Src/GFX_FUNCTIONS.c ****   writePixel(x0 - r, y0, color);
 614              		.loc 1 115 3 is_stmt 1 view .LVU143
 615              		.loc 1 115 17 is_stmt 0 view .LVU144
 616 0052 AAEB0400 		sub	r0, r10, r4
 617              		.loc 1 115 3 view .LVU145
 618 0056 3246     		mov	r2, r6
 619 0058 2946     		mov	r1, r5
 620 005a 00B2     		sxth	r0, r0
 621 005c FFF7FEFF 		bl	writePixel
 622              	.LVL67:
 116:Core/Src/GFX_FUNCTIONS.c **** 
ARM GAS  /tmp/cctVOKLy.s 			page 14


 117:Core/Src/GFX_FUNCTIONS.c ****   while (x < y) {
 623              		.loc 1 117 3 is_stmt 1 view .LVU146
 109:Core/Src/GFX_FUNCTIONS.c ****   int16_t y = r;
 624              		.loc 1 109 11 is_stmt 0 view .LVU147
 625 0060 0023     		movs	r3, #0
 626 0062 0293     		str	r3, [sp, #8]
 107:Core/Src/GFX_FUNCTIONS.c ****   int16_t ddF_y = -2 * r;
 627              		.loc 1 107 11 view .LVU148
 628 0064 0123     		movs	r3, #1
 629 0066 0393     		str	r3, [sp, #12]
 630              		.loc 1 117 9 view .LVU149
 631 0068 5EE0     		b	.L33
 632              	.LVL68:
 633              	.L38:
 118:Core/Src/GFX_FUNCTIONS.c ****     if (f >= 0) {
 119:Core/Src/GFX_FUNCTIONS.c ****       y--;
 634              		.loc 1 119 7 is_stmt 1 view .LVU150
 635              		.loc 1 119 8 is_stmt 0 view .LVU151
 636 006a 019B     		ldr	r3, [sp, #4]
 637 006c 013B     		subs	r3, r3, #1
 638 006e 1BB2     		sxth	r3, r3
 639 0070 0193     		str	r3, [sp, #4]
 640              	.LVL69:
 120:Core/Src/GFX_FUNCTIONS.c ****       ddF_y += 2;
 641              		.loc 1 120 7 is_stmt 1 view .LVU152
 642              		.loc 1 120 13 is_stmt 0 view .LVU153
 643 0072 059A     		ldr	r2, [sp, #20]
 644 0074 0232     		adds	r2, r2, #2
 645 0076 93B2     		uxth	r3, r2
 646 0078 12B2     		sxth	r2, r2
 647 007a 0592     		str	r2, [sp, #20]
 648              	.LVL70:
 121:Core/Src/GFX_FUNCTIONS.c ****       f += ddF_y;
 649              		.loc 1 121 7 is_stmt 1 view .LVU154
 650              		.loc 1 121 9 is_stmt 0 view .LVU155
 651 007c 4B44     		add	r3, r3, r9
 652 007e 0FFA83F9 		sxth	r9, r3
 653              	.LVL71:
 654              	.L34:
 122:Core/Src/GFX_FUNCTIONS.c ****     }
 123:Core/Src/GFX_FUNCTIONS.c ****     x++;
 655              		.loc 1 123 5 is_stmt 1 view .LVU156
 656              		.loc 1 123 6 is_stmt 0 view .LVU157
 657 0082 029B     		ldr	r3, [sp, #8]
 658 0084 0133     		adds	r3, r3, #1
 659 0086 9DB2     		uxth	r5, r3
 660 0088 1BB2     		sxth	r3, r3
 661 008a 0293     		str	r3, [sp, #8]
 662              	.LVL72:
 124:Core/Src/GFX_FUNCTIONS.c ****     ddF_x += 2;
 663              		.loc 1 124 5 is_stmt 1 view .LVU158
 664              		.loc 1 124 11 is_stmt 0 view .LVU159
 665 008c 039A     		ldr	r2, [sp, #12]
 666 008e 0232     		adds	r2, r2, #2
 667 0090 93B2     		uxth	r3, r2
 668 0092 12B2     		sxth	r2, r2
 669 0094 0392     		str	r2, [sp, #12]
ARM GAS  /tmp/cctVOKLy.s 			page 15


 670              	.LVL73:
 125:Core/Src/GFX_FUNCTIONS.c ****     f += ddF_x;
 671              		.loc 1 125 5 is_stmt 1 view .LVU160
 672              		.loc 1 125 7 is_stmt 0 view .LVU161
 673 0096 4B44     		add	r3, r3, r9
 674 0098 0FFA83F9 		sxth	r9, r3
 675              	.LVL74:
 126:Core/Src/GFX_FUNCTIONS.c **** 
 127:Core/Src/GFX_FUNCTIONS.c ****     writePixel(x0 + x, y0 + y, color);
 676              		.loc 1 127 5 is_stmt 1 view .LVU162
 677              		.loc 1 127 19 is_stmt 0 view .LVU163
 678 009c 0AEB0503 		add	r3, r10, r5
 679              		.loc 1 127 5 view .LVU164
 680 00a0 1BB2     		sxth	r3, r3
 681              		.loc 1 127 27 view .LVU165
 682 00a2 BDF80440 		ldrh	r4, [sp, #4]
 683 00a6 0BEB0408 		add	r8, fp, r4
 684              		.loc 1 127 5 view .LVU166
 685 00aa 0FFA88F8 		sxth	r8, r8
 686 00ae 3246     		mov	r2, r6
 687 00b0 4146     		mov	r1, r8
 688 00b2 0493     		str	r3, [sp, #16]
 689 00b4 1846     		mov	r0, r3
 690 00b6 FFF7FEFF 		bl	writePixel
 691              	.LVL75:
 128:Core/Src/GFX_FUNCTIONS.c ****     writePixel(x0 - x, y0 + y, color);
 692              		.loc 1 128 5 is_stmt 1 view .LVU167
 693              		.loc 1 128 19 is_stmt 0 view .LVU168
 694 00ba AAEB0507 		sub	r7, r10, r5
 695              		.loc 1 128 5 view .LVU169
 696 00be 3FB2     		sxth	r7, r7
 697 00c0 3246     		mov	r2, r6
 698 00c2 4146     		mov	r1, r8
 699 00c4 3846     		mov	r0, r7
 700 00c6 FFF7FEFF 		bl	writePixel
 701              	.LVL76:
 129:Core/Src/GFX_FUNCTIONS.c ****     writePixel(x0 + x, y0 - y, color);
 702              		.loc 1 129 5 is_stmt 1 view .LVU170
 703              		.loc 1 129 27 is_stmt 0 view .LVU171
 704 00ca ABEB0408 		sub	r8, fp, r4
 705              		.loc 1 129 5 view .LVU172
 706 00ce 0FFA88F8 		sxth	r8, r8
 707 00d2 3246     		mov	r2, r6
 708 00d4 4146     		mov	r1, r8
 709 00d6 0498     		ldr	r0, [sp, #16]
 710 00d8 FFF7FEFF 		bl	writePixel
 711              	.LVL77:
 130:Core/Src/GFX_FUNCTIONS.c ****     writePixel(x0 - x, y0 - y, color);
 712              		.loc 1 130 5 is_stmt 1 view .LVU173
 713 00dc 3246     		mov	r2, r6
 714 00de 4146     		mov	r1, r8
 715 00e0 3846     		mov	r0, r7
 716 00e2 FFF7FEFF 		bl	writePixel
 717              	.LVL78:
 131:Core/Src/GFX_FUNCTIONS.c ****     writePixel(x0 + y, y0 + x, color);
 718              		.loc 1 131 5 view .LVU174
 719              		.loc 1 131 19 is_stmt 0 view .LVU175
ARM GAS  /tmp/cctVOKLy.s 			page 16


 720 00e6 0AEB0407 		add	r7, r10, r4
 721              		.loc 1 131 5 view .LVU176
 722 00ea 3FB2     		sxth	r7, r7
 723              		.loc 1 131 27 view .LVU177
 724 00ec 0BEB0508 		add	r8, fp, r5
 725              		.loc 1 131 5 view .LVU178
 726 00f0 0FFA88F8 		sxth	r8, r8
 727 00f4 3246     		mov	r2, r6
 728 00f6 4146     		mov	r1, r8
 729 00f8 3846     		mov	r0, r7
 730 00fa FFF7FEFF 		bl	writePixel
 731              	.LVL79:
 132:Core/Src/GFX_FUNCTIONS.c ****     writePixel(x0 - y, y0 + x, color);
 732              		.loc 1 132 5 is_stmt 1 view .LVU179
 733              		.loc 1 132 19 is_stmt 0 view .LVU180
 734 00fe AAEB0404 		sub	r4, r10, r4
 735              		.loc 1 132 5 view .LVU181
 736 0102 24B2     		sxth	r4, r4
 737 0104 3246     		mov	r2, r6
 738 0106 4146     		mov	r1, r8
 739 0108 2046     		mov	r0, r4
 740 010a FFF7FEFF 		bl	writePixel
 741              	.LVL80:
 133:Core/Src/GFX_FUNCTIONS.c ****     writePixel(x0 + y, y0 - x, color);
 742              		.loc 1 133 5 is_stmt 1 view .LVU182
 743              		.loc 1 133 27 is_stmt 0 view .LVU183
 744 010e ABEB0505 		sub	r5, fp, r5
 745              		.loc 1 133 5 view .LVU184
 746 0112 2DB2     		sxth	r5, r5
 747 0114 3246     		mov	r2, r6
 748 0116 2946     		mov	r1, r5
 749 0118 3846     		mov	r0, r7
 750 011a FFF7FEFF 		bl	writePixel
 751              	.LVL81:
 134:Core/Src/GFX_FUNCTIONS.c ****     writePixel(x0 - y, y0 - x, color);
 752              		.loc 1 134 5 is_stmt 1 view .LVU185
 753 011e 3246     		mov	r2, r6
 754 0120 2946     		mov	r1, r5
 755 0122 2046     		mov	r0, r4
 756 0124 FFF7FEFF 		bl	writePixel
 757              	.LVL82:
 758              	.L33:
 117:Core/Src/GFX_FUNCTIONS.c ****     if (f >= 0) {
 759              		.loc 1 117 12 view .LVU186
 760 0128 029B     		ldr	r3, [sp, #8]
 761 012a 019A     		ldr	r2, [sp, #4]
 762 012c 9342     		cmp	r3, r2
 763 012e 03DA     		bge	.L37
 118:Core/Src/GFX_FUNCTIONS.c ****       y--;
 764              		.loc 1 118 5 view .LVU187
 118:Core/Src/GFX_FUNCTIONS.c ****       y--;
 765              		.loc 1 118 8 is_stmt 0 view .LVU188
 766 0130 B9F1000F 		cmp	r9, #0
 767 0134 99DA     		bge	.L38
 768 0136 A4E7     		b	.L34
 769              	.L37:
 135:Core/Src/GFX_FUNCTIONS.c ****   }
ARM GAS  /tmp/cctVOKLy.s 			page 17


 136:Core/Src/GFX_FUNCTIONS.c **** }
 770              		.loc 1 136 1 view .LVU189
 771 0138 07B0     		add	sp, sp, #28
 772              	.LCFI20:
 773              		.cfi_def_cfa_offset 36
 774              		@ sp needed
 775 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 776              		.loc 1 136 1 view .LVU190
 777              		.cfi_endproc
 778              	.LFE72:
 780              		.section	.text.drawCircleHelper,"ax",%progbits
 781              		.align	1
 782              		.global	drawCircleHelper
 783              		.syntax unified
 784              		.thumb
 785              		.thumb_func
 787              	drawCircleHelper:
 788              	.LVL83:
 789              	.LFB73:
 137:Core/Src/GFX_FUNCTIONS.c **** 
 138:Core/Src/GFX_FUNCTIONS.c **** void drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
 139:Core/Src/GFX_FUNCTIONS.c ****                       uint16_t color) {
 790              		.loc 1 139 39 is_stmt 1 view -0
 791              		.cfi_startproc
 792              		@ args = 4, pretend = 0, frame = 24
 793              		@ frame_needed = 0, uses_anonymous_args = 0
 794              		.loc 1 139 39 is_stmt 0 view .LVU192
 795 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 796              	.LCFI21:
 797              		.cfi_def_cfa_offset 36
 798              		.cfi_offset 4, -36
 799              		.cfi_offset 5, -32
 800              		.cfi_offset 6, -28
 801              		.cfi_offset 7, -24
 802              		.cfi_offset 8, -20
 803              		.cfi_offset 9, -16
 804              		.cfi_offset 10, -12
 805              		.cfi_offset 11, -8
 806              		.cfi_offset 14, -4
 807 0004 87B0     		sub	sp, sp, #28
 808              	.LCFI22:
 809              		.cfi_def_cfa_offset 64
 810 0006 0390     		str	r0, [sp, #12]
 811 0008 0491     		str	r1, [sp, #16]
 812 000a 9046     		mov	r8, r2
 813 000c 1E46     		mov	r6, r3
 814 000e BDF84030 		ldrh	r3, [sp, #64]
 815              	.LVL84:
 816              		.loc 1 139 39 view .LVU193
 817 0012 0193     		str	r3, [sp, #4]
 140:Core/Src/GFX_FUNCTIONS.c ****   int16_t f = 1 - r;
 818              		.loc 1 140 3 is_stmt 1 view .LVU194
 819              		.loc 1 140 17 is_stmt 0 view .LVU195
 820 0014 93B2     		uxth	r3, r2
 821 0016 C3F10104 		rsb	r4, r3, #1
 822              		.loc 1 140 11 view .LVU196
 823 001a 24B2     		sxth	r4, r4
ARM GAS  /tmp/cctVOKLy.s 			page 18


 824              	.LVL85:
 141:Core/Src/GFX_FUNCTIONS.c ****   int16_t ddF_x = 1;
 825              		.loc 1 141 3 is_stmt 1 view .LVU197
 142:Core/Src/GFX_FUNCTIONS.c ****   int16_t ddF_y = -2 * r;
 826              		.loc 1 142 3 view .LVU198
 827              		.loc 1 142 22 is_stmt 0 view .LVU199
 828 001c C3EBC333 		rsb	r3, r3, r3, lsl #15
 829 0020 5B00     		lsls	r3, r3, #1
 830              		.loc 1 142 11 view .LVU200
 831 0022 1BB2     		sxth	r3, r3
 832 0024 0593     		str	r3, [sp, #20]
 833              	.LVL86:
 143:Core/Src/GFX_FUNCTIONS.c ****   int16_t x = 0;
 834              		.loc 1 143 3 is_stmt 1 view .LVU201
 144:Core/Src/GFX_FUNCTIONS.c ****   int16_t y = r;
 835              		.loc 1 144 3 view .LVU202
 145:Core/Src/GFX_FUNCTIONS.c **** 
 146:Core/Src/GFX_FUNCTIONS.c ****   while (x < y) {
 836              		.loc 1 146 3 view .LVU203
 143:Core/Src/GFX_FUNCTIONS.c ****   int16_t y = r;
 837              		.loc 1 143 11 is_stmt 0 view .LVU204
 838 0026 0025     		movs	r5, #0
 141:Core/Src/GFX_FUNCTIONS.c ****   int16_t ddF_y = -2 * r;
 839              		.loc 1 141 11 view .LVU205
 840 0028 0123     		movs	r3, #1
 841 002a 0293     		str	r3, [sp, #8]
 842              		.loc 1 146 9 view .LVU206
 843 002c 20E0     		b	.L40
 844              	.LVL87:
 845              	.L53:
 147:Core/Src/GFX_FUNCTIONS.c ****     if (f >= 0) {
 148:Core/Src/GFX_FUNCTIONS.c ****       y--;
 846              		.loc 1 148 7 is_stmt 1 view .LVU207
 847              		.loc 1 148 8 is_stmt 0 view .LVU208
 848 002e 08F1FF38 		add	r8, r8, #-1
 849              	.LVL88:
 850              		.loc 1 148 8 view .LVU209
 851 0032 0FFA88F8 		sxth	r8, r8
 852              	.LVL89:
 149:Core/Src/GFX_FUNCTIONS.c ****       ddF_y += 2;
 853              		.loc 1 149 7 is_stmt 1 view .LVU210
 854              		.loc 1 149 13 is_stmt 0 view .LVU211
 855 0036 059A     		ldr	r2, [sp, #20]
 856 0038 0232     		adds	r2, r2, #2
 857 003a 93B2     		uxth	r3, r2
 858 003c 12B2     		sxth	r2, r2
 859 003e 0592     		str	r2, [sp, #20]
 860              	.LVL90:
 150:Core/Src/GFX_FUNCTIONS.c ****       f += ddF_y;
 861              		.loc 1 150 7 is_stmt 1 view .LVU212
 862              		.loc 1 150 9 is_stmt 0 view .LVU213
 863 0040 2344     		add	r3, r3, r4
 864 0042 1CB2     		sxth	r4, r3
 865              	.LVL91:
 866              	.L41:
 151:Core/Src/GFX_FUNCTIONS.c ****     }
 152:Core/Src/GFX_FUNCTIONS.c ****     x++;
ARM GAS  /tmp/cctVOKLy.s 			page 19


 867              		.loc 1 152 5 is_stmt 1 view .LVU214
 868              		.loc 1 152 6 is_stmt 0 view .LVU215
 869 0044 0135     		adds	r5, r5, #1
 870              	.LVL92:
 871              		.loc 1 152 6 view .LVU216
 872 0046 AFB2     		uxth	r7, r5
 873 0048 2DB2     		sxth	r5, r5
 874              	.LVL93:
 153:Core/Src/GFX_FUNCTIONS.c ****     ddF_x += 2;
 875              		.loc 1 153 5 is_stmt 1 view .LVU217
 876              		.loc 1 153 11 is_stmt 0 view .LVU218
 877 004a 029A     		ldr	r2, [sp, #8]
 878 004c 0232     		adds	r2, r2, #2
 879 004e 93B2     		uxth	r3, r2
 880 0050 12B2     		sxth	r2, r2
 881 0052 0292     		str	r2, [sp, #8]
 882              	.LVL94:
 154:Core/Src/GFX_FUNCTIONS.c ****     f += ddF_x;
 883              		.loc 1 154 5 is_stmt 1 view .LVU219
 884              		.loc 1 154 7 is_stmt 0 view .LVU220
 885 0054 2344     		add	r3, r3, r4
 886 0056 1CB2     		sxth	r4, r3
 887              	.LVL95:
 155:Core/Src/GFX_FUNCTIONS.c ****     if (cornername & 0x4) {
 888              		.loc 1 155 5 is_stmt 1 view .LVU221
 889              		.loc 1 155 8 is_stmt 0 view .LVU222
 890 0058 16F0040F 		tst	r6, #4
 891 005c 0DD1     		bne	.L48
 892              	.L42:
 156:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + x, y0 + y, color);
 157:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 + x, color);
 158:Core/Src/GFX_FUNCTIONS.c ****     }
 159:Core/Src/GFX_FUNCTIONS.c ****     if (cornername & 0x2) {
 893              		.loc 1 159 5 is_stmt 1 view .LVU223
 894              		.loc 1 159 8 is_stmt 0 view .LVU224
 895 005e 16F0020F 		tst	r6, #2
 896 0062 23D1     		bne	.L49
 897              	.L43:
 160:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + x, y0 - y, color);
 161:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 - x, color);
 162:Core/Src/GFX_FUNCTIONS.c ****     }
 163:Core/Src/GFX_FUNCTIONS.c ****     if (cornername & 0x8) {
 898              		.loc 1 163 5 is_stmt 1 view .LVU225
 899              		.loc 1 163 8 is_stmt 0 view .LVU226
 900 0064 16F0080F 		tst	r6, #8
 901 0068 39D1     		bne	.L50
 902              	.L44:
 164:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 - y, y0 + x, color);
 165:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 - x, y0 + y, color);
 166:Core/Src/GFX_FUNCTIONS.c ****     }
 167:Core/Src/GFX_FUNCTIONS.c ****     if (cornername & 0x1) {
 903              		.loc 1 167 5 is_stmt 1 view .LVU227
 904              		.loc 1 167 8 is_stmt 0 view .LVU228
 905 006a 16F0010F 		tst	r6, #1
 906 006e 4FD1     		bne	.L51
 907              	.LVL96:
 908              	.L40:
ARM GAS  /tmp/cctVOKLy.s 			page 20


 146:Core/Src/GFX_FUNCTIONS.c ****     if (f >= 0) {
 909              		.loc 1 146 12 is_stmt 1 view .LVU229
 910 0070 4545     		cmp	r5, r8
 911 0072 66DA     		bge	.L52
 147:Core/Src/GFX_FUNCTIONS.c ****       y--;
 912              		.loc 1 147 5 view .LVU230
 147:Core/Src/GFX_FUNCTIONS.c ****       y--;
 913              		.loc 1 147 8 is_stmt 0 view .LVU231
 914 0074 002C     		cmp	r4, #0
 915 0076 DADA     		bge	.L53
 916 0078 E4E7     		b	.L41
 917              	.L48:
 156:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 + x, color);
 918              		.loc 1 156 7 is_stmt 1 view .LVU232
 156:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 + x, color);
 919              		.loc 1 156 21 is_stmt 0 view .LVU233
 920 007a BDF80CA0 		ldrh	r10, [sp, #12]
 921 007e 07EB0A00 		add	r0, r7, r10
 156:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 + x, color);
 922              		.loc 1 156 29 view .LVU234
 923 0082 BDF81090 		ldrh	r9, [sp, #16]
 924 0086 1FFA88FB 		uxth	fp, r8
 925 008a 09EB0B01 		add	r1, r9, fp
 156:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 + x, color);
 926              		.loc 1 156 7 view .LVU235
 927 008e 019A     		ldr	r2, [sp, #4]
 928 0090 09B2     		sxth	r1, r1
 929 0092 00B2     		sxth	r0, r0
 930 0094 FFF7FEFF 		bl	writePixel
 931              	.LVL97:
 157:Core/Src/GFX_FUNCTIONS.c ****     }
 932              		.loc 1 157 7 is_stmt 1 view .LVU236
 157:Core/Src/GFX_FUNCTIONS.c ****     }
 933              		.loc 1 157 21 is_stmt 0 view .LVU237
 934 0098 0AEB0B00 		add	r0, r10, fp
 157:Core/Src/GFX_FUNCTIONS.c ****     }
 935              		.loc 1 157 29 view .LVU238
 936 009c 07EB0901 		add	r1, r7, r9
 157:Core/Src/GFX_FUNCTIONS.c ****     }
 937              		.loc 1 157 7 view .LVU239
 938 00a0 019A     		ldr	r2, [sp, #4]
 939 00a2 09B2     		sxth	r1, r1
 940 00a4 00B2     		sxth	r0, r0
 941 00a6 FFF7FEFF 		bl	writePixel
 942              	.LVL98:
 943 00aa D8E7     		b	.L42
 944              	.L49:
 160:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 - x, color);
 945              		.loc 1 160 7 is_stmt 1 view .LVU240
 160:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 - x, color);
 946              		.loc 1 160 21 is_stmt 0 view .LVU241
 947 00ac BDF80CA0 		ldrh	r10, [sp, #12]
 948 00b0 07EB0A00 		add	r0, r7, r10
 160:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 - x, color);
 949              		.loc 1 160 29 view .LVU242
 950 00b4 BDF81090 		ldrh	r9, [sp, #16]
 951 00b8 1FFA88FB 		uxth	fp, r8
ARM GAS  /tmp/cctVOKLy.s 			page 21


 952 00bc A9EB0B01 		sub	r1, r9, fp
 160:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 + y, y0 - x, color);
 953              		.loc 1 160 7 view .LVU243
 954 00c0 019A     		ldr	r2, [sp, #4]
 955 00c2 09B2     		sxth	r1, r1
 956 00c4 00B2     		sxth	r0, r0
 957 00c6 FFF7FEFF 		bl	writePixel
 958              	.LVL99:
 161:Core/Src/GFX_FUNCTIONS.c ****     }
 959              		.loc 1 161 7 is_stmt 1 view .LVU244
 161:Core/Src/GFX_FUNCTIONS.c ****     }
 960              		.loc 1 161 21 is_stmt 0 view .LVU245
 961 00ca 0AEB0B00 		add	r0, r10, fp
 161:Core/Src/GFX_FUNCTIONS.c ****     }
 962              		.loc 1 161 29 view .LVU246
 963 00ce A9EB0701 		sub	r1, r9, r7
 161:Core/Src/GFX_FUNCTIONS.c ****     }
 964              		.loc 1 161 7 view .LVU247
 965 00d2 019A     		ldr	r2, [sp, #4]
 966 00d4 09B2     		sxth	r1, r1
 967 00d6 00B2     		sxth	r0, r0
 968 00d8 FFF7FEFF 		bl	writePixel
 969              	.LVL100:
 970 00dc C2E7     		b	.L43
 971              	.L50:
 164:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 - x, y0 + y, color);
 972              		.loc 1 164 7 is_stmt 1 view .LVU248
 164:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 - x, y0 + y, color);
 973              		.loc 1 164 21 is_stmt 0 view .LVU249
 974 00de BDF80C90 		ldrh	r9, [sp, #12]
 975 00e2 1FFA88FA 		uxth	r10, r8
 976 00e6 A9EB0A00 		sub	r0, r9, r10
 164:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 - x, y0 + y, color);
 977              		.loc 1 164 29 view .LVU250
 978 00ea BDF810B0 		ldrh	fp, [sp, #16]
 979 00ee 07EB0B01 		add	r1, r7, fp
 164:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 - x, y0 + y, color);
 980              		.loc 1 164 7 view .LVU251
 981 00f2 019A     		ldr	r2, [sp, #4]
 982 00f4 09B2     		sxth	r1, r1
 983 00f6 00B2     		sxth	r0, r0
 984 00f8 FFF7FEFF 		bl	writePixel
 985              	.LVL101:
 165:Core/Src/GFX_FUNCTIONS.c ****     }
 986              		.loc 1 165 7 is_stmt 1 view .LVU252
 165:Core/Src/GFX_FUNCTIONS.c ****     }
 987              		.loc 1 165 21 is_stmt 0 view .LVU253
 988 00fc A9EB0700 		sub	r0, r9, r7
 165:Core/Src/GFX_FUNCTIONS.c ****     }
 989              		.loc 1 165 29 view .LVU254
 990 0100 0AEB0B01 		add	r1, r10, fp
 165:Core/Src/GFX_FUNCTIONS.c ****     }
 991              		.loc 1 165 7 view .LVU255
 992 0104 019A     		ldr	r2, [sp, #4]
 993 0106 09B2     		sxth	r1, r1
 994 0108 00B2     		sxth	r0, r0
 995 010a FFF7FEFF 		bl	writePixel
ARM GAS  /tmp/cctVOKLy.s 			page 22


 996              	.LVL102:
 997 010e ACE7     		b	.L44
 998              	.L51:
 168:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 - y, y0 - x, color);
 999              		.loc 1 168 7 is_stmt 1 view .LVU256
 1000              		.loc 1 168 21 is_stmt 0 view .LVU257
 1001 0110 BDF80C90 		ldrh	r9, [sp, #12]
 1002 0114 1FFA88FB 		uxth	fp, r8
 1003 0118 A9EB0B00 		sub	r0, r9, fp
 1004              		.loc 1 168 29 view .LVU258
 1005 011c BDF810A0 		ldrh	r10, [sp, #16]
 1006 0120 AAEB0701 		sub	r1, r10, r7
 1007              		.loc 1 168 7 view .LVU259
 1008 0124 019A     		ldr	r2, [sp, #4]
 1009 0126 09B2     		sxth	r1, r1
 1010 0128 00B2     		sxth	r0, r0
 1011 012a FFF7FEFF 		bl	writePixel
 1012              	.LVL103:
 169:Core/Src/GFX_FUNCTIONS.c ****       writePixel(x0 - x, y0 - y, color);
 1013              		.loc 1 169 7 is_stmt 1 view .LVU260
 1014              		.loc 1 169 21 is_stmt 0 view .LVU261
 1015 012e A9EB0700 		sub	r0, r9, r7
 1016              		.loc 1 169 29 view .LVU262
 1017 0132 AAEB0B01 		sub	r1, r10, fp
 1018              		.loc 1 169 7 view .LVU263
 1019 0136 019A     		ldr	r2, [sp, #4]
 1020 0138 09B2     		sxth	r1, r1
 1021 013a 00B2     		sxth	r0, r0
 1022 013c FFF7FEFF 		bl	writePixel
 1023              	.LVL104:
 1024 0140 96E7     		b	.L40
 1025              	.L52:
 170:Core/Src/GFX_FUNCTIONS.c ****     }
 171:Core/Src/GFX_FUNCTIONS.c ****   }
 172:Core/Src/GFX_FUNCTIONS.c **** }
 1026              		.loc 1 172 1 view .LVU264
 1027 0142 07B0     		add	sp, sp, #28
 1028              	.LCFI23:
 1029              		.cfi_def_cfa_offset 36
 1030              		@ sp needed
 1031 0144 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1032              		.loc 1 172 1 view .LVU265
 1033              		.cfi_endproc
 1034              	.LFE73:
 1036              		.section	.text.fillCircleHelper,"ax",%progbits
 1037              		.align	1
 1038              		.global	fillCircleHelper
 1039              		.syntax unified
 1040              		.thumb
 1041              		.thumb_func
 1043              	fillCircleHelper:
 1044              	.LVL105:
 1045              	.LFB74:
 173:Core/Src/GFX_FUNCTIONS.c **** 
 174:Core/Src/GFX_FUNCTIONS.c **** void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners,
 175:Core/Src/GFX_FUNCTIONS.c ****                       int16_t delta, uint16_t color) {
 1046              		.loc 1 175 54 is_stmt 1 view -0
ARM GAS  /tmp/cctVOKLy.s 			page 23


 1047              		.cfi_startproc
 1048              		@ args = 8, pretend = 0, frame = 24
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              		.loc 1 175 54 is_stmt 0 view .LVU267
 1051 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1052              	.LCFI24:
 1053              		.cfi_def_cfa_offset 36
 1054              		.cfi_offset 4, -36
 1055              		.cfi_offset 5, -32
 1056              		.cfi_offset 6, -28
 1057              		.cfi_offset 7, -24
 1058              		.cfi_offset 8, -20
 1059              		.cfi_offset 9, -16
 1060              		.cfi_offset 10, -12
 1061              		.cfi_offset 11, -8
 1062              		.cfi_offset 14, -4
 1063 0004 87B0     		sub	sp, sp, #28
 1064              	.LCFI25:
 1065              		.cfi_def_cfa_offset 64
 1066 0006 0390     		str	r0, [sp, #12]
 1067 0008 0491     		str	r1, [sp, #16]
 1068 000a 1646     		mov	r6, r2
 1069 000c 9946     		mov	r9, r3
 1070 000e BDF84430 		ldrh	r3, [sp, #68]
 1071              	.LVL106:
 1072              		.loc 1 175 54 view .LVU268
 1073 0012 0593     		str	r3, [sp, #20]
 176:Core/Src/GFX_FUNCTIONS.c **** 
 177:Core/Src/GFX_FUNCTIONS.c ****   int16_t f = 1 - r;
 1074              		.loc 1 177 3 is_stmt 1 view .LVU269
 1075              		.loc 1 177 17 is_stmt 0 view .LVU270
 1076 0014 93B2     		uxth	r3, r2
 1077 0016 C3F10104 		rsb	r4, r3, #1
 1078              		.loc 1 177 11 view .LVU271
 1079 001a 24B2     		sxth	r4, r4
 1080              	.LVL107:
 178:Core/Src/GFX_FUNCTIONS.c ****   int16_t ddF_x = 1;
 1081              		.loc 1 178 3 is_stmt 1 view .LVU272
 179:Core/Src/GFX_FUNCTIONS.c ****   int16_t ddF_y = -2 * r;
 1082              		.loc 1 179 3 view .LVU273
 1083              		.loc 1 179 22 is_stmt 0 view .LVU274
 1084 001c C3EBC333 		rsb	r3, r3, r3, lsl #15
 1085 0020 5B00     		lsls	r3, r3, #1
 1086              		.loc 1 179 11 view .LVU275
 1087 0022 1BB2     		sxth	r3, r3
 1088 0024 0193     		str	r3, [sp, #4]
 1089              	.LVL108:
 180:Core/Src/GFX_FUNCTIONS.c ****   int16_t x = 0;
 1090              		.loc 1 180 3 is_stmt 1 view .LVU276
 181:Core/Src/GFX_FUNCTIONS.c ****   int16_t y = r;
 1091              		.loc 1 181 3 view .LVU277
 182:Core/Src/GFX_FUNCTIONS.c ****   int16_t px = x;
 1092              		.loc 1 182 3 view .LVU278
 183:Core/Src/GFX_FUNCTIONS.c ****   int16_t py = y;
 1093              		.loc 1 183 3 view .LVU279
 184:Core/Src/GFX_FUNCTIONS.c **** 
 185:Core/Src/GFX_FUNCTIONS.c ****   delta++; // Avoid some +1's in the loop
ARM GAS  /tmp/cctVOKLy.s 			page 24


 1094              		.loc 1 185 3 view .LVU280
 1095              		.loc 1 185 8 is_stmt 0 view .LVU281
 1096 0026 BDF94030 		ldrsh	r3, [sp, #64]
 1097 002a 0133     		adds	r3, r3, #1
 1098 002c 9BB2     		uxth	r3, r3
 1099 002e 0293     		str	r3, [sp, #8]
 1100              	.LVL109:
 186:Core/Src/GFX_FUNCTIONS.c **** 
 187:Core/Src/GFX_FUNCTIONS.c ****   while (x < y) {
 1101              		.loc 1 187 3 is_stmt 1 view .LVU282
 183:Core/Src/GFX_FUNCTIONS.c **** 
 1102              		.loc 1 183 11 is_stmt 0 view .LVU283
 1103 0030 9246     		mov	r10, r2
 180:Core/Src/GFX_FUNCTIONS.c ****   int16_t y = r;
 1104              		.loc 1 180 11 view .LVU284
 1105 0032 0025     		movs	r5, #0
 178:Core/Src/GFX_FUNCTIONS.c ****   int16_t ddF_y = -2 * r;
 1106              		.loc 1 178 11 view .LVU285
 1107 0034 0127     		movs	r7, #1
 1108              		.loc 1 187 9 view .LVU286
 1109 0036 19E0     		b	.L55
 1110              	.LVL110:
 1111              	.L67:
 188:Core/Src/GFX_FUNCTIONS.c ****     if (f >= 0) {
 189:Core/Src/GFX_FUNCTIONS.c ****       y--;
 190:Core/Src/GFX_FUNCTIONS.c ****       ddF_y += 2;
 191:Core/Src/GFX_FUNCTIONS.c ****       f += ddF_y;
 192:Core/Src/GFX_FUNCTIONS.c ****     }
 193:Core/Src/GFX_FUNCTIONS.c ****     x++;
 194:Core/Src/GFX_FUNCTIONS.c ****     ddF_x += 2;
 195:Core/Src/GFX_FUNCTIONS.c ****     f += ddF_x;
 196:Core/Src/GFX_FUNCTIONS.c ****     // These checks avoid double-drawing certain lines, important
 197:Core/Src/GFX_FUNCTIONS.c ****     // for the SSD1306 library which has an INVERT drawing mode.
 198:Core/Src/GFX_FUNCTIONS.c ****     if (x < (y + 1)) {
 199:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 1)
 200:Core/Src/GFX_FUNCTIONS.c ****         drawFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 1112              		.loc 1 200 9 is_stmt 1 view .LVU287
 1113              		.loc 1 200 26 is_stmt 0 view .LVU288
 1114 0038 039B     		ldr	r3, [sp, #12]
 1115 003a 0BEB0300 		add	r0, fp, r3
 1116              		.loc 1 200 34 view .LVU289
 1117 003e B3B2     		uxth	r3, r6
 1118 0040 049A     		ldr	r2, [sp, #16]
 1119 0042 D11A     		subs	r1, r2, r3
 1120              		.loc 1 200 41 view .LVU290
 1121 0044 5A00     		lsls	r2, r3, #1
 1122 0046 92B2     		uxth	r2, r2
 1123              		.loc 1 200 45 view .LVU291
 1124 0048 029B     		ldr	r3, [sp, #8]
 1125 004a 1A44     		add	r2, r2, r3
 1126              		.loc 1 200 9 view .LVU292
 1127 004c 059B     		ldr	r3, [sp, #20]
 1128 004e 12B2     		sxth	r2, r2
 1129 0050 09B2     		sxth	r1, r1
 1130 0052 00B2     		sxth	r0, r0
 1131 0054 FFF7FEFF 		bl	drawFastVLine
 1132              	.LVL111:
ARM GAS  /tmp/cctVOKLy.s 			page 25


 1133 0058 26E0     		b	.L58
 1134              	.L57:
 201:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 2)
 202:Core/Src/GFX_FUNCTIONS.c ****         drawFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 203:Core/Src/GFX_FUNCTIONS.c ****     }
 204:Core/Src/GFX_FUNCTIONS.c ****     if (y != py) {
 1135              		.loc 1 204 5 is_stmt 1 view .LVU293
 1136              		.loc 1 204 8 is_stmt 0 view .LVU294
 1137 005a 5645     		cmp	r6, r10
 1138 005c 06D0     		beq	.L55
 205:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 1)
 1139              		.loc 1 205 7 is_stmt 1 view .LVU295
 1140              		.loc 1 205 10 is_stmt 0 view .LVU296
 1141 005e 19F0010F 		tst	r9, #1
 1142 0062 35D1     		bne	.L64
 1143              	.L60:
 206:Core/Src/GFX_FUNCTIONS.c ****         drawFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 207:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 2)
 1144              		.loc 1 207 7 is_stmt 1 view .LVU297
 1145              		.loc 1 207 10 is_stmt 0 view .LVU298
 1146 0064 19F0020F 		tst	r9, #2
 1147 0068 44D1     		bne	.L65
 208:Core/Src/GFX_FUNCTIONS.c ****         drawFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 209:Core/Src/GFX_FUNCTIONS.c ****       py = y;
 1148              		.loc 1 209 10 view .LVU299
 1149 006a B246     		mov	r10, r6
 1150              	.LVL112:
 1151              	.L55:
 187:Core/Src/GFX_FUNCTIONS.c ****     if (f >= 0) {
 1152              		.loc 1 187 12 is_stmt 1 view .LVU300
 1153 006c B542     		cmp	r5, r6
 1154 006e 54DA     		bge	.L66
 188:Core/Src/GFX_FUNCTIONS.c ****       y--;
 1155              		.loc 1 188 5 view .LVU301
 188:Core/Src/GFX_FUNCTIONS.c ****       y--;
 1156              		.loc 1 188 8 is_stmt 0 view .LVU302
 1157 0070 002C     		cmp	r4, #0
 1158 0072 08DB     		blt	.L56
 189:Core/Src/GFX_FUNCTIONS.c ****       ddF_y += 2;
 1159              		.loc 1 189 7 is_stmt 1 view .LVU303
 189:Core/Src/GFX_FUNCTIONS.c ****       ddF_y += 2;
 1160              		.loc 1 189 8 is_stmt 0 view .LVU304
 1161 0074 013E     		subs	r6, r6, #1
 1162              	.LVL113:
 189:Core/Src/GFX_FUNCTIONS.c ****       ddF_y += 2;
 1163              		.loc 1 189 8 view .LVU305
 1164 0076 36B2     		sxth	r6, r6
 1165              	.LVL114:
 190:Core/Src/GFX_FUNCTIONS.c ****       f += ddF_y;
 1166              		.loc 1 190 7 is_stmt 1 view .LVU306
 190:Core/Src/GFX_FUNCTIONS.c ****       f += ddF_y;
 1167              		.loc 1 190 13 is_stmt 0 view .LVU307
 1168 0078 019A     		ldr	r2, [sp, #4]
 1169 007a 0232     		adds	r2, r2, #2
 1170 007c 93B2     		uxth	r3, r2
 1171 007e 12B2     		sxth	r2, r2
 1172 0080 0192     		str	r2, [sp, #4]
ARM GAS  /tmp/cctVOKLy.s 			page 26


 1173              	.LVL115:
 191:Core/Src/GFX_FUNCTIONS.c ****     }
 1174              		.loc 1 191 7 is_stmt 1 view .LVU308
 191:Core/Src/GFX_FUNCTIONS.c ****     }
 1175              		.loc 1 191 9 is_stmt 0 view .LVU309
 1176 0082 2344     		add	r3, r3, r4
 1177 0084 1CB2     		sxth	r4, r3
 1178              	.LVL116:
 1179              	.L56:
 193:Core/Src/GFX_FUNCTIONS.c ****     ddF_x += 2;
 1180              		.loc 1 193 5 is_stmt 1 view .LVU310
 193:Core/Src/GFX_FUNCTIONS.c ****     ddF_x += 2;
 1181              		.loc 1 193 6 is_stmt 0 view .LVU311
 1182 0086 1FFA85F8 		uxth	r8, r5
 1183 008a 08F10105 		add	r5, r8, #1
 1184              	.LVL117:
 193:Core/Src/GFX_FUNCTIONS.c ****     ddF_x += 2;
 1185              		.loc 1 193 6 view .LVU312
 1186 008e 1FFA85FB 		uxth	fp, r5
 1187 0092 2DB2     		sxth	r5, r5
 1188              	.LVL118:
 194:Core/Src/GFX_FUNCTIONS.c ****     f += ddF_x;
 1189              		.loc 1 194 5 is_stmt 1 view .LVU313
 194:Core/Src/GFX_FUNCTIONS.c ****     f += ddF_x;
 1190              		.loc 1 194 11 is_stmt 0 view .LVU314
 1191 0094 0237     		adds	r7, r7, #2
 1192              	.LVL119:
 194:Core/Src/GFX_FUNCTIONS.c ****     f += ddF_x;
 1193              		.loc 1 194 11 view .LVU315
 1194 0096 BBB2     		uxth	r3, r7
 1195 0098 3FB2     		sxth	r7, r7
 1196              	.LVL120:
 195:Core/Src/GFX_FUNCTIONS.c ****     // These checks avoid double-drawing certain lines, important
 1197              		.loc 1 195 5 is_stmt 1 view .LVU316
 195:Core/Src/GFX_FUNCTIONS.c ****     // These checks avoid double-drawing certain lines, important
 1198              		.loc 1 195 7 is_stmt 0 view .LVU317
 1199 009a 2344     		add	r3, r3, r4
 1200 009c 1CB2     		sxth	r4, r3
 1201              	.LVL121:
 198:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 1)
 1202              		.loc 1 198 5 is_stmt 1 view .LVU318
 198:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 1)
 1203              		.loc 1 198 8 is_stmt 0 view .LVU319
 1204 009e AE42     		cmp	r6, r5
 1205 00a0 DBDB     		blt	.L57
 199:Core/Src/GFX_FUNCTIONS.c ****         drawFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 1206              		.loc 1 199 7 is_stmt 1 view .LVU320
 199:Core/Src/GFX_FUNCTIONS.c ****         drawFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 1207              		.loc 1 199 10 is_stmt 0 view .LVU321
 1208 00a2 19F0010F 		tst	r9, #1
 1209 00a6 C7D1     		bne	.L67
 1210              	.L58:
 201:Core/Src/GFX_FUNCTIONS.c ****         drawFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 1211              		.loc 1 201 7 is_stmt 1 view .LVU322
 201:Core/Src/GFX_FUNCTIONS.c ****         drawFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 1212              		.loc 1 201 10 is_stmt 0 view .LVU323
 1213 00a8 19F0020F 		tst	r9, #2
ARM GAS  /tmp/cctVOKLy.s 			page 27


 1214 00ac D5D0     		beq	.L57
 202:Core/Src/GFX_FUNCTIONS.c ****     }
 1215              		.loc 1 202 9 is_stmt 1 view .LVU324
 202:Core/Src/GFX_FUNCTIONS.c ****     }
 1216              		.loc 1 202 26 is_stmt 0 view .LVU325
 1217 00ae 039B     		ldr	r3, [sp, #12]
 1218 00b0 A3EB0B00 		sub	r0, r3, fp
 202:Core/Src/GFX_FUNCTIONS.c ****     }
 1219              		.loc 1 202 34 view .LVU326
 1220 00b4 B3B2     		uxth	r3, r6
 1221 00b6 049A     		ldr	r2, [sp, #16]
 1222 00b8 D11A     		subs	r1, r2, r3
 202:Core/Src/GFX_FUNCTIONS.c ****     }
 1223              		.loc 1 202 41 view .LVU327
 1224 00ba 5A00     		lsls	r2, r3, #1
 1225 00bc 92B2     		uxth	r2, r2
 202:Core/Src/GFX_FUNCTIONS.c ****     }
 1226              		.loc 1 202 45 view .LVU328
 1227 00be 029B     		ldr	r3, [sp, #8]
 1228 00c0 1A44     		add	r2, r2, r3
 202:Core/Src/GFX_FUNCTIONS.c ****     }
 1229              		.loc 1 202 9 view .LVU329
 1230 00c2 059B     		ldr	r3, [sp, #20]
 1231 00c4 12B2     		sxth	r2, r2
 1232 00c6 09B2     		sxth	r1, r1
 1233 00c8 00B2     		sxth	r0, r0
 1234 00ca FFF7FEFF 		bl	drawFastVLine
 1235              	.LVL122:
 1236 00ce C4E7     		b	.L57
 1237              	.L64:
 206:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 2)
 1238              		.loc 1 206 9 is_stmt 1 view .LVU330
 206:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 2)
 1239              		.loc 1 206 26 is_stmt 0 view .LVU331
 1240 00d0 039B     		ldr	r3, [sp, #12]
 1241 00d2 03EB0A00 		add	r0, r3, r10
 206:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 2)
 1242              		.loc 1 206 35 view .LVU332
 1243 00d6 049B     		ldr	r3, [sp, #16]
 1244 00d8 A3EB0801 		sub	r1, r3, r8
 206:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 2)
 1245              		.loc 1 206 43 view .LVU333
 1246 00dc 4FEA4802 		lsl	r2, r8, #1
 1247 00e0 92B2     		uxth	r2, r2
 206:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 2)
 1248              		.loc 1 206 48 view .LVU334
 1249 00e2 029B     		ldr	r3, [sp, #8]
 1250 00e4 1A44     		add	r2, r2, r3
 206:Core/Src/GFX_FUNCTIONS.c ****       if (corners & 2)
 1251              		.loc 1 206 9 view .LVU335
 1252 00e6 059B     		ldr	r3, [sp, #20]
 1253 00e8 12B2     		sxth	r2, r2
 1254 00ea 09B2     		sxth	r1, r1
 1255 00ec 00B2     		sxth	r0, r0
 1256 00ee FFF7FEFF 		bl	drawFastVLine
 1257              	.LVL123:
 1258 00f2 B7E7     		b	.L60
ARM GAS  /tmp/cctVOKLy.s 			page 28


 1259              	.L65:
 208:Core/Src/GFX_FUNCTIONS.c ****       py = y;
 1260              		.loc 1 208 9 is_stmt 1 view .LVU336
 208:Core/Src/GFX_FUNCTIONS.c ****       py = y;
 1261              		.loc 1 208 26 is_stmt 0 view .LVU337
 1262 00f4 039B     		ldr	r3, [sp, #12]
 1263 00f6 A3EB0A00 		sub	r0, r3, r10
 208:Core/Src/GFX_FUNCTIONS.c ****       py = y;
 1264              		.loc 1 208 35 view .LVU338
 1265 00fa 049B     		ldr	r3, [sp, #16]
 1266 00fc A3EB0801 		sub	r1, r3, r8
 208:Core/Src/GFX_FUNCTIONS.c ****       py = y;
 1267              		.loc 1 208 43 view .LVU339
 1268 0100 4FEA4802 		lsl	r2, r8, #1
 1269 0104 92B2     		uxth	r2, r2
 208:Core/Src/GFX_FUNCTIONS.c ****       py = y;
 1270              		.loc 1 208 48 view .LVU340
 1271 0106 029B     		ldr	r3, [sp, #8]
 1272 0108 1A44     		add	r2, r2, r3
 208:Core/Src/GFX_FUNCTIONS.c ****       py = y;
 1273              		.loc 1 208 9 view .LVU341
 1274 010a 059B     		ldr	r3, [sp, #20]
 1275 010c 12B2     		sxth	r2, r2
 1276 010e 09B2     		sxth	r1, r1
 1277 0110 00B2     		sxth	r0, r0
 1278 0112 FFF7FEFF 		bl	drawFastVLine
 1279              	.LVL124:
 1280              		.loc 1 209 10 view .LVU342
 1281 0116 B246     		mov	r10, r6
 1282              	.LVL125:
 1283              		.loc 1 209 10 view .LVU343
 1284 0118 A8E7     		b	.L55
 1285              	.LVL126:
 1286              	.L66:
 210:Core/Src/GFX_FUNCTIONS.c ****     }
 211:Core/Src/GFX_FUNCTIONS.c ****     px = x;
 212:Core/Src/GFX_FUNCTIONS.c ****   }
 213:Core/Src/GFX_FUNCTIONS.c **** }
 1287              		.loc 1 213 1 view .LVU344
 1288 011a 07B0     		add	sp, sp, #28
 1289              	.LCFI26:
 1290              		.cfi_def_cfa_offset 36
 1291              		@ sp needed
 1292 011c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1293              		.loc 1 213 1 view .LVU345
 1294              		.cfi_endproc
 1295              	.LFE74:
 1297              		.section	.text.fillCircle,"ax",%progbits
 1298              		.align	1
 1299              		.global	fillCircle
 1300              		.syntax unified
 1301              		.thumb
 1302              		.thumb_func
 1304              	fillCircle:
 1305              	.LVL127:
 1306              	.LFB75:
 214:Core/Src/GFX_FUNCTIONS.c **** 
ARM GAS  /tmp/cctVOKLy.s 			page 29


 215:Core/Src/GFX_FUNCTIONS.c **** void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 1307              		.loc 1 215 68 is_stmt 1 view -0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 0
 1310              		@ frame_needed = 0, uses_anonymous_args = 0
 1311              		.loc 1 215 68 is_stmt 0 view .LVU347
 1312 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1313              	.LCFI27:
 1314              		.cfi_def_cfa_offset 20
 1315              		.cfi_offset 4, -20
 1316              		.cfi_offset 5, -16
 1317              		.cfi_offset 6, -12
 1318              		.cfi_offset 7, -8
 1319              		.cfi_offset 14, -4
 1320 0002 83B0     		sub	sp, sp, #12
 1321              	.LCFI28:
 1322              		.cfi_def_cfa_offset 32
 1323 0004 0646     		mov	r6, r0
 1324 0006 0C46     		mov	r4, r1
 1325 0008 1546     		mov	r5, r2
 1326 000a 1F46     		mov	r7, r3
 216:Core/Src/GFX_FUNCTIONS.c ****   drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 1327              		.loc 1 216 3 is_stmt 1 view .LVU348
 1328              		.loc 1 216 24 is_stmt 0 view .LVU349
 1329 000c 1FFA82FC 		uxth	ip, r2
 1330 0010 A1EB0C01 		sub	r1, r1, ip
 1331              	.LVL128:
 1332              		.loc 1 216 31 view .LVU350
 1333 0014 4FEA4C0C 		lsl	ip, ip, #1
 1334 0018 1FFA8CFC 		uxth	ip, ip
 1335              		.loc 1 216 35 view .LVU351
 1336 001c 0CF1010C 		add	ip, ip, #1
 1337              		.loc 1 216 3 view .LVU352
 1338 0020 0FFA8CF2 		sxth	r2, ip
 1339              	.LVL129:
 1340              		.loc 1 216 3 view .LVU353
 1341 0024 09B2     		sxth	r1, r1
 1342 0026 FFF7FEFF 		bl	drawFastVLine
 1343              	.LVL130:
 217:Core/Src/GFX_FUNCTIONS.c ****   fillCircleHelper(x0, y0, r, 3, 0, color);
 1344              		.loc 1 217 3 is_stmt 1 view .LVU354
 1345 002a 0197     		str	r7, [sp, #4]
 1346 002c 0023     		movs	r3, #0
 1347 002e 0093     		str	r3, [sp]
 1348 0030 0323     		movs	r3, #3
 1349 0032 2A46     		mov	r2, r5
 1350 0034 2146     		mov	r1, r4
 1351 0036 3046     		mov	r0, r6
 1352 0038 FFF7FEFF 		bl	fillCircleHelper
 1353              	.LVL131:
 218:Core/Src/GFX_FUNCTIONS.c **** }
 1354              		.loc 1 218 1 is_stmt 0 view .LVU355
 1355 003c 03B0     		add	sp, sp, #12
 1356              	.LCFI29:
 1357              		.cfi_def_cfa_offset 20
 1358              		@ sp needed
 1359 003e F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/cctVOKLy.s 			page 30


 1360              		.loc 1 218 1 view .LVU356
 1361              		.cfi_endproc
 1362              	.LFE75:
 1364              		.section	.text.drawRect,"ax",%progbits
 1365              		.align	1
 1366              		.global	drawRect
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1371              	drawRect:
 1372              	.LVL132:
 1373              	.LFB76:
 219:Core/Src/GFX_FUNCTIONS.c **** 
 220:Core/Src/GFX_FUNCTIONS.c **** void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 1374              		.loc 1 220 75 is_stmt 1 view -0
 1375              		.cfi_startproc
 1376              		@ args = 4, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              		.loc 1 220 75 is_stmt 0 view .LVU358
 1379 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1380              	.LCFI30:
 1381              		.cfi_def_cfa_offset 24
 1382              		.cfi_offset 4, -24
 1383              		.cfi_offset 5, -20
 1384              		.cfi_offset 6, -16
 1385              		.cfi_offset 7, -12
 1386              		.cfi_offset 8, -8
 1387              		.cfi_offset 14, -4
 1388 0004 0446     		mov	r4, r0
 1389 0006 0D46     		mov	r5, r1
 1390 0008 9046     		mov	r8, r2
 1391 000a 1E46     		mov	r6, r3
 1392 000c BDF81870 		ldrh	r7, [sp, #24]
 221:Core/Src/GFX_FUNCTIONS.c ****   drawFastHLine(x, y, w, color);
 1393              		.loc 1 221 3 is_stmt 1 view .LVU359
 1394 0010 3B46     		mov	r3, r7
 1395              	.LVL133:
 1396              		.loc 1 221 3 is_stmt 0 view .LVU360
 1397 0012 FFF7FEFF 		bl	drawFastHLine
 1398              	.LVL134:
 222:Core/Src/GFX_FUNCTIONS.c ****   drawFastHLine(x, y + h - 1, w, color);
 1399              		.loc 1 222 3 is_stmt 1 view .LVU361
 1400              		.loc 1 222 22 is_stmt 0 view .LVU362
 1401 0016 A919     		adds	r1, r5, r6
 1402 0018 89B2     		uxth	r1, r1
 1403              		.loc 1 222 26 view .LVU363
 1404 001a 0139     		subs	r1, r1, #1
 1405              		.loc 1 222 3 view .LVU364
 1406 001c 3B46     		mov	r3, r7
 1407 001e 4246     		mov	r2, r8
 1408 0020 09B2     		sxth	r1, r1
 1409 0022 2046     		mov	r0, r4
 1410 0024 FFF7FEFF 		bl	drawFastHLine
 1411              	.LVL135:
 223:Core/Src/GFX_FUNCTIONS.c ****   drawFastVLine(x, y, h, color);
 1412              		.loc 1 223 3 is_stmt 1 view .LVU365
 1413 0028 3B46     		mov	r3, r7
ARM GAS  /tmp/cctVOKLy.s 			page 31


 1414 002a 3246     		mov	r2, r6
 1415 002c 2946     		mov	r1, r5
 1416 002e 2046     		mov	r0, r4
 1417 0030 FFF7FEFF 		bl	drawFastVLine
 1418              	.LVL136:
 224:Core/Src/GFX_FUNCTIONS.c ****   drawFastVLine(x + w - 1, y, h, color);
 1419              		.loc 1 224 3 view .LVU366
 1420              		.loc 1 224 19 is_stmt 0 view .LVU367
 1421 0034 04EB0800 		add	r0, r4, r8
 1422 0038 80B2     		uxth	r0, r0
 1423              		.loc 1 224 23 view .LVU368
 1424 003a 0138     		subs	r0, r0, #1
 1425              		.loc 1 224 3 view .LVU369
 1426 003c 3B46     		mov	r3, r7
 1427 003e 3246     		mov	r2, r6
 1428 0040 2946     		mov	r1, r5
 1429 0042 00B2     		sxth	r0, r0
 1430 0044 FFF7FEFF 		bl	drawFastVLine
 1431              	.LVL137:
 225:Core/Src/GFX_FUNCTIONS.c **** }
 1432              		.loc 1 225 1 view .LVU370
 1433 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1434              		.loc 1 225 1 view .LVU371
 1435              		.cfi_endproc
 1436              	.LFE76:
 1438              		.section	.text.drawRoundRect,"ax",%progbits
 1439              		.align	1
 1440              		.global	drawRoundRect
 1441              		.syntax unified
 1442              		.thumb
 1443              		.thumb_func
 1445              	drawRoundRect:
 1446              	.LVL138:
 1447              	.LFB77:
 226:Core/Src/GFX_FUNCTIONS.c **** 
 227:Core/Src/GFX_FUNCTIONS.c **** void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
 228:Core/Src/GFX_FUNCTIONS.c ****                    uint16_t color) {
 1448              		.loc 1 228 36 is_stmt 1 view -0
 1449              		.cfi_startproc
 1450              		@ args = 8, pretend = 0, frame = 16
 1451              		@ frame_needed = 0, uses_anonymous_args = 0
 1452              		.loc 1 228 36 is_stmt 0 view .LVU373
 1453 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1454              	.LCFI31:
 1455              		.cfi_def_cfa_offset 36
 1456              		.cfi_offset 4, -36
 1457              		.cfi_offset 5, -32
 1458              		.cfi_offset 6, -28
 1459              		.cfi_offset 7, -24
 1460              		.cfi_offset 8, -20
 1461              		.cfi_offset 9, -16
 1462              		.cfi_offset 10, -12
 1463              		.cfi_offset 11, -8
 1464              		.cfi_offset 14, -4
 1465 0004 87B0     		sub	sp, sp, #28
 1466              	.LCFI32:
 1467              		.cfi_def_cfa_offset 64
ARM GAS  /tmp/cctVOKLy.s 			page 32


 1468 0006 0290     		str	r0, [sp, #8]
 1469 0008 0D46     		mov	r5, r1
 1470 000a 1E46     		mov	r6, r3
 1471 000c BDF94010 		ldrsh	r1, [sp, #64]
 1472              	.LVL139:
 1473              		.loc 1 228 36 view .LVU374
 1474 0010 BDF84470 		ldrh	r7, [sp, #68]
 229:Core/Src/GFX_FUNCTIONS.c ****   int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 1475              		.loc 1 229 3 is_stmt 1 view .LVU375
 1476              		.loc 1 229 37 is_stmt 0 view .LVU376
 1477 0014 9342     		cmp	r3, r2
 1478 0016 A8BF     		it	ge
 1479 0018 1346     		movge	r3, r2
 1480              	.LVL140:
 1481              		.loc 1 229 11 view .LVU377
 1482 001a 03EBD373 		add	r3, r3, r3, lsr #31
 1483 001e 4FEA6309 		asr	r9, r3, #1
 1484              	.LVL141:
 230:Core/Src/GFX_FUNCTIONS.c ****   if (r > max_radius)
 1485              		.loc 1 230 3 is_stmt 1 view .LVU378
 1486              		.loc 1 230 6 is_stmt 0 view .LVU379
 1487 0022 B1EB630F 		cmp	r1, r3, asr #1
 1488 0026 00DC     		bgt	.L73
 1489 0028 8946     		mov	r9, r1
 1490              	.LVL142:
 1491              	.L73:
 231:Core/Src/GFX_FUNCTIONS.c ****     r = max_radius;
 232:Core/Src/GFX_FUNCTIONS.c ****   // smarter version
 233:Core/Src/GFX_FUNCTIONS.c ****   drawFastHLine(x + r, y, w - 2 * r, color);         // Top
 1492              		.loc 1 233 3 is_stmt 1 view .LVU380
 1493              		.loc 1 233 19 is_stmt 0 view .LVU381
 1494 002a BDF80830 		ldrh	r3, [sp, #8]
 1495              	.LVL143:
 1496              		.loc 1 233 19 view .LVU382
 1497 002e 1FFA89FA 		uxth	r10, r9
 1498 0032 0393     		str	r3, [sp, #12]
 1499 0034 03EB0A08 		add	r8, r3, r10
 1500              		.loc 1 233 3 view .LVU383
 1501 0038 0FFA88F8 		sxth	r8, r8
 1502              		.loc 1 233 29 view .LVU384
 1503 003c 92B2     		uxth	r2, r2
 1504              		.loc 1 233 33 view .LVU385
 1505 003e 4FEA4A03 		lsl	r3, r10, #1
 1506 0042 99B2     		uxth	r1, r3
 1507              		.loc 1 233 29 view .LVU386
 1508 0044 0492     		str	r2, [sp, #16]
 1509 0046 0591     		str	r1, [sp, #20]
 1510 0048 A2EB010B 		sub	fp, r2, r1
 1511              		.loc 1 233 3 view .LVU387
 1512 004c 0FFA8BFB 		sxth	fp, fp
 1513 0050 3B46     		mov	r3, r7
 1514 0052 5A46     		mov	r2, fp
 1515              	.LVL144:
 1516              		.loc 1 233 3 view .LVU388
 1517 0054 2946     		mov	r1, r5
 1518 0056 4046     		mov	r0, r8
 1519              	.LVL145:
ARM GAS  /tmp/cctVOKLy.s 			page 33


 1520              		.loc 1 233 3 view .LVU389
 1521 0058 FFF7FEFF 		bl	drawFastHLine
 1522              	.LVL146:
 234:Core/Src/GFX_FUNCTIONS.c ****   drawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 1523              		.loc 1 234 3 is_stmt 1 view .LVU390
 1524              		.loc 1 234 26 is_stmt 0 view .LVU391
 1525 005c ADB2     		uxth	r5, r5
 1526              	.LVL147:
 1527              		.loc 1 234 26 view .LVU392
 1528 005e B6B2     		uxth	r6, r6
 1529              	.LVL148:
 1530              		.loc 1 234 26 view .LVU393
 1531 0060 AC19     		adds	r4, r5, r6
 1532 0062 A4B2     		uxth	r4, r4
 1533              		.loc 1 234 30 view .LVU394
 1534 0064 611E     		subs	r1, r4, #1
 1535              		.loc 1 234 3 view .LVU395
 1536 0066 3B46     		mov	r3, r7
 1537 0068 5A46     		mov	r2, fp
 1538 006a 09B2     		sxth	r1, r1
 1539 006c 4046     		mov	r0, r8
 1540 006e FFF7FEFF 		bl	drawFastHLine
 1541              	.LVL149:
 235:Core/Src/GFX_FUNCTIONS.c ****   drawFastVLine(x, y + r, h - 2 * r, color);         // Left
 1542              		.loc 1 235 3 is_stmt 1 view .LVU396
 1543              		.loc 1 235 22 is_stmt 0 view .LVU397
 1544 0072 5544     		add	r5, r5, r10
 1545              		.loc 1 235 3 view .LVU398
 1546 0074 2DB2     		sxth	r5, r5
 1547              		.loc 1 235 29 view .LVU399
 1548 0076 059B     		ldr	r3, [sp, #20]
 1549 0078 F61A     		subs	r6, r6, r3
 1550              		.loc 1 235 3 view .LVU400
 1551 007a 36B2     		sxth	r6, r6
 1552 007c 3B46     		mov	r3, r7
 1553 007e 3246     		mov	r2, r6
 1554 0080 2946     		mov	r1, r5
 1555 0082 0298     		ldr	r0, [sp, #8]
 1556 0084 FFF7FEFF 		bl	drawFastVLine
 1557              	.LVL150:
 236:Core/Src/GFX_FUNCTIONS.c ****   drawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 1558              		.loc 1 236 3 is_stmt 1 view .LVU401
 1559              		.loc 1 236 19 is_stmt 0 view .LVU402
 1560 0088 039B     		ldr	r3, [sp, #12]
 1561 008a 049A     		ldr	r2, [sp, #16]
 1562 008c 03EB020B 		add	fp, r3, r2
 1563 0090 1FFA8BFB 		uxth	fp, fp
 1564              		.loc 1 236 23 view .LVU403
 1565 0094 0BF1FF30 		add	r0, fp, #-1
 1566              		.loc 1 236 3 view .LVU404
 1567 0098 3B46     		mov	r3, r7
 1568 009a 3246     		mov	r2, r6
 1569 009c 2946     		mov	r1, r5
 1570 009e 00B2     		sxth	r0, r0
 1571 00a0 FFF7FEFF 		bl	drawFastVLine
 1572              	.LVL151:
 237:Core/Src/GFX_FUNCTIONS.c ****   // draw four corners
ARM GAS  /tmp/cctVOKLy.s 			page 34


 238:Core/Src/GFX_FUNCTIONS.c ****   drawCircleHelper(x + r, y + r, r, 1, color);
 1573              		.loc 1 238 3 is_stmt 1 view .LVU405
 1574 00a4 0097     		str	r7, [sp]
 1575 00a6 0123     		movs	r3, #1
 1576 00a8 4A46     		mov	r2, r9
 1577 00aa 2946     		mov	r1, r5
 1578 00ac 4046     		mov	r0, r8
 1579 00ae FFF7FEFF 		bl	drawCircleHelper
 1580              	.LVL152:
 239:Core/Src/GFX_FUNCTIONS.c ****   drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 1581              		.loc 1 239 3 view .LVU406
 1582              		.loc 1 239 26 is_stmt 0 view .LVU407
 1583 00b2 ABEB0A06 		sub	r6, fp, r10
 1584 00b6 B6B2     		uxth	r6, r6
 1585              		.loc 1 239 30 view .LVU408
 1586 00b8 013E     		subs	r6, r6, #1
 1587              		.loc 1 239 3 view .LVU409
 1588 00ba 36B2     		sxth	r6, r6
 1589 00bc 0097     		str	r7, [sp]
 1590 00be 0223     		movs	r3, #2
 1591 00c0 4A46     		mov	r2, r9
 1592 00c2 2946     		mov	r1, r5
 1593 00c4 3046     		mov	r0, r6
 1594 00c6 FFF7FEFF 		bl	drawCircleHelper
 1595              	.LVL153:
 240:Core/Src/GFX_FUNCTIONS.c ****   drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 1596              		.loc 1 240 3 is_stmt 1 view .LVU410
 1597              		.loc 1 240 41 is_stmt 0 view .LVU411
 1598 00ca A4EB0A04 		sub	r4, r4, r10
 1599 00ce A4B2     		uxth	r4, r4
 1600              		.loc 1 240 45 view .LVU412
 1601 00d0 013C     		subs	r4, r4, #1
 1602              		.loc 1 240 3 view .LVU413
 1603 00d2 24B2     		sxth	r4, r4
 1604 00d4 0097     		str	r7, [sp]
 1605 00d6 0423     		movs	r3, #4
 1606 00d8 4A46     		mov	r2, r9
 1607 00da 2146     		mov	r1, r4
 1608 00dc 3046     		mov	r0, r6
 1609 00de FFF7FEFF 		bl	drawCircleHelper
 1610              	.LVL154:
 241:Core/Src/GFX_FUNCTIONS.c ****   drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 1611              		.loc 1 241 3 is_stmt 1 view .LVU414
 1612 00e2 0097     		str	r7, [sp]
 1613 00e4 0823     		movs	r3, #8
 1614 00e6 4A46     		mov	r2, r9
 1615 00e8 2146     		mov	r1, r4
 1616 00ea 4046     		mov	r0, r8
 1617 00ec FFF7FEFF 		bl	drawCircleHelper
 1618              	.LVL155:
 242:Core/Src/GFX_FUNCTIONS.c **** }
 1619              		.loc 1 242 1 is_stmt 0 view .LVU415
 1620 00f0 07B0     		add	sp, sp, #28
 1621              	.LCFI33:
 1622              		.cfi_def_cfa_offset 36
 1623              		@ sp needed
 1624 00f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/cctVOKLy.s 			page 35


 1625              		.loc 1 242 1 view .LVU416
 1626              		.cfi_endproc
 1627              	.LFE77:
 1629              		.section	.text.fillRoundRect,"ax",%progbits
 1630              		.align	1
 1631              		.global	fillRoundRect
 1632              		.syntax unified
 1633              		.thumb
 1634              		.thumb_func
 1636              	fillRoundRect:
 1637              	.LVL156:
 1638              	.LFB78:
 243:Core/Src/GFX_FUNCTIONS.c **** 
 244:Core/Src/GFX_FUNCTIONS.c **** void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
 245:Core/Src/GFX_FUNCTIONS.c ****                    uint16_t color) {
 1639              		.loc 1 245 36 is_stmt 1 view -0
 1640              		.cfi_startproc
 1641              		@ args = 8, pretend = 0, frame = 8
 1642              		@ frame_needed = 0, uses_anonymous_args = 0
 1643              		.loc 1 245 36 is_stmt 0 view .LVU418
 1644 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1645              	.LCFI34:
 1646              		.cfi_def_cfa_offset 36
 1647              		.cfi_offset 4, -36
 1648              		.cfi_offset 5, -32
 1649              		.cfi_offset 6, -28
 1650              		.cfi_offset 7, -24
 1651              		.cfi_offset 8, -20
 1652              		.cfi_offset 9, -16
 1653              		.cfi_offset 10, -12
 1654              		.cfi_offset 11, -8
 1655              		.cfi_offset 14, -4
 1656 0004 85B0     		sub	sp, sp, #20
 1657              	.LCFI35:
 1658              		.cfi_def_cfa_offset 56
 1659 0006 0391     		str	r1, [sp, #12]
 1660 0008 1D46     		mov	r5, r3
 1661 000a BDF93810 		ldrsh	r1, [sp, #56]
 1662              	.LVL157:
 1663              		.loc 1 245 36 view .LVU419
 1664 000e BDF83CB0 		ldrh	fp, [sp, #60]
 246:Core/Src/GFX_FUNCTIONS.c ****   int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 1665              		.loc 1 246 3 is_stmt 1 view .LVU420
 1666              		.loc 1 246 37 is_stmt 0 view .LVU421
 1667 0012 9342     		cmp	r3, r2
 1668 0014 A8BF     		it	ge
 1669 0016 1346     		movge	r3, r2
 1670              	.LVL158:
 1671              		.loc 1 246 11 view .LVU422
 1672 0018 03EBD373 		add	r3, r3, r3, lsr #31
 1673 001c 4FEA630A 		asr	r10, r3, #1
 1674              	.LVL159:
 247:Core/Src/GFX_FUNCTIONS.c ****   if (r > max_radius)
 1675              		.loc 1 247 3 is_stmt 1 view .LVU423
 1676              		.loc 1 247 6 is_stmt 0 view .LVU424
 1677 0020 B1EB630F 		cmp	r1, r3, asr #1
 1678 0024 00DC     		bgt	.L76
ARM GAS  /tmp/cctVOKLy.s 			page 36


 1679 0026 8A46     		mov	r10, r1
 1680              	.LVL160:
 1681              	.L76:
 248:Core/Src/GFX_FUNCTIONS.c ****     r = max_radius;
 249:Core/Src/GFX_FUNCTIONS.c ****   // smarter version
 250:Core/Src/GFX_FUNCTIONS.c ****   fillRect(x + r, y, w - 2 * r, h, color);
 1682              		.loc 1 250 3 is_stmt 1 view .LVU425
 1683              		.loc 1 250 14 is_stmt 0 view .LVU426
 1684 0028 84B2     		uxth	r4, r0
 1685 002a 1FFA8AF6 		uxth	r6, r10
 1686 002e 04EB0608 		add	r8, r4, r6
 1687              		.loc 1 250 3 view .LVU427
 1688 0032 0FFA88F8 		sxth	r8, r8
 1689              		.loc 1 250 24 view .LVU428
 1690 0036 97B2     		uxth	r7, r2
 1691              		.loc 1 250 28 view .LVU429
 1692 0038 4FEA4609 		lsl	r9, r6, #1
 1693 003c 1FFA89F9 		uxth	r9, r9
 1694              		.loc 1 250 24 view .LVU430
 1695 0040 A7EB0902 		sub	r2, r7, r9
 1696              	.LVL161:
 1697              		.loc 1 250 3 view .LVU431
 1698 0044 CDF800B0 		str	fp, [sp]
 1699 0048 2B46     		mov	r3, r5
 1700              	.LVL162:
 1701              		.loc 1 250 3 view .LVU432
 1702 004a 12B2     		sxth	r2, r2
 1703 004c 0399     		ldr	r1, [sp, #12]
 1704 004e 4046     		mov	r0, r8
 1705              	.LVL163:
 1706              		.loc 1 250 3 view .LVU433
 1707 0050 FFF7FEFF 		bl	fillRect
 1708              	.LVL164:
 251:Core/Src/GFX_FUNCTIONS.c ****   // draw four corners
 252:Core/Src/GFX_FUNCTIONS.c ****   fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 1709              		.loc 1 252 3 is_stmt 1 view .LVU434
 1710              		.loc 1 252 22 is_stmt 0 view .LVU435
 1711 0054 E019     		adds	r0, r4, r7
 1712 0056 80B2     		uxth	r0, r0
 1713              		.loc 1 252 26 view .LVU436
 1714 0058 801B     		subs	r0, r0, r6
 1715 005a 80B2     		uxth	r0, r0
 1716              		.loc 1 252 30 view .LVU437
 1717 005c 0138     		subs	r0, r0, #1
 1718              		.loc 1 252 37 view .LVU438
 1719 005e 039B     		ldr	r3, [sp, #12]
 1720 0060 1E44     		add	r6, r6, r3
 1721              		.loc 1 252 3 view .LVU439
 1722 0062 36B2     		sxth	r6, r6
 1723              		.loc 1 252 50 view .LVU440
 1724 0064 A5EB0905 		sub	r5, r5, r9
 1725              	.LVL165:
 1726              		.loc 1 252 50 view .LVU441
 1727 0068 ADB2     		uxth	r5, r5
 1728              		.loc 1 252 58 view .LVU442
 1729 006a 013D     		subs	r5, r5, #1
 1730              		.loc 1 252 3 view .LVU443
ARM GAS  /tmp/cctVOKLy.s 			page 37


 1731 006c 2DB2     		sxth	r5, r5
 1732 006e CDF804B0 		str	fp, [sp, #4]
 1733 0072 0095     		str	r5, [sp]
 1734 0074 0123     		movs	r3, #1
 1735 0076 5246     		mov	r2, r10
 1736 0078 3146     		mov	r1, r6
 1737 007a 00B2     		sxth	r0, r0
 1738 007c FFF7FEFF 		bl	fillCircleHelper
 1739              	.LVL166:
 253:Core/Src/GFX_FUNCTIONS.c ****   fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 1740              		.loc 1 253 3 is_stmt 1 view .LVU444
 1741 0080 CDF804B0 		str	fp, [sp, #4]
 1742 0084 0095     		str	r5, [sp]
 1743 0086 0223     		movs	r3, #2
 1744 0088 5246     		mov	r2, r10
 1745 008a 3146     		mov	r1, r6
 1746 008c 4046     		mov	r0, r8
 1747 008e FFF7FEFF 		bl	fillCircleHelper
 1748              	.LVL167:
 254:Core/Src/GFX_FUNCTIONS.c **** }
 1749              		.loc 1 254 1 is_stmt 0 view .LVU445
 1750 0092 05B0     		add	sp, sp, #20
 1751              	.LCFI36:
 1752              		.cfi_def_cfa_offset 36
 1753              		@ sp needed
 1754 0094 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1755              		.loc 1 254 1 view .LVU446
 1756              		.cfi_endproc
 1757              	.LFE78:
 1759              		.section	.text.drawTriangle,"ax",%progbits
 1760              		.align	1
 1761              		.global	drawTriangle
 1762              		.syntax unified
 1763              		.thumb
 1764              		.thumb_func
 1766              	drawTriangle:
 1767              	.LVL168:
 1768              	.LFB79:
 255:Core/Src/GFX_FUNCTIONS.c **** 
 256:Core/Src/GFX_FUNCTIONS.c **** void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2,
 257:Core/Src/GFX_FUNCTIONS.c ****                   int16_t y2, uint16_t color) {
 1769              		.loc 1 257 47 is_stmt 1 view -0
 1770              		.cfi_startproc
 1771              		@ args = 12, pretend = 0, frame = 0
 1772              		@ frame_needed = 0, uses_anonymous_args = 0
 1773              		.loc 1 257 47 is_stmt 0 view .LVU448
 1774 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1775              	.LCFI37:
 1776              		.cfi_def_cfa_offset 32
 1777              		.cfi_offset 4, -32
 1778              		.cfi_offset 5, -28
 1779              		.cfi_offset 6, -24
 1780              		.cfi_offset 7, -20
 1781              		.cfi_offset 8, -16
 1782              		.cfi_offset 9, -12
 1783              		.cfi_offset 10, -8
 1784              		.cfi_offset 14, -4
ARM GAS  /tmp/cctVOKLy.s 			page 38


 1785 0004 82B0     		sub	sp, sp, #8
 1786              	.LCFI38:
 1787              		.cfi_def_cfa_offset 40
 1788 0006 0446     		mov	r4, r0
 1789 0008 0D46     		mov	r5, r1
 1790 000a 1746     		mov	r7, r2
 1791 000c 9846     		mov	r8, r3
 1792 000e BDF92890 		ldrsh	r9, [sp, #40]
 1793 0012 BDF92CA0 		ldrsh	r10, [sp, #44]
 1794 0016 BDF83060 		ldrh	r6, [sp, #48]
 258:Core/Src/GFX_FUNCTIONS.c ****   drawLine(x0, y0, x1, y1, color);
 1795              		.loc 1 258 3 is_stmt 1 view .LVU449
 1796 001a 0096     		str	r6, [sp]
 1797 001c FFF7FEFF 		bl	drawLine
 1798              	.LVL169:
 259:Core/Src/GFX_FUNCTIONS.c ****   drawLine(x1, y1, x2, y2, color);
 1799              		.loc 1 259 3 view .LVU450
 1800 0020 0096     		str	r6, [sp]
 1801 0022 5346     		mov	r3, r10
 1802 0024 4A46     		mov	r2, r9
 1803 0026 4146     		mov	r1, r8
 1804 0028 3846     		mov	r0, r7
 1805 002a FFF7FEFF 		bl	drawLine
 1806              	.LVL170:
 260:Core/Src/GFX_FUNCTIONS.c ****   drawLine(x2, y2, x0, y0, color);
 1807              		.loc 1 260 3 view .LVU451
 1808 002e 0096     		str	r6, [sp]
 1809 0030 2B46     		mov	r3, r5
 1810 0032 2246     		mov	r2, r4
 1811 0034 5146     		mov	r1, r10
 1812 0036 4846     		mov	r0, r9
 1813 0038 FFF7FEFF 		bl	drawLine
 1814              	.LVL171:
 261:Core/Src/GFX_FUNCTIONS.c **** }
 1815              		.loc 1 261 1 is_stmt 0 view .LVU452
 1816 003c 02B0     		add	sp, sp, #8
 1817              	.LCFI39:
 1818              		.cfi_def_cfa_offset 32
 1819              		@ sp needed
 1820 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1821              		.loc 1 261 1 view .LVU453
 1822              		.cfi_endproc
 1823              	.LFE79:
 1825              		.section	.text.fillTriangle,"ax",%progbits
 1826              		.align	1
 1827              		.global	fillTriangle
 1828              		.syntax unified
 1829              		.thumb
 1830              		.thumb_func
 1832              	fillTriangle:
 1833              	.LVL172:
 1834              	.LFB80:
 262:Core/Src/GFX_FUNCTIONS.c **** 
 263:Core/Src/GFX_FUNCTIONS.c **** void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2,
 264:Core/Src/GFX_FUNCTIONS.c ****                   int16_t y2, uint16_t color) {
 1835              		.loc 1 264 47 is_stmt 1 view -0
 1836              		.cfi_startproc
ARM GAS  /tmp/cctVOKLy.s 			page 39


 1837              		@ args = 12, pretend = 0, frame = 32
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839              		.loc 1 264 47 is_stmt 0 view .LVU455
 1840 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1841              	.LCFI40:
 1842              		.cfi_def_cfa_offset 36
 1843              		.cfi_offset 4, -36
 1844              		.cfi_offset 5, -32
 1845              		.cfi_offset 6, -28
 1846              		.cfi_offset 7, -24
 1847              		.cfi_offset 8, -20
 1848              		.cfi_offset 9, -16
 1849              		.cfi_offset 10, -12
 1850              		.cfi_offset 11, -8
 1851              		.cfi_offset 14, -4
 1852 0004 89B0     		sub	sp, sp, #36
 1853              	.LCFI41:
 1854              		.cfi_def_cfa_offset 72
 1855 0006 8A46     		mov	r10, r1
 1856 0008 BDF94850 		ldrsh	r5, [sp, #72]
 1857 000c BDF94C10 		ldrsh	r1, [sp, #76]
 1858              	.LVL173:
 1859              		.loc 1 264 47 view .LVU456
 1860 0010 BDF850B0 		ldrh	fp, [sp, #80]
 265:Core/Src/GFX_FUNCTIONS.c **** 
 266:Core/Src/GFX_FUNCTIONS.c ****   int16_t a, b, y, last;
 1861              		.loc 1 266 3 is_stmt 1 view .LVU457
 267:Core/Src/GFX_FUNCTIONS.c **** 
 268:Core/Src/GFX_FUNCTIONS.c ****   // Sort coordinates by Y order (y2 >= y1 >= y0)
 269:Core/Src/GFX_FUNCTIONS.c ****   if (y0 > y1) {
 1862              		.loc 1 269 3 view .LVU458
 1863              		.loc 1 269 6 is_stmt 0 view .LVU459
 1864 0014 9A45     		cmp	r10, r3
 1865 0016 05DC     		bgt	.L81
 1866 0018 1C46     		mov	r4, r3
 1867 001a 5346     		mov	r3, r10
 1868              	.LVL174:
 1869              		.loc 1 269 6 view .LVU460
 1870 001c A246     		mov	r10, r4
 1871              	.LVL175:
 1872              		.loc 1 269 6 view .LVU461
 1873 001e 1446     		mov	r4, r2
 1874              	.LVL176:
 1875              		.loc 1 269 6 view .LVU462
 1876 0020 0246     		mov	r2, r0
 1877              	.LVL177:
 1878              		.loc 1 269 6 view .LVU463
 1879 0022 2046     		mov	r0, r4
 1880              	.LVL178:
 1881              	.L81:
 270:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(y0, y1);
 271:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(x0, x1);
 1882              		.loc 1 271 26 is_stmt 1 discriminator 1 view .LVU464
 272:Core/Src/GFX_FUNCTIONS.c ****   }
 273:Core/Src/GFX_FUNCTIONS.c ****   if (y1 > y2) {
 1883              		.loc 1 273 3 view .LVU465
 1884              		.loc 1 273 6 is_stmt 0 view .LVU466
ARM GAS  /tmp/cctVOKLy.s 			page 40


 1885 0024 8A45     		cmp	r10, r1
 1886 0026 05DC     		bgt	.L82
 1887 0028 0C46     		mov	r4, r1
 1888 002a 5146     		mov	r1, r10
 1889 002c A246     		mov	r10, r4
 1890              	.LVL179:
 1891              		.loc 1 273 6 view .LVU467
 1892 002e 2C46     		mov	r4, r5
 1893 0030 0546     		mov	r5, r0
 1894 0032 2046     		mov	r0, r4
 1895              	.LVL180:
 1896              	.L82:
 274:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(y2, y1);
 275:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(x2, x1);
 1897              		.loc 1 275 26 is_stmt 1 discriminator 1 view .LVU468
 276:Core/Src/GFX_FUNCTIONS.c ****   }
 277:Core/Src/GFX_FUNCTIONS.c ****   if (y0 > y1) {
 1898              		.loc 1 277 3 view .LVU469
 1899              		.loc 1 277 6 is_stmt 0 view .LVU470
 1900 0034 8B42     		cmp	r3, r1
 1901 0036 05DC     		bgt	.L83
 1902 0038 0C46     		mov	r4, r1
 1903 003a 1946     		mov	r1, r3
 1904              	.LVL181:
 1905              		.loc 1 277 6 view .LVU471
 1906 003c 2346     		mov	r3, r4
 1907              	.LVL182:
 1908              		.loc 1 277 6 view .LVU472
 1909 003e 2C46     		mov	r4, r5
 1910              	.LVL183:
 1911              		.loc 1 277 6 view .LVU473
 1912 0040 1546     		mov	r5, r2
 1913              	.LVL184:
 1914              		.loc 1 277 6 view .LVU474
 1915 0042 2246     		mov	r2, r4
 1916              	.LVL185:
 1917              	.L83:
 278:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(y0, y1);
 279:Core/Src/GFX_FUNCTIONS.c ****     _swap_int16_t(x0, x1);
 1918              		.loc 1 279 26 is_stmt 1 discriminator 1 view .LVU475
 280:Core/Src/GFX_FUNCTIONS.c ****   }
 281:Core/Src/GFX_FUNCTIONS.c **** 
 282:Core/Src/GFX_FUNCTIONS.c ****   if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 1919              		.loc 1 282 3 view .LVU476
 1920              		.loc 1 282 6 is_stmt 0 view .LVU477
 1921 0044 5145     		cmp	r1, r10
 1922 0046 2AD0     		beq	.L99
 283:Core/Src/GFX_FUNCTIONS.c ****     a = b = x0;
 284:Core/Src/GFX_FUNCTIONS.c ****     if (x1 < a)
 285:Core/Src/GFX_FUNCTIONS.c ****       a = x1;
 286:Core/Src/GFX_FUNCTIONS.c ****     else if (x1 > b)
 287:Core/Src/GFX_FUNCTIONS.c ****       b = x1;
 288:Core/Src/GFX_FUNCTIONS.c ****     if (x2 < a)
 289:Core/Src/GFX_FUNCTIONS.c ****       a = x2;
 290:Core/Src/GFX_FUNCTIONS.c ****     else if (x2 > b)
 291:Core/Src/GFX_FUNCTIONS.c ****       b = x2;
 292:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(a, y0, b - a + 1, color);
ARM GAS  /tmp/cctVOKLy.s 			page 41


 293:Core/Src/GFX_FUNCTIONS.c ****     return;
 294:Core/Src/GFX_FUNCTIONS.c ****   }
 295:Core/Src/GFX_FUNCTIONS.c **** 
 296:Core/Src/GFX_FUNCTIONS.c ****   int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 1923              		.loc 1 296 3 is_stmt 1 view .LVU478
 1924              		.loc 1 296 21 is_stmt 0 view .LVU479
 1925 0048 96B2     		uxth	r6, r2
 1926 004a 0196     		str	r6, [sp, #4]
 1927 004c ADB2     		uxth	r5, r5
 1928              		.loc 1 296 21 view .LVU480
 1929 004e 721B     		subs	r2, r6, r5
 1930              	.LVL186:
 1931              		.loc 1 296 11 view .LVU481
 1932 0050 12B2     		sxth	r2, r2
 1933 0052 0292     		str	r2, [sp, #8]
 1934              	.LVL187:
 1935              		.loc 1 296 37 view .LVU482
 1936 0054 9CB2     		uxth	r4, r3
 1937 0056 1FFA81F8 		uxth	r8, r1
 1938 005a A4EB0802 		sub	r2, r4, r8
 1939              		.loc 1 296 27 view .LVU483
 1940 005e 12B2     		sxth	r2, r2
 1941 0060 0392     		str	r2, [sp, #12]
 1942              	.LVL188:
 1943              		.loc 1 296 53 view .LVU484
 1944 0062 80B2     		uxth	r0, r0
 1945              		.loc 1 296 53 view .LVU485
 1946 0064 A0EB0509 		sub	r9, r0, r5
 1947              		.loc 1 296 43 view .LVU486
 1948 0068 0FFA89F9 		sxth	r9, r9
 1949              	.LVL189:
 1950              		.loc 1 296 69 view .LVU487
 1951 006c 1FFA8AF2 		uxth	r2, r10
 1952 0070 A2EB0808 		sub	r8, r2, r8
 1953              		.loc 1 296 59 view .LVU488
 1954 0074 0FFA88F8 		sxth	r8, r8
 1955              	.LVL190:
 297:Core/Src/GFX_FUNCTIONS.c ****           dx12 = x2 - x1, dy12 = y2 - y1;
 1956              		.loc 1 297 21 view .LVU489
 1957 0078 801B     		subs	r0, r0, r6
 1958              	.LVL191:
 1959              		.loc 1 297 11 view .LVU490
 1960 007a 00B2     		sxth	r0, r0
 1961 007c 0090     		str	r0, [sp]
 1962              	.LVL192:
 1963              		.loc 1 297 37 view .LVU491
 1964 007e 121B     		subs	r2, r2, r4
 1965              		.loc 1 297 27 view .LVU492
 1966 0080 12B2     		sxth	r2, r2
 1967 0082 0492     		str	r2, [sp, #16]
 1968              	.LVL193:
 298:Core/Src/GFX_FUNCTIONS.c ****   int32_t sa = 0, sb = 0;
 1969              		.loc 1 298 3 is_stmt 1 view .LVU493
 299:Core/Src/GFX_FUNCTIONS.c **** 
 300:Core/Src/GFX_FUNCTIONS.c ****   // For upper part of triangle, find scanline crossings for segments
 301:Core/Src/GFX_FUNCTIONS.c ****   // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
 302:Core/Src/GFX_FUNCTIONS.c ****   // is included here (and second loop will be skipped, avoiding a /0
ARM GAS  /tmp/cctVOKLy.s 			page 42


 303:Core/Src/GFX_FUNCTIONS.c ****   // error there), otherwise scanline y1 is skipped here and handled
 304:Core/Src/GFX_FUNCTIONS.c ****   // in the second loop...which also avoids a /0 error here if y0=y1
 305:Core/Src/GFX_FUNCTIONS.c ****   // (flat-topped triangle).
 306:Core/Src/GFX_FUNCTIONS.c ****   if (y1 == y2)
 1970              		.loc 1 306 3 view .LVU494
 1971              		.loc 1 306 6 is_stmt 0 view .LVU495
 1972 0084 5345     		cmp	r3, r10
 1973 0086 24D0     		beq	.L97
 307:Core/Src/GFX_FUNCTIONS.c ****     last = y1; // Include y1 scanline
 308:Core/Src/GFX_FUNCTIONS.c ****   else
 309:Core/Src/GFX_FUNCTIONS.c ****     last = y1 - 1; // Skip it
 1974              		.loc 1 309 5 is_stmt 1 view .LVU496
 1975              		.loc 1 309 15 is_stmt 0 view .LVU497
 1976 0088 013C     		subs	r4, r4, #1
 1977              		.loc 1 309 10 view .LVU498
 1978 008a 22B2     		sxth	r2, r4
 1979              	.LVL194:
 1980              	.L88:
 310:Core/Src/GFX_FUNCTIONS.c **** 
 311:Core/Src/GFX_FUNCTIONS.c ****   for (y = y0; y <= last; y++) {
 1981              		.loc 1 311 3 is_stmt 1 view .LVU499
 1982              		.loc 1 311 10 is_stmt 0 view .LVU500
 1983 008c 0C46     		mov	r4, r1
 298:Core/Src/GFX_FUNCTIONS.c **** 
 1984              		.loc 1 298 19 view .LVU501
 1985 008e 0026     		movs	r6, #0
 1986              	.LVL195:
 298:Core/Src/GFX_FUNCTIONS.c **** 
 1987              		.loc 1 298 11 view .LVU502
 1988 0090 3746     		mov	r7, r6
 1989 0092 CDF814A0 		str	r10, [sp, #20]
 1990 0096 9246     		mov	r10, r2
 1991              	.LVL196:
 298:Core/Src/GFX_FUNCTIONS.c **** 
 1992              		.loc 1 298 11 view .LVU503
 1993 0098 0693     		str	r3, [sp, #24]
 1994 009a 0791     		str	r1, [sp, #28]
 1995              		.loc 1 311 3 view .LVU504
 1996 009c 25E0     		b	.L89
 1997              	.LVL197:
 1998              	.L99:
 283:Core/Src/GFX_FUNCTIONS.c ****     if (x1 < a)
 1999              		.loc 1 283 5 is_stmt 1 view .LVU505
 284:Core/Src/GFX_FUNCTIONS.c ****       a = x1;
 2000              		.loc 1 284 5 view .LVU506
 284:Core/Src/GFX_FUNCTIONS.c ****       a = x1;
 2001              		.loc 1 284 8 is_stmt 0 view .LVU507
 2002 009e 9542     		cmp	r5, r2
 2003 00a0 01DC     		bgt	.L85
 286:Core/Src/GFX_FUNCTIONS.c ****       b = x1;
 2004              		.loc 1 286 10 is_stmt 1 view .LVU508
 286:Core/Src/GFX_FUNCTIONS.c ****       b = x1;
 2005              		.loc 1 286 13 is_stmt 0 view .LVU509
 2006 00a2 0FDB     		blt	.L95
 283:Core/Src/GFX_FUNCTIONS.c ****     if (x1 < a)
 2007              		.loc 1 283 7 view .LVU510
 2008 00a4 2A46     		mov	r2, r5
ARM GAS  /tmp/cctVOKLy.s 			page 43


 2009              	.LVL198:
 2010              	.L85:
 288:Core/Src/GFX_FUNCTIONS.c ****       a = x2;
 2011              		.loc 1 288 5 is_stmt 1 view .LVU511
 288:Core/Src/GFX_FUNCTIONS.c ****       a = x2;
 2012              		.loc 1 288 8 is_stmt 0 view .LVU512
 2013 00a6 9042     		cmp	r0, r2
 2014 00a8 02DB     		blt	.L86
 290:Core/Src/GFX_FUNCTIONS.c ****       b = x2;
 2015              		.loc 1 290 10 is_stmt 1 view .LVU513
 290:Core/Src/GFX_FUNCTIONS.c ****       b = x2;
 2016              		.loc 1 290 13 is_stmt 0 view .LVU514
 2017 00aa A842     		cmp	r0, r5
 2018 00ac 0EDC     		bgt	.L96
 2019 00ae 1046     		mov	r0, r2
 2020              	.LVL199:
 2021              	.L86:
 292:Core/Src/GFX_FUNCTIONS.c ****     return;
 2022              		.loc 1 292 5 is_stmt 1 view .LVU515
 292:Core/Src/GFX_FUNCTIONS.c ****     return;
 2023              		.loc 1 292 28 is_stmt 0 view .LVU516
 2024 00b0 2A1A     		subs	r2, r5, r0
 2025 00b2 92B2     		uxth	r2, r2
 292:Core/Src/GFX_FUNCTIONS.c ****     return;
 2026              		.loc 1 292 32 view .LVU517
 2027 00b4 0132     		adds	r2, r2, #1
 292:Core/Src/GFX_FUNCTIONS.c ****     return;
 2028              		.loc 1 292 5 view .LVU518
 2029 00b6 5B46     		mov	r3, fp
 2030 00b8 12B2     		sxth	r2, r2
 2031 00ba FFF7FEFF 		bl	drawFastHLine
 2032              	.LVL200:
 293:Core/Src/GFX_FUNCTIONS.c ****   }
 2033              		.loc 1 293 5 is_stmt 1 view .LVU519
 2034              	.L80:
 312:Core/Src/GFX_FUNCTIONS.c ****     a = x0 + sa / dy01;
 313:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 314:Core/Src/GFX_FUNCTIONS.c ****     sa += dx01;
 315:Core/Src/GFX_FUNCTIONS.c ****     sb += dx02;
 316:Core/Src/GFX_FUNCTIONS.c ****     /* longhand:
 317:Core/Src/GFX_FUNCTIONS.c ****     a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
 318:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
 319:Core/Src/GFX_FUNCTIONS.c ****     */
 320:Core/Src/GFX_FUNCTIONS.c ****     if (a > b)
 321:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(a, b);
 322:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(a, y, b - a + 1, color);
 323:Core/Src/GFX_FUNCTIONS.c ****   }
 324:Core/Src/GFX_FUNCTIONS.c **** 
 325:Core/Src/GFX_FUNCTIONS.c ****   // For lower part of triangle, find scanline crossings for segments
 326:Core/Src/GFX_FUNCTIONS.c ****   // 0-2 and 1-2.  This loop is skipped if y1=y2.
 327:Core/Src/GFX_FUNCTIONS.c ****   sa = (int32_t)dx12 * (y - y1);
 328:Core/Src/GFX_FUNCTIONS.c ****   sb = (int32_t)dx02 * (y - y0);
 329:Core/Src/GFX_FUNCTIONS.c ****   for (; y <= y2; y++) {
 330:Core/Src/GFX_FUNCTIONS.c ****     a = x1 + sa / dy12;
 331:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 332:Core/Src/GFX_FUNCTIONS.c ****     sa += dx12;
 333:Core/Src/GFX_FUNCTIONS.c ****     sb += dx02;
ARM GAS  /tmp/cctVOKLy.s 			page 44


 334:Core/Src/GFX_FUNCTIONS.c ****     /* longhand:
 335:Core/Src/GFX_FUNCTIONS.c ****     a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
 336:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
 337:Core/Src/GFX_FUNCTIONS.c ****     */
 338:Core/Src/GFX_FUNCTIONS.c ****     if (a > b)
 339:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(a, b);
 340:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(a, y, b - a + 1, color);
 341:Core/Src/GFX_FUNCTIONS.c ****   }
 342:Core/Src/GFX_FUNCTIONS.c **** }
 2035              		.loc 1 342 1 is_stmt 0 view .LVU520
 2036 00be 09B0     		add	sp, sp, #36
 2037              	.LCFI42:
 2038              		.cfi_remember_state
 2039              		.cfi_def_cfa_offset 36
 2040              		@ sp needed
 2041 00c0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2042              	.LVL201:
 2043              	.L95:
 2044              	.LCFI43:
 2045              		.cfi_restore_state
 2046              		.loc 1 342 1 view .LVU521
 2047 00c4 1346     		mov	r3, r2
 2048              	.LVL202:
 283:Core/Src/GFX_FUNCTIONS.c ****     if (x1 < a)
 2049              		.loc 1 283 7 view .LVU522
 2050 00c6 2A46     		mov	r2, r5
 2051              	.LVL203:
 287:Core/Src/GFX_FUNCTIONS.c ****     if (x2 < a)
 2052              		.loc 1 287 9 view .LVU523
 2053 00c8 1D46     		mov	r5, r3
 2054              	.LVL204:
 287:Core/Src/GFX_FUNCTIONS.c ****     if (x2 < a)
 2055              		.loc 1 287 9 view .LVU524
 2056 00ca ECE7     		b	.L85
 2057              	.LVL205:
 2058              	.L96:
 291:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(a, y0, b - a + 1, color);
 2059              		.loc 1 291 9 view .LVU525
 2060 00cc 0546     		mov	r5, r0
 2061              	.LVL206:
 291:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(a, y0, b - a + 1, color);
 2062              		.loc 1 291 9 view .LVU526
 2063 00ce 1046     		mov	r0, r2
 2064              	.LVL207:
 291:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(a, y0, b - a + 1, color);
 2065              		.loc 1 291 9 view .LVU527
 2066 00d0 EEE7     		b	.L86
 2067              	.LVL208:
 2068              	.L97:
 307:Core/Src/GFX_FUNCTIONS.c ****   else
 2069              		.loc 1 307 10 view .LVU528
 2070 00d2 1A46     		mov	r2, r3
 2071 00d4 DAE7     		b	.L88
 2072              	.LVL209:
 2073              	.L90:
 321:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(a, y, b - a + 1, color);
 2074              		.loc 1 321 26 is_stmt 1 discriminator 1 view .LVU529
ARM GAS  /tmp/cctVOKLy.s 			page 45


 322:Core/Src/GFX_FUNCTIONS.c ****   }
 2075              		.loc 1 322 5 view .LVU530
 322:Core/Src/GFX_FUNCTIONS.c ****   }
 2076              		.loc 1 322 27 is_stmt 0 view .LVU531
 2077 00d6 121A     		subs	r2, r2, r0
 2078              	.LVL210:
 322:Core/Src/GFX_FUNCTIONS.c ****   }
 2079              		.loc 1 322 27 view .LVU532
 2080 00d8 92B2     		uxth	r2, r2
 322:Core/Src/GFX_FUNCTIONS.c ****   }
 2081              		.loc 1 322 31 view .LVU533
 2082 00da 0132     		adds	r2, r2, #1
 322:Core/Src/GFX_FUNCTIONS.c ****   }
 2083              		.loc 1 322 5 view .LVU534
 2084 00dc 5B46     		mov	r3, fp
 2085 00de 12B2     		sxth	r2, r2
 2086 00e0 2146     		mov	r1, r4
 2087 00e2 FFF7FEFF 		bl	drawFastHLine
 2088              	.LVL211:
 311:Core/Src/GFX_FUNCTIONS.c ****     a = x0 + sa / dy01;
 2089              		.loc 1 311 28 is_stmt 1 discriminator 2 view .LVU535
 2090 00e6 0134     		adds	r4, r4, #1
 2091              	.LVL212:
 311:Core/Src/GFX_FUNCTIONS.c ****     a = x0 + sa / dy01;
 2092              		.loc 1 311 28 is_stmt 0 discriminator 2 view .LVU536
 2093 00e8 24B2     		sxth	r4, r4
 2094              	.LVL213:
 2095              	.L89:
 311:Core/Src/GFX_FUNCTIONS.c ****     a = x0 + sa / dy01;
 2096              		.loc 1 311 18 is_stmt 1 discriminator 1 view .LVU537
 2097 00ea 5445     		cmp	r4, r10
 2098 00ec 11DC     		bgt	.L100
 312:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2099              		.loc 1 312 5 view .LVU538
 312:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2100              		.loc 1 312 17 is_stmt 0 view .LVU539
 2101 00ee 039B     		ldr	r3, [sp, #12]
 2102 00f0 97FBF3F2 		sdiv	r2, r7, r3
 312:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2103              		.loc 1 312 12 view .LVU540
 2104 00f4 2A44     		add	r2, r2, r5
 312:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2105              		.loc 1 312 7 view .LVU541
 2106 00f6 12B2     		sxth	r2, r2
 2107              	.LVL214:
 313:Core/Src/GFX_FUNCTIONS.c ****     sa += dx01;
 2108              		.loc 1 313 5 is_stmt 1 view .LVU542
 313:Core/Src/GFX_FUNCTIONS.c ****     sa += dx01;
 2109              		.loc 1 313 17 is_stmt 0 view .LVU543
 2110 00f8 96FBF8F0 		sdiv	r0, r6, r8
 313:Core/Src/GFX_FUNCTIONS.c ****     sa += dx01;
 2111              		.loc 1 313 12 view .LVU544
 2112 00fc 2844     		add	r0, r0, r5
 313:Core/Src/GFX_FUNCTIONS.c ****     sa += dx01;
 2113              		.loc 1 313 7 view .LVU545
 2114 00fe 00B2     		sxth	r0, r0
 2115              	.LVL215:
ARM GAS  /tmp/cctVOKLy.s 			page 46


 314:Core/Src/GFX_FUNCTIONS.c ****     sb += dx02;
 2116              		.loc 1 314 5 is_stmt 1 view .LVU546
 314:Core/Src/GFX_FUNCTIONS.c ****     sb += dx02;
 2117              		.loc 1 314 8 is_stmt 0 view .LVU547
 2118 0100 029B     		ldr	r3, [sp, #8]
 2119 0102 1F44     		add	r7, r7, r3
 2120              	.LVL216:
 315:Core/Src/GFX_FUNCTIONS.c ****     /* longhand:
 2121              		.loc 1 315 5 is_stmt 1 view .LVU548
 315:Core/Src/GFX_FUNCTIONS.c ****     /* longhand:
 2122              		.loc 1 315 8 is_stmt 0 view .LVU549
 2123 0104 4E44     		add	r6, r6, r9
 2124              	.LVL217:
 320:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(a, b);
 2125              		.loc 1 320 5 is_stmt 1 view .LVU550
 320:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(a, b);
 2126              		.loc 1 320 8 is_stmt 0 view .LVU551
 2127 0106 8242     		cmp	r2, r0
 2128 0108 E5DC     		bgt	.L90
 2129 010a 0346     		mov	r3, r0
 312:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2130              		.loc 1 312 7 view .LVU552
 2131 010c 1046     		mov	r0, r2
 2132              	.LVL218:
 313:Core/Src/GFX_FUNCTIONS.c ****     sa += dx01;
 2133              		.loc 1 313 7 view .LVU553
 2134 010e 1A46     		mov	r2, r3
 2135              	.LVL219:
 313:Core/Src/GFX_FUNCTIONS.c ****     sa += dx01;
 2136              		.loc 1 313 7 view .LVU554
 2137 0110 E1E7     		b	.L90
 2138              	.LVL220:
 2139              	.L100:
 327:Core/Src/GFX_FUNCTIONS.c ****   sb = (int32_t)dx02 * (y - y0);
 2140              		.loc 1 327 27 view .LVU555
 2141 0112 DDF814A0 		ldr	r10, [sp, #20]
 2142              	.LVL221:
 327:Core/Src/GFX_FUNCTIONS.c ****   sb = (int32_t)dx02 * (y - y0);
 2143              		.loc 1 327 27 view .LVU556
 2144 0116 069B     		ldr	r3, [sp, #24]
 2145 0118 0799     		ldr	r1, [sp, #28]
 327:Core/Src/GFX_FUNCTIONS.c ****   sb = (int32_t)dx02 * (y - y0);
 2146              		.loc 1 327 3 is_stmt 1 view .LVU557
 327:Core/Src/GFX_FUNCTIONS.c ****   sb = (int32_t)dx02 * (y - y0);
 2147              		.loc 1 327 27 is_stmt 0 view .LVU558
 2148 011a E61A     		subs	r6, r4, r3
 2149              	.LVL222:
 327:Core/Src/GFX_FUNCTIONS.c ****   sb = (int32_t)dx02 * (y - y0);
 2150              		.loc 1 327 6 view .LVU559
 2151 011c 009B     		ldr	r3, [sp]
 2152 011e 03FB06F6 		mul	r6, r3, r6
 2153              	.LVL223:
 328:Core/Src/GFX_FUNCTIONS.c ****   for (; y <= y2; y++) {
 2154              		.loc 1 328 3 is_stmt 1 view .LVU560
 328:Core/Src/GFX_FUNCTIONS.c ****   for (; y <= y2; y++) {
 2155              		.loc 1 328 27 is_stmt 0 view .LVU561
 2156 0122 671A     		subs	r7, r4, r1
ARM GAS  /tmp/cctVOKLy.s 			page 47


 328:Core/Src/GFX_FUNCTIONS.c ****   for (; y <= y2; y++) {
 2157              		.loc 1 328 6 view .LVU562
 2158 0124 07FB09F7 		mul	r7, r7, r9
 2159              	.LVL224:
 329:Core/Src/GFX_FUNCTIONS.c ****     a = x1 + sa / dy12;
 2160              		.loc 1 329 3 is_stmt 1 view .LVU563
 2161 0128 09E0     		b	.L92
 2162              	.LVL225:
 2163              	.L93:
 339:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(a, y, b - a + 1, color);
 2164              		.loc 1 339 26 discriminator 1 view .LVU564
 340:Core/Src/GFX_FUNCTIONS.c ****   }
 2165              		.loc 1 340 5 view .LVU565
 340:Core/Src/GFX_FUNCTIONS.c ****   }
 2166              		.loc 1 340 27 is_stmt 0 view .LVU566
 2167 012a 121A     		subs	r2, r2, r0
 2168              	.LVL226:
 340:Core/Src/GFX_FUNCTIONS.c ****   }
 2169              		.loc 1 340 27 view .LVU567
 2170 012c 92B2     		uxth	r2, r2
 340:Core/Src/GFX_FUNCTIONS.c ****   }
 2171              		.loc 1 340 31 view .LVU568
 2172 012e 0132     		adds	r2, r2, #1
 340:Core/Src/GFX_FUNCTIONS.c ****   }
 2173              		.loc 1 340 5 view .LVU569
 2174 0130 5B46     		mov	r3, fp
 2175 0132 12B2     		sxth	r2, r2
 2176 0134 2146     		mov	r1, r4
 2177 0136 FFF7FEFF 		bl	drawFastHLine
 2178              	.LVL227:
 329:Core/Src/GFX_FUNCTIONS.c ****     a = x1 + sa / dy12;
 2179              		.loc 1 329 20 is_stmt 1 view .LVU570
 2180 013a 0134     		adds	r4, r4, #1
 2181              	.LVL228:
 329:Core/Src/GFX_FUNCTIONS.c ****     a = x1 + sa / dy12;
 2182              		.loc 1 329 20 is_stmt 0 view .LVU571
 2183 013c 24B2     		sxth	r4, r4
 2184              	.LVL229:
 2185              	.L92:
 329:Core/Src/GFX_FUNCTIONS.c ****     a = x1 + sa / dy12;
 2186              		.loc 1 329 12 is_stmt 1 discriminator 1 view .LVU572
 2187 013e A245     		cmp	r10, r4
 2188 0140 BDDB     		blt	.L80
 330:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2189              		.loc 1 330 5 view .LVU573
 330:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2190              		.loc 1 330 17 is_stmt 0 view .LVU574
 2191 0142 049B     		ldr	r3, [sp, #16]
 2192 0144 96FBF3F2 		sdiv	r2, r6, r3
 330:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2193              		.loc 1 330 12 view .LVU575
 2194 0148 019B     		ldr	r3, [sp, #4]
 2195 014a 1A44     		add	r2, r2, r3
 330:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2196              		.loc 1 330 7 view .LVU576
 2197 014c 12B2     		sxth	r2, r2
 2198              	.LVL230:
ARM GAS  /tmp/cctVOKLy.s 			page 48


 331:Core/Src/GFX_FUNCTIONS.c ****     sa += dx12;
 2199              		.loc 1 331 5 is_stmt 1 view .LVU577
 331:Core/Src/GFX_FUNCTIONS.c ****     sa += dx12;
 2200              		.loc 1 331 17 is_stmt 0 view .LVU578
 2201 014e 97FBF8F0 		sdiv	r0, r7, r8
 331:Core/Src/GFX_FUNCTIONS.c ****     sa += dx12;
 2202              		.loc 1 331 12 view .LVU579
 2203 0152 2844     		add	r0, r0, r5
 331:Core/Src/GFX_FUNCTIONS.c ****     sa += dx12;
 2204              		.loc 1 331 7 view .LVU580
 2205 0154 00B2     		sxth	r0, r0
 2206              	.LVL231:
 332:Core/Src/GFX_FUNCTIONS.c ****     sb += dx02;
 2207              		.loc 1 332 5 is_stmt 1 view .LVU581
 332:Core/Src/GFX_FUNCTIONS.c ****     sb += dx02;
 2208              		.loc 1 332 8 is_stmt 0 view .LVU582
 2209 0156 009B     		ldr	r3, [sp]
 2210 0158 1E44     		add	r6, r6, r3
 2211              	.LVL232:
 333:Core/Src/GFX_FUNCTIONS.c ****     /* longhand:
 2212              		.loc 1 333 5 is_stmt 1 view .LVU583
 333:Core/Src/GFX_FUNCTIONS.c ****     /* longhand:
 2213              		.loc 1 333 8 is_stmt 0 view .LVU584
 2214 015a 4F44     		add	r7, r7, r9
 2215              	.LVL233:
 338:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(a, b);
 2216              		.loc 1 338 5 is_stmt 1 view .LVU585
 338:Core/Src/GFX_FUNCTIONS.c ****       _swap_int16_t(a, b);
 2217              		.loc 1 338 8 is_stmt 0 view .LVU586
 2218 015c 8242     		cmp	r2, r0
 2219 015e E4DC     		bgt	.L93
 2220 0160 0346     		mov	r3, r0
 330:Core/Src/GFX_FUNCTIONS.c ****     b = x0 + sb / dy02;
 2221              		.loc 1 330 7 view .LVU587
 2222 0162 1046     		mov	r0, r2
 2223              	.LVL234:
 331:Core/Src/GFX_FUNCTIONS.c ****     sa += dx12;
 2224              		.loc 1 331 7 view .LVU588
 2225 0164 1A46     		mov	r2, r3
 2226              	.LVL235:
 331:Core/Src/GFX_FUNCTIONS.c ****     sa += dx12;
 2227              		.loc 1 331 7 view .LVU589
 2228 0166 E0E7     		b	.L93
 2229              		.cfi_endproc
 2230              	.LFE80:
 2232              		.section	.text.fillScreen,"ax",%progbits
 2233              		.align	1
 2234              		.global	fillScreen
 2235              		.syntax unified
 2236              		.thumb
 2237              		.thumb_func
 2239              	fillScreen:
 2240              	.LVL236:
 2241              	.LFB81:
 343:Core/Src/GFX_FUNCTIONS.c **** 
 344:Core/Src/GFX_FUNCTIONS.c **** void fillScreen(uint16_t color) { fillRect(0, 0, _width, _height, color); }
 2242              		.loc 1 344 33 is_stmt 1 view -0
ARM GAS  /tmp/cctVOKLy.s 			page 49


 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 0
 2245              		@ frame_needed = 0, uses_anonymous_args = 0
 2246              		.loc 1 344 33 is_stmt 0 view .LVU591
 2247 0000 00B5     		push	{lr}
 2248              	.LCFI44:
 2249              		.cfi_def_cfa_offset 4
 2250              		.cfi_offset 14, -4
 2251 0002 83B0     		sub	sp, sp, #12
 2252              	.LCFI45:
 2253              		.cfi_def_cfa_offset 16
 2254              		.loc 1 344 35 is_stmt 1 view .LVU592
 2255 0004 0090     		str	r0, [sp]
 2256 0006 064B     		ldr	r3, .L103
 2257 0008 B3F90030 		ldrsh	r3, [r3]
 2258 000c 054A     		ldr	r2, .L103+4
 2259 000e B2F90020 		ldrsh	r2, [r2]
 2260 0012 0021     		movs	r1, #0
 2261 0014 0846     		mov	r0, r1
 2262              	.LVL237:
 2263              		.loc 1 344 35 is_stmt 0 view .LVU593
 2264 0016 FFF7FEFF 		bl	fillRect
 2265              	.LVL238:
 2266              		.loc 1 344 75 view .LVU594
 2267 001a 03B0     		add	sp, sp, #12
 2268              	.LCFI46:
 2269              		.cfi_def_cfa_offset 4
 2270              		@ sp needed
 2271 001c 5DF804FB 		ldr	pc, [sp], #4
 2272              	.L104:
 2273              		.align	2
 2274              	.L103:
 2275 0020 00000000 		.word	_height
 2276 0024 00000000 		.word	_width
 2277              		.cfi_endproc
 2278              	.LFE81:
 2280              		.section	.text.testLines,"ax",%progbits
 2281              		.align	1
 2282              		.global	testLines
 2283              		.syntax unified
 2284              		.thumb
 2285              		.thumb_func
 2287              	testLines:
 2288              	.LVL239:
 2289              	.LFB82:
 345:Core/Src/GFX_FUNCTIONS.c **** 
 346:Core/Src/GFX_FUNCTIONS.c **** void testLines(uint16_t color) {
 2290              		.loc 1 346 32 is_stmt 1 view -0
 2291              		.cfi_startproc
 2292              		@ args = 0, pretend = 0, frame = 0
 2293              		@ frame_needed = 0, uses_anonymous_args = 0
 2294              		.loc 1 346 32 is_stmt 0 view .LVU596
 2295 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 2296              	.LCFI47:
 2297              		.cfi_def_cfa_offset 28
 2298              		.cfi_offset 4, -28
 2299              		.cfi_offset 5, -24
ARM GAS  /tmp/cctVOKLy.s 			page 50


 2300              		.cfi_offset 6, -20
 2301              		.cfi_offset 7, -16
 2302              		.cfi_offset 8, -12
 2303              		.cfi_offset 9, -8
 2304              		.cfi_offset 14, -4
 2305 0004 83B0     		sub	sp, sp, #12
 2306              	.LCFI48:
 2307              		.cfi_def_cfa_offset 40
 2308 0006 0446     		mov	r4, r0
 347:Core/Src/GFX_FUNCTIONS.c ****   int x1, y1, x2, y2, w = _width, h = _height;
 2309              		.loc 1 347 3 is_stmt 1 view .LVU597
 2310              		.loc 1 347 23 is_stmt 0 view .LVU598
 2311 0008 424B     		ldr	r3, .L123
 2312 000a B3F90060 		ldrsh	r6, [r3]
 2313              	.LVL240:
 2314              		.loc 1 347 35 view .LVU599
 2315 000e 424B     		ldr	r3, .L123+4
 2316 0010 B3F90050 		ldrsh	r5, [r3]
 2317              	.LVL241:
 348:Core/Src/GFX_FUNCTIONS.c **** 
 349:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 2318              		.loc 1 349 3 is_stmt 1 view .LVU600
 2319 0014 0020     		movs	r0, #0
 2320              	.LVL242:
 2321              		.loc 1 349 3 is_stmt 0 view .LVU601
 2322 0016 FFF7FEFF 		bl	fillScreen
 2323              	.LVL243:
 350:Core/Src/GFX_FUNCTIONS.c **** 
 351:Core/Src/GFX_FUNCTIONS.c ****   x1 = y1 = 0;
 2324              		.loc 1 351 3 is_stmt 1 view .LVU602
 352:Core/Src/GFX_FUNCTIONS.c ****   y2 = h - 1;
 2325              		.loc 1 352 3 view .LVU603
 353:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2326              		.loc 1 353 3 view .LVU604
 2327              		.loc 1 353 11 is_stmt 0 view .LVU605
 2328 001a 0027     		movs	r7, #0
 2329              		.loc 1 353 3 view .LVU606
 2330 001c 08E0     		b	.L106
 2331              	.LVL244:
 2332              	.L107:
 354:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2333              		.loc 1 354 5 is_stmt 1 view .LVU607
 2334 001e 6B1E     		subs	r3, r5, #1
 2335 0020 0094     		str	r4, [sp]
 2336 0022 1BB2     		sxth	r3, r3
 2337 0024 3AB2     		sxth	r2, r7
 2338 0026 0021     		movs	r1, #0
 2339 0028 0846     		mov	r0, r1
 2340 002a FFF7FEFF 		bl	drawLine
 2341              	.LVL245:
 353:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2342              		.loc 1 353 27 discriminator 3 view .LVU608
 2343 002e 0637     		adds	r7, r7, #6
 2344              	.LVL246:
 2345              	.L106:
 353:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2346              		.loc 1 353 19 discriminator 1 view .LVU609
ARM GAS  /tmp/cctVOKLy.s 			page 51


 2347 0030 B742     		cmp	r7, r6
 2348 0032 F4DB     		blt	.L107
 355:Core/Src/GFX_FUNCTIONS.c ****   x2 = w - 1;
 356:Core/Src/GFX_FUNCTIONS.c ****   for (y2 = 0; y2 < h; y2 += 6)
 2349              		.loc 1 356 11 is_stmt 0 view .LVU610
 2350 0034 0027     		movs	r7, #0
 2351              	.LVL247:
 2352              		.loc 1 356 11 view .LVU611
 2353 0036 08E0     		b	.L108
 2354              	.LVL248:
 2355              	.L109:
 357:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2356              		.loc 1 357 5 is_stmt 1 view .LVU612
 2357 0038 721E     		subs	r2, r6, #1
 2358 003a 0094     		str	r4, [sp]
 2359 003c 3BB2     		sxth	r3, r7
 2360 003e 12B2     		sxth	r2, r2
 2361 0040 0021     		movs	r1, #0
 2362 0042 0846     		mov	r0, r1
 2363 0044 FFF7FEFF 		bl	drawLine
 2364              	.LVL249:
 356:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2365              		.loc 1 356 27 discriminator 3 view .LVU613
 2366 0048 0637     		adds	r7, r7, #6
 2367              	.LVL250:
 2368              	.L108:
 356:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2369              		.loc 1 356 19 discriminator 1 view .LVU614
 2370 004a AF42     		cmp	r7, r5
 2371 004c F4DB     		blt	.L109
 358:Core/Src/GFX_FUNCTIONS.c **** 
 359:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 2372              		.loc 1 359 3 view .LVU615
 2373 004e 0020     		movs	r0, #0
 2374 0050 FFF7FEFF 		bl	fillScreen
 2375              	.LVL251:
 360:Core/Src/GFX_FUNCTIONS.c **** 
 361:Core/Src/GFX_FUNCTIONS.c ****   x1 = w - 1;
 2376              		.loc 1 361 3 view .LVU616
 2377              		.loc 1 361 6 is_stmt 0 view .LVU617
 2378 0054 06F1FF38 		add	r8, r6, #-1
 2379              	.LVL252:
 362:Core/Src/GFX_FUNCTIONS.c ****   y1 = 0;
 2380              		.loc 1 362 3 is_stmt 1 view .LVU618
 363:Core/Src/GFX_FUNCTIONS.c ****   y2 = h - 1;
 2381              		.loc 1 363 3 view .LVU619
 364:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2382              		.loc 1 364 3 view .LVU620
 2383              		.loc 1 364 11 is_stmt 0 view .LVU621
 2384 0058 0027     		movs	r7, #0
 2385              		.loc 1 364 3 view .LVU622
 2386 005a 09E0     		b	.L110
 2387              	.LVL253:
 2388              	.L111:
 365:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2389              		.loc 1 365 5 is_stmt 1 view .LVU623
 2390 005c 6B1E     		subs	r3, r5, #1
ARM GAS  /tmp/cctVOKLy.s 			page 52


 2391 005e 0094     		str	r4, [sp]
 2392 0060 1BB2     		sxth	r3, r3
 2393 0062 3AB2     		sxth	r2, r7
 2394 0064 0021     		movs	r1, #0
 2395 0066 0FFA88F0 		sxth	r0, r8
 2396 006a FFF7FEFF 		bl	drawLine
 2397              	.LVL254:
 364:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2398              		.loc 1 364 27 discriminator 3 view .LVU624
 2399 006e 0637     		adds	r7, r7, #6
 2400              	.LVL255:
 2401              	.L110:
 364:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2402              		.loc 1 364 19 discriminator 1 view .LVU625
 2403 0070 B742     		cmp	r7, r6
 2404 0072 F3DB     		blt	.L111
 366:Core/Src/GFX_FUNCTIONS.c ****   x2 = 0;
 367:Core/Src/GFX_FUNCTIONS.c ****   for (y2 = 0; y2 < h; y2 += 6)
 2405              		.loc 1 367 11 is_stmt 0 view .LVU626
 2406 0074 0027     		movs	r7, #0
 2407              	.LVL256:
 2408              		.loc 1 367 11 view .LVU627
 2409 0076 08E0     		b	.L112
 2410              	.LVL257:
 2411              	.L113:
 368:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2412              		.loc 1 368 5 is_stmt 1 view .LVU628
 2413 0078 0094     		str	r4, [sp]
 2414 007a 3BB2     		sxth	r3, r7
 2415 007c 0022     		movs	r2, #0
 2416 007e 1146     		mov	r1, r2
 2417 0080 0FFA88F0 		sxth	r0, r8
 2418 0084 FFF7FEFF 		bl	drawLine
 2419              	.LVL258:
 367:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2420              		.loc 1 367 27 discriminator 3 view .LVU629
 2421 0088 0637     		adds	r7, r7, #6
 2422              	.LVL259:
 2423              	.L112:
 367:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2424              		.loc 1 367 19 discriminator 1 view .LVU630
 2425 008a AF42     		cmp	r7, r5
 2426 008c F4DB     		blt	.L113
 369:Core/Src/GFX_FUNCTIONS.c **** 
 370:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 2427              		.loc 1 370 3 view .LVU631
 2428 008e 0020     		movs	r0, #0
 2429 0090 FFF7FEFF 		bl	fillScreen
 2430              	.LVL260:
 371:Core/Src/GFX_FUNCTIONS.c **** 
 372:Core/Src/GFX_FUNCTIONS.c ****   x1 = 0;
 2431              		.loc 1 372 3 view .LVU632
 373:Core/Src/GFX_FUNCTIONS.c ****   y1 = h - 1;
 2432              		.loc 1 373 3 view .LVU633
 2433              		.loc 1 373 6 is_stmt 0 view .LVU634
 2434 0094 05F1FF39 		add	r9, r5, #-1
 2435              	.LVL261:
ARM GAS  /tmp/cctVOKLy.s 			page 53


 374:Core/Src/GFX_FUNCTIONS.c ****   y2 = 0;
 2436              		.loc 1 374 3 is_stmt 1 view .LVU635
 375:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2437              		.loc 1 375 3 view .LVU636
 2438              		.loc 1 375 11 is_stmt 0 view .LVU637
 2439 0098 0027     		movs	r7, #0
 2440              		.loc 1 375 3 view .LVU638
 2441 009a 08E0     		b	.L114
 2442              	.LVL262:
 2443              	.L115:
 376:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2444              		.loc 1 376 5 is_stmt 1 view .LVU639
 2445 009c 0094     		str	r4, [sp]
 2446 009e 0023     		movs	r3, #0
 2447 00a0 3AB2     		sxth	r2, r7
 2448 00a2 0FFA89F1 		sxth	r1, r9
 2449 00a6 1846     		mov	r0, r3
 2450 00a8 FFF7FEFF 		bl	drawLine
 2451              	.LVL263:
 375:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2452              		.loc 1 375 27 discriminator 3 view .LVU640
 2453 00ac 0637     		adds	r7, r7, #6
 2454              	.LVL264:
 2455              	.L114:
 375:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2456              		.loc 1 375 19 discriminator 1 view .LVU641
 2457 00ae B742     		cmp	r7, r6
 2458 00b0 F4DB     		blt	.L115
 377:Core/Src/GFX_FUNCTIONS.c ****   x2 = w - 1;
 378:Core/Src/GFX_FUNCTIONS.c ****   for (y2 = 0; y2 < h; y2 += 6)
 2459              		.loc 1 378 11 is_stmt 0 view .LVU642
 2460 00b2 0027     		movs	r7, #0
 2461              	.LVL265:
 2462              		.loc 1 378 11 view .LVU643
 2463 00b4 09E0     		b	.L116
 2464              	.LVL266:
 2465              	.L117:
 379:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2466              		.loc 1 379 5 is_stmt 1 view .LVU644
 2467 00b6 721E     		subs	r2, r6, #1
 2468 00b8 0094     		str	r4, [sp]
 2469 00ba 3BB2     		sxth	r3, r7
 2470 00bc 12B2     		sxth	r2, r2
 2471 00be 0FFA89F1 		sxth	r1, r9
 2472 00c2 0020     		movs	r0, #0
 2473 00c4 FFF7FEFF 		bl	drawLine
 2474              	.LVL267:
 378:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2475              		.loc 1 378 27 discriminator 3 view .LVU645
 2476 00c8 0637     		adds	r7, r7, #6
 2477              	.LVL268:
 2478              	.L116:
 378:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2479              		.loc 1 378 19 discriminator 1 view .LVU646
 2480 00ca AF42     		cmp	r7, r5
 2481 00cc F3DB     		blt	.L117
 380:Core/Src/GFX_FUNCTIONS.c **** 
ARM GAS  /tmp/cctVOKLy.s 			page 54


 381:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 2482              		.loc 1 381 3 view .LVU647
 2483 00ce 0020     		movs	r0, #0
 2484 00d0 FFF7FEFF 		bl	fillScreen
 2485              	.LVL269:
 382:Core/Src/GFX_FUNCTIONS.c **** 
 383:Core/Src/GFX_FUNCTIONS.c ****   x1 = w - 1;
 2486              		.loc 1 383 3 view .LVU648
 384:Core/Src/GFX_FUNCTIONS.c ****   y1 = h - 1;
 2487              		.loc 1 384 3 view .LVU649
 385:Core/Src/GFX_FUNCTIONS.c ****   y2 = 0;
 2488              		.loc 1 385 3 view .LVU650
 386:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2489              		.loc 1 386 3 view .LVU651
 2490              		.loc 1 386 11 is_stmt 0 view .LVU652
 2491 00d4 0027     		movs	r7, #0
 2492              		.loc 1 386 3 view .LVU653
 2493 00d6 09E0     		b	.L118
 2494              	.LVL270:
 2495              	.L119:
 387:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2496              		.loc 1 387 5 is_stmt 1 view .LVU654
 2497 00d8 0094     		str	r4, [sp]
 2498 00da 0023     		movs	r3, #0
 2499 00dc 3AB2     		sxth	r2, r7
 2500 00de 0FFA89F1 		sxth	r1, r9
 2501 00e2 0FFA88F0 		sxth	r0, r8
 2502 00e6 FFF7FEFF 		bl	drawLine
 2503              	.LVL271:
 386:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2504              		.loc 1 386 27 discriminator 3 view .LVU655
 2505 00ea 0637     		adds	r7, r7, #6
 2506              	.LVL272:
 2507              	.L118:
 386:Core/Src/GFX_FUNCTIONS.c ****   for (x2 = 0; x2 < w; x2 += 6)
 2508              		.loc 1 386 19 discriminator 1 view .LVU656
 2509 00ec B742     		cmp	r7, r6
 2510 00ee F3DB     		blt	.L119
 388:Core/Src/GFX_FUNCTIONS.c ****   x2 = 0;
 389:Core/Src/GFX_FUNCTIONS.c ****   for (y2 = 0; y2 < h; y2 += 6)
 2511              		.loc 1 389 11 is_stmt 0 view .LVU657
 2512 00f0 0026     		movs	r6, #0
 2513              	.LVL273:
 2514              		.loc 1 389 11 view .LVU658
 2515 00f2 09E0     		b	.L120
 2516              	.LVL274:
 2517              	.L121:
 390:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2518              		.loc 1 390 5 is_stmt 1 view .LVU659
 2519 00f4 0094     		str	r4, [sp]
 2520 00f6 33B2     		sxth	r3, r6
 2521 00f8 0022     		movs	r2, #0
 2522 00fa 0FFA89F1 		sxth	r1, r9
 2523 00fe 0FFA88F0 		sxth	r0, r8
 2524 0102 FFF7FEFF 		bl	drawLine
 2525              	.LVL275:
 389:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
ARM GAS  /tmp/cctVOKLy.s 			page 55


 2526              		.loc 1 389 27 discriminator 3 view .LVU660
 2527 0106 0636     		adds	r6, r6, #6
 2528              	.LVL276:
 2529              	.L120:
 389:Core/Src/GFX_FUNCTIONS.c ****     drawLine(x1, y1, x2, y2, color);
 2530              		.loc 1 389 19 discriminator 1 view .LVU661
 2531 0108 AE42     		cmp	r6, r5
 2532 010a F3DB     		blt	.L121
 391:Core/Src/GFX_FUNCTIONS.c **** }
 2533              		.loc 1 391 1 is_stmt 0 view .LVU662
 2534 010c 03B0     		add	sp, sp, #12
 2535              	.LCFI49:
 2536              		.cfi_def_cfa_offset 28
 2537              		@ sp needed
 2538 010e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 2539              	.LVL277:
 2540              	.L124:
 2541              		.loc 1 391 1 view .LVU663
 2542 0112 00BF     		.align	2
 2543              	.L123:
 2544 0114 00000000 		.word	_width
 2545 0118 00000000 		.word	_height
 2546              		.cfi_endproc
 2547              	.LFE82:
 2549              		.section	.text.testFastLines,"ax",%progbits
 2550              		.align	1
 2551              		.global	testFastLines
 2552              		.syntax unified
 2553              		.thumb
 2554              		.thumb_func
 2556              	testFastLines:
 2557              	.LVL278:
 2558              	.LFB83:
 392:Core/Src/GFX_FUNCTIONS.c **** 
 393:Core/Src/GFX_FUNCTIONS.c **** void testFastLines(uint16_t color1, uint16_t color2) {
 2559              		.loc 1 393 54 is_stmt 1 view -0
 2560              		.cfi_startproc
 2561              		@ args = 0, pretend = 0, frame = 0
 2562              		@ frame_needed = 0, uses_anonymous_args = 0
 2563              		.loc 1 393 54 is_stmt 0 view .LVU665
 2564 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2565              	.LCFI50:
 2566              		.cfi_def_cfa_offset 24
 2567              		.cfi_offset 4, -24
 2568              		.cfi_offset 5, -20
 2569              		.cfi_offset 6, -16
 2570              		.cfi_offset 7, -12
 2571              		.cfi_offset 8, -8
 2572              		.cfi_offset 14, -4
 2573 0004 8046     		mov	r8, r0
 2574 0006 0F46     		mov	r7, r1
 394:Core/Src/GFX_FUNCTIONS.c ****   int x, y, w = _width, h = _height;
 2575              		.loc 1 394 3 is_stmt 1 view .LVU666
 2576              		.loc 1 394 13 is_stmt 0 view .LVU667
 2577 0008 104B     		ldr	r3, .L131
 2578 000a B3F90050 		ldrsh	r5, [r3]
 2579              	.LVL279:
ARM GAS  /tmp/cctVOKLy.s 			page 56


 2580              		.loc 1 394 25 view .LVU668
 2581 000e 104B     		ldr	r3, .L131+4
 2582 0010 B3F90060 		ldrsh	r6, [r3]
 2583              	.LVL280:
 395:Core/Src/GFX_FUNCTIONS.c **** 
 396:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 2584              		.loc 1 396 3 is_stmt 1 view .LVU669
 2585 0014 0020     		movs	r0, #0
 2586              	.LVL281:
 2587              		.loc 1 396 3 is_stmt 0 view .LVU670
 2588 0016 FFF7FEFF 		bl	fillScreen
 2589              	.LVL282:
 397:Core/Src/GFX_FUNCTIONS.c ****   for (y = 0; y < h; y += 5)
 2590              		.loc 1 397 3 is_stmt 1 view .LVU671
 2591              		.loc 1 397 10 is_stmt 0 view .LVU672
 2592 001a 0024     		movs	r4, #0
 2593              		.loc 1 397 3 view .LVU673
 2594 001c 06E0     		b	.L126
 2595              	.LVL283:
 2596              	.L127:
 398:Core/Src/GFX_FUNCTIONS.c ****     drawFastHLine(0, y, w, color1);
 2597              		.loc 1 398 5 is_stmt 1 view .LVU674
 2598 001e 4346     		mov	r3, r8
 2599 0020 2A46     		mov	r2, r5
 2600 0022 21B2     		sxth	r1, r4
 2601 0024 0020     		movs	r0, #0
 2602 0026 FFF7FEFF 		bl	drawFastHLine
 2603              	.LVL284:
 397:Core/Src/GFX_FUNCTIONS.c ****   for (y = 0; y < h; y += 5)
 2604              		.loc 1 397 24 discriminator 3 view .LVU675
 2605 002a 0534     		adds	r4, r4, #5
 2606              	.LVL285:
 2607              	.L126:
 397:Core/Src/GFX_FUNCTIONS.c ****   for (y = 0; y < h; y += 5)
 2608              		.loc 1 397 17 discriminator 1 view .LVU676
 2609 002c B442     		cmp	r4, r6
 2610 002e F6DB     		blt	.L127
 399:Core/Src/GFX_FUNCTIONS.c ****   for (x = 0; x < w; x += 5)
 2611              		.loc 1 399 10 is_stmt 0 view .LVU677
 2612 0030 0024     		movs	r4, #0
 2613              	.LVL286:
 2614              		.loc 1 399 10 view .LVU678
 2615 0032 06E0     		b	.L128
 2616              	.LVL287:
 2617              	.L129:
 400:Core/Src/GFX_FUNCTIONS.c ****     drawFastVLine(x, 0, h, color2);
 2618              		.loc 1 400 5 is_stmt 1 view .LVU679
 2619 0034 3B46     		mov	r3, r7
 2620 0036 3246     		mov	r2, r6
 2621 0038 0021     		movs	r1, #0
 2622 003a 20B2     		sxth	r0, r4
 2623 003c FFF7FEFF 		bl	drawFastVLine
 2624              	.LVL288:
 399:Core/Src/GFX_FUNCTIONS.c ****   for (x = 0; x < w; x += 5)
 2625              		.loc 1 399 24 discriminator 3 view .LVU680
 2626 0040 0534     		adds	r4, r4, #5
 2627              	.LVL289:
ARM GAS  /tmp/cctVOKLy.s 			page 57


 2628              	.L128:
 399:Core/Src/GFX_FUNCTIONS.c ****   for (x = 0; x < w; x += 5)
 2629              		.loc 1 399 17 discriminator 1 view .LVU681
 2630 0042 AC42     		cmp	r4, r5
 2631 0044 F6DB     		blt	.L129
 401:Core/Src/GFX_FUNCTIONS.c **** }
 2632              		.loc 1 401 1 is_stmt 0 view .LVU682
 2633 0046 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2634              	.LVL290:
 2635              	.L132:
 2636              		.loc 1 401 1 view .LVU683
 2637 004a 00BF     		.align	2
 2638              	.L131:
 2639 004c 00000000 		.word	_width
 2640 0050 00000000 		.word	_height
 2641              		.cfi_endproc
 2642              	.LFE83:
 2644              		.section	.text.testRects,"ax",%progbits
 2645              		.align	1
 2646              		.global	testRects
 2647              		.syntax unified
 2648              		.thumb
 2649              		.thumb_func
 2651              	testRects:
 2652              	.LVL291:
 2653              	.LFB84:
 402:Core/Src/GFX_FUNCTIONS.c **** 
 403:Core/Src/GFX_FUNCTIONS.c **** void testRects(uint16_t color) {
 2654              		.loc 1 403 32 is_stmt 1 view -0
 2655              		.cfi_startproc
 2656              		@ args = 0, pretend = 0, frame = 0
 2657              		@ frame_needed = 0, uses_anonymous_args = 0
 2658              		.loc 1 403 32 is_stmt 0 view .LVU685
 2659 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2660              	.LCFI51:
 2661              		.cfi_def_cfa_offset 24
 2662              		.cfi_offset 4, -24
 2663              		.cfi_offset 5, -20
 2664              		.cfi_offset 6, -16
 2665              		.cfi_offset 7, -12
 2666              		.cfi_offset 8, -8
 2667              		.cfi_offset 14, -4
 2668 0004 82B0     		sub	sp, sp, #8
 2669              	.LCFI52:
 2670              		.cfi_def_cfa_offset 32
 2671 0006 8046     		mov	r8, r0
 404:Core/Src/GFX_FUNCTIONS.c ****   int n, i, i2, cx = _width / 2, cy = _height / 2;
 2672              		.loc 1 404 3 is_stmt 1 view .LVU686
 2673              		.loc 1 404 29 is_stmt 0 view .LVU687
 2674 0008 154C     		ldr	r4, .L137
 2675 000a B4F90060 		ldrsh	r6, [r4]
 2676 000e 06EBD676 		add	r6, r6, r6, lsr #31
 2677 0012 7610     		asrs	r6, r6, #1
 2678              	.LVL292:
 2679              		.loc 1 404 47 view .LVU688
 2680 0014 134F     		ldr	r7, .L137+4
 2681 0016 B7F90050 		ldrsh	r5, [r7]
ARM GAS  /tmp/cctVOKLy.s 			page 58


 2682 001a 05EBD575 		add	r5, r5, r5, lsr #31
 2683 001e 6D10     		asrs	r5, r5, #1
 2684              	.LVL293:
 405:Core/Src/GFX_FUNCTIONS.c **** 
 406:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 2685              		.loc 1 406 3 is_stmt 1 view .LVU689
 2686 0020 0020     		movs	r0, #0
 2687              	.LVL294:
 2688              		.loc 1 406 3 is_stmt 0 view .LVU690
 2689 0022 FFF7FEFF 		bl	fillScreen
 2690              	.LVL295:
 407:Core/Src/GFX_FUNCTIONS.c ****   n = min(_width, _height);
 2691              		.loc 1 407 3 is_stmt 1 view .LVU691
 2692              		.loc 1 407 7 is_stmt 0 view .LVU692
 2693 0026 B7F90070 		ldrsh	r7, [r7]
 2694 002a B4F90030 		ldrsh	r3, [r4]
 2695 002e 9F42     		cmp	r7, r3
 2696 0030 A8BF     		it	ge
 2697 0032 1F46     		movge	r7, r3
 2698              	.LVL296:
 408:Core/Src/GFX_FUNCTIONS.c ****   for (i = 2; i < n; i += 6) {
 2699              		.loc 1 408 3 is_stmt 1 view .LVU693
 2700              		.loc 1 408 10 is_stmt 0 view .LVU694
 2701 0034 0224     		movs	r4, #2
 2702              		.loc 1 408 3 view .LVU695
 2703 0036 0EE0     		b	.L134
 2704              	.LVL297:
 2705              	.L135:
 409:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
 2706              		.loc 1 409 5 is_stmt 1 view .LVU696
 2707              		.loc 1 409 8 is_stmt 0 view .LVU697
 2708 0038 04EBD471 		add	r1, r4, r4, lsr #31
 2709              	.LVL298:
 410:Core/Src/GFX_FUNCTIONS.c ****     drawRect(cx - i2, cy - i2, i, i, color);
 2710              		.loc 1 410 5 is_stmt 1 view .LVU698
 2711              		.loc 1 410 17 is_stmt 0 view .LVU699
 2712 003c C1F34F01 		ubfx	r1, r1, #1, #16
 2713              	.LVL299:
 2714              		.loc 1 410 17 view .LVU700
 2715 0040 701A     		subs	r0, r6, r1
 2716              		.loc 1 410 26 view .LVU701
 2717 0042 691A     		subs	r1, r5, r1
 2718              		.loc 1 410 5 view .LVU702
 2719 0044 22B2     		sxth	r2, r4
 2720 0046 CDF80080 		str	r8, [sp]
 2721 004a 1346     		mov	r3, r2
 2722 004c 09B2     		sxth	r1, r1
 2723 004e 00B2     		sxth	r0, r0
 2724 0050 FFF7FEFF 		bl	drawRect
 2725              	.LVL300:
 408:Core/Src/GFX_FUNCTIONS.c ****   for (i = 2; i < n; i += 6) {
 2726              		.loc 1 408 24 is_stmt 1 discriminator 3 view .LVU703
 2727 0054 0634     		adds	r4, r4, #6
 2728              	.LVL301:
 2729              	.L134:
 408:Core/Src/GFX_FUNCTIONS.c ****   for (i = 2; i < n; i += 6) {
 2730              		.loc 1 408 17 discriminator 1 view .LVU704
ARM GAS  /tmp/cctVOKLy.s 			page 59


 2731 0056 BC42     		cmp	r4, r7
 2732 0058 EEDB     		blt	.L135
 411:Core/Src/GFX_FUNCTIONS.c ****   }
 412:Core/Src/GFX_FUNCTIONS.c **** }
 2733              		.loc 1 412 1 is_stmt 0 view .LVU705
 2734 005a 02B0     		add	sp, sp, #8
 2735              	.LCFI53:
 2736              		.cfi_def_cfa_offset 24
 2737              		@ sp needed
 2738 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2739              	.LVL302:
 2740              	.L138:
 2741              		.loc 1 412 1 view .LVU706
 2742              		.align	2
 2743              	.L137:
 2744 0060 00000000 		.word	_width
 2745 0064 00000000 		.word	_height
 2746              		.cfi_endproc
 2747              	.LFE84:
 2749              		.section	.text.testFilledRects,"ax",%progbits
 2750              		.align	1
 2751              		.global	testFilledRects
 2752              		.syntax unified
 2753              		.thumb
 2754              		.thumb_func
 2756              	testFilledRects:
 2757              	.LVL303:
 2758              	.LFB85:
 413:Core/Src/GFX_FUNCTIONS.c **** 
 414:Core/Src/GFX_FUNCTIONS.c **** void testFilledRects(uint16_t color1, uint16_t color2) {
 2759              		.loc 1 414 56 is_stmt 1 view -0
 2760              		.cfi_startproc
 2761              		@ args = 0, pretend = 0, frame = 0
 2762              		@ frame_needed = 0, uses_anonymous_args = 0
 2763              		.loc 1 414 56 is_stmt 0 view .LVU708
 2764 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2765              	.LCFI54:
 2766              		.cfi_def_cfa_offset 36
 2767              		.cfi_offset 4, -36
 2768              		.cfi_offset 5, -32
 2769              		.cfi_offset 6, -28
 2770              		.cfi_offset 7, -24
 2771              		.cfi_offset 8, -20
 2772              		.cfi_offset 9, -16
 2773              		.cfi_offset 10, -12
 2774              		.cfi_offset 11, -8
 2775              		.cfi_offset 14, -4
 2776 0004 83B0     		sub	sp, sp, #12
 2777              	.LCFI55:
 2778              		.cfi_def_cfa_offset 48
 2779 0006 8246     		mov	r10, r0
 2780 0008 8946     		mov	r9, r1
 415:Core/Src/GFX_FUNCTIONS.c ****   int n, i, i2, cx = _width / 2 - 1, cy = _height / 2 - 1;
 2781              		.loc 1 415 3 is_stmt 1 view .LVU709
 2782              		.loc 1 415 29 is_stmt 0 view .LVU710
 2783 000a 1E4C     		ldr	r4, .L143
 2784 000c B4F90080 		ldrsh	r8, [r4]
ARM GAS  /tmp/cctVOKLy.s 			page 60


 2785 0010 08EBD878 		add	r8, r8, r8, lsr #31
 2786 0014 4FEA6808 		asr	r8, r8, #1
 2787              		.loc 1 415 17 view .LVU711
 2788 0018 08F1FF38 		add	r8, r8, #-1
 2789              	.LVL304:
 2790              		.loc 1 415 51 view .LVU712
 2791 001c 1A4D     		ldr	r5, .L143+4
 2792 001e B5F90070 		ldrsh	r7, [r5]
 2793 0022 07EBD777 		add	r7, r7, r7, lsr #31
 2794 0026 7F10     		asrs	r7, r7, #1
 2795              		.loc 1 415 38 view .LVU713
 2796 0028 013F     		subs	r7, r7, #1
 2797              	.LVL305:
 416:Core/Src/GFX_FUNCTIONS.c **** 
 417:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 2798              		.loc 1 417 3 is_stmt 1 view .LVU714
 2799 002a 0020     		movs	r0, #0
 2800              	.LVL306:
 2801              		.loc 1 417 3 is_stmt 0 view .LVU715
 2802 002c FFF7FEFF 		bl	fillScreen
 2803              	.LVL307:
 418:Core/Src/GFX_FUNCTIONS.c ****   n = min(_width, _height);
 2804              		.loc 1 418 3 is_stmt 1 view .LVU716
 2805              		.loc 1 418 7 is_stmt 0 view .LVU717
 2806 0030 B5F90050 		ldrsh	r5, [r5]
 2807 0034 B4F90030 		ldrsh	r3, [r4]
 2808 0038 9D42     		cmp	r5, r3
 2809 003a A8BF     		it	ge
 2810 003c 1D46     		movge	r5, r3
 2811              	.LVL308:
 419:Core/Src/GFX_FUNCTIONS.c ****   for (i = n; i > 0; i -= 6) {
 2812              		.loc 1 419 3 is_stmt 1 view .LVU718
 2813              		.loc 1 419 3 is_stmt 0 view .LVU719
 2814 003e 1BE0     		b	.L140
 2815              	.LVL309:
 2816              	.L141:
 420:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
 2817              		.loc 1 420 5 is_stmt 1 view .LVU720
 2818              		.loc 1 420 8 is_stmt 0 view .LVU721
 2819 0040 05EBD574 		add	r4, r5, r5, lsr #31
 2820              	.LVL310:
 421:Core/Src/GFX_FUNCTIONS.c **** 
 422:Core/Src/GFX_FUNCTIONS.c ****     fillRect(cx - i2, cy - i2, i, i, color1);
 2821              		.loc 1 422 5 is_stmt 1 view .LVU722
 2822              		.loc 1 422 17 is_stmt 0 view .LVU723
 2823 0044 C4F34F04 		ubfx	r4, r4, #1, #16
 2824              	.LVL311:
 2825              		.loc 1 422 17 view .LVU724
 2826 0048 A8EB0406 		sub	r6, r8, r4
 2827              		.loc 1 422 5 view .LVU725
 2828 004c 36B2     		sxth	r6, r6
 2829              		.loc 1 422 26 view .LVU726
 2830 004e 3C1B     		subs	r4, r7, r4
 2831              		.loc 1 422 5 view .LVU727
 2832 0050 24B2     		sxth	r4, r4
 2833 0052 0FFA85FB 		sxth	fp, r5
 2834 0056 CDF800A0 		str	r10, [sp]
ARM GAS  /tmp/cctVOKLy.s 			page 61


 2835 005a 5B46     		mov	r3, fp
 2836 005c 5A46     		mov	r2, fp
 2837 005e 2146     		mov	r1, r4
 2838 0060 3046     		mov	r0, r6
 2839 0062 FFF7FEFF 		bl	fillRect
 2840              	.LVL312:
 423:Core/Src/GFX_FUNCTIONS.c **** 
 424:Core/Src/GFX_FUNCTIONS.c ****     drawRect(cx - i2, cy - i2, i, i, color2);
 2841              		.loc 1 424 5 is_stmt 1 view .LVU728
 2842 0066 CDF80090 		str	r9, [sp]
 2843 006a 5B46     		mov	r3, fp
 2844 006c 5A46     		mov	r2, fp
 2845 006e 2146     		mov	r1, r4
 2846 0070 3046     		mov	r0, r6
 2847 0072 FFF7FEFF 		bl	drawRect
 2848              	.LVL313:
 419:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
 2849              		.loc 1 419 24 discriminator 3 view .LVU729
 2850 0076 063D     		subs	r5, r5, #6
 2851              	.LVL314:
 2852              	.L140:
 419:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
 2853              		.loc 1 419 17 discriminator 1 view .LVU730
 2854 0078 002D     		cmp	r5, #0
 2855 007a E1DC     		bgt	.L141
 425:Core/Src/GFX_FUNCTIONS.c ****   }
 426:Core/Src/GFX_FUNCTIONS.c **** }
 2856              		.loc 1 426 1 is_stmt 0 view .LVU731
 2857 007c 03B0     		add	sp, sp, #12
 2858              	.LCFI56:
 2859              		.cfi_def_cfa_offset 36
 2860              		@ sp needed
 2861 007e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2862              	.LVL315:
 2863              	.L144:
 2864              		.loc 1 426 1 view .LVU732
 2865 0082 00BF     		.align	2
 2866              	.L143:
 2867 0084 00000000 		.word	_width
 2868 0088 00000000 		.word	_height
 2869              		.cfi_endproc
 2870              	.LFE85:
 2872              		.section	.text.testFilledCircles,"ax",%progbits
 2873              		.align	1
 2874              		.global	testFilledCircles
 2875              		.syntax unified
 2876              		.thumb
 2877              		.thumb_func
 2879              	testFilledCircles:
 2880              	.LVL316:
 2881              	.LFB86:
 427:Core/Src/GFX_FUNCTIONS.c **** 
 428:Core/Src/GFX_FUNCTIONS.c **** void testFilledCircles(uint8_t radius, uint16_t color) {
 2882              		.loc 1 428 56 is_stmt 1 view -0
 2883              		.cfi_startproc
 2884              		@ args = 0, pretend = 0, frame = 0
 2885              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cctVOKLy.s 			page 62


 2886              		.loc 1 428 56 is_stmt 0 view .LVU734
 2887 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2888              	.LCFI57:
 2889              		.cfi_def_cfa_offset 32
 2890              		.cfi_offset 4, -32
 2891              		.cfi_offset 5, -28
 2892              		.cfi_offset 6, -24
 2893              		.cfi_offset 7, -20
 2894              		.cfi_offset 8, -16
 2895              		.cfi_offset 9, -12
 2896              		.cfi_offset 10, -8
 2897              		.cfi_offset 14, -4
 2898 0004 0646     		mov	r6, r0
 2899 0006 8946     		mov	r9, r1
 429:Core/Src/GFX_FUNCTIONS.c ****   int x, y, w = _width, h = _height, r2 = radius * 2;
 2900              		.loc 1 429 3 is_stmt 1 view .LVU735
 2901              		.loc 1 429 13 is_stmt 0 view .LVU736
 2902 0008 0D4B     		ldr	r3, .L152
 2903 000a B3F900A0 		ldrsh	r10, [r3]
 2904              	.LVL317:
 2905              		.loc 1 429 25 view .LVU737
 2906 000e 0D4B     		ldr	r3, .L152+4
 2907 0010 B3F90080 		ldrsh	r8, [r3]
 2908              	.LVL318:
 2909              		.loc 1 429 38 view .LVU738
 2910 0014 4700     		lsls	r7, r0, #1
 2911              	.LVL319:
 430:Core/Src/GFX_FUNCTIONS.c **** 
 431:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 2912              		.loc 1 431 3 is_stmt 1 view .LVU739
 2913 0016 0020     		movs	r0, #0
 2914              	.LVL320:
 2915              		.loc 1 431 3 is_stmt 0 view .LVU740
 2916 0018 FFF7FEFF 		bl	fillScreen
 2917              	.LVL321:
 432:Core/Src/GFX_FUNCTIONS.c ****   for (x = radius; x < w; x += r2) {
 2918              		.loc 1 432 3 is_stmt 1 view .LVU741
 2919              		.loc 1 432 10 is_stmt 0 view .LVU742
 2920 001c 3546     		mov	r5, r6
 2921              		.loc 1 432 3 view .LVU743
 2922 001e 09E0     		b	.L146
 2923              	.LVL322:
 2924              	.L147:
 433:Core/Src/GFX_FUNCTIONS.c ****     for (y = radius; y < h; y += r2) {
 434:Core/Src/GFX_FUNCTIONS.c ****       fillCircle(x, y, radius, color);
 2925              		.loc 1 434 7 is_stmt 1 view .LVU744
 2926 0020 4B46     		mov	r3, r9
 2927 0022 3246     		mov	r2, r6
 2928 0024 21B2     		sxth	r1, r4
 2929 0026 28B2     		sxth	r0, r5
 2930 0028 FFF7FEFF 		bl	fillCircle
 2931              	.LVL323:
 433:Core/Src/GFX_FUNCTIONS.c ****     for (y = radius; y < h; y += r2) {
 2932              		.loc 1 433 31 discriminator 3 view .LVU745
 2933 002c 3C44     		add	r4, r4, r7
 2934              	.LVL324:
 2935              	.L148:
ARM GAS  /tmp/cctVOKLy.s 			page 63


 433:Core/Src/GFX_FUNCTIONS.c ****     for (y = radius; y < h; y += r2) {
 2936              		.loc 1 433 24 discriminator 1 view .LVU746
 2937 002e 4445     		cmp	r4, r8
 2938 0030 F6DB     		blt	.L147
 432:Core/Src/GFX_FUNCTIONS.c ****   for (x = radius; x < w; x += r2) {
 2939              		.loc 1 432 29 discriminator 2 view .LVU747
 2940 0032 3D44     		add	r5, r5, r7
 2941              	.LVL325:
 2942              	.L146:
 432:Core/Src/GFX_FUNCTIONS.c ****   for (x = radius; x < w; x += r2) {
 2943              		.loc 1 432 22 discriminator 1 view .LVU748
 2944 0034 5545     		cmp	r5, r10
 2945 0036 01DA     		bge	.L151
 433:Core/Src/GFX_FUNCTIONS.c ****     for (y = radius; y < h; y += r2) {
 2946              		.loc 1 433 12 is_stmt 0 view .LVU749
 2947 0038 3446     		mov	r4, r6
 2948 003a F8E7     		b	.L148
 2949              	.L151:
 435:Core/Src/GFX_FUNCTIONS.c ****     }
 436:Core/Src/GFX_FUNCTIONS.c ****   }
 437:Core/Src/GFX_FUNCTIONS.c **** }
 2950              		.loc 1 437 1 view .LVU750
 2951 003c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2952              	.LVL326:
 2953              	.L153:
 2954              		.loc 1 437 1 view .LVU751
 2955              		.align	2
 2956              	.L152:
 2957 0040 00000000 		.word	_width
 2958 0044 00000000 		.word	_height
 2959              		.cfi_endproc
 2960              	.LFE86:
 2962              		.section	.text.testCircles,"ax",%progbits
 2963              		.align	1
 2964              		.global	testCircles
 2965              		.syntax unified
 2966              		.thumb
 2967              		.thumb_func
 2969              	testCircles:
 2970              	.LVL327:
 2971              	.LFB87:
 438:Core/Src/GFX_FUNCTIONS.c **** 
 439:Core/Src/GFX_FUNCTIONS.c **** void testCircles(uint8_t radius, uint16_t color) {
 2972              		.loc 1 439 50 is_stmt 1 view -0
 2973              		.cfi_startproc
 2974              		@ args = 0, pretend = 0, frame = 0
 2975              		@ frame_needed = 0, uses_anonymous_args = 0
 2976              		.loc 1 439 50 is_stmt 0 view .LVU753
 2977 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2978              	.LCFI58:
 2979              		.cfi_def_cfa_offset 32
 2980              		.cfi_offset 4, -32
 2981              		.cfi_offset 5, -28
 2982              		.cfi_offset 6, -24
 2983              		.cfi_offset 7, -20
 2984              		.cfi_offset 8, -16
 2985              		.cfi_offset 9, -12
ARM GAS  /tmp/cctVOKLy.s 			page 64


 2986              		.cfi_offset 10, -8
 2987              		.cfi_offset 14, -4
 2988 0004 8046     		mov	r8, r0
 2989 0006 8946     		mov	r9, r1
 440:Core/Src/GFX_FUNCTIONS.c ****   int x, y, r2 = radius * 2, w = _width + radius, h = _height + radius;
 2990              		.loc 1 440 3 is_stmt 1 view .LVU754
 2991              		.loc 1 440 13 is_stmt 0 view .LVU755
 2992 0008 4700     		lsls	r7, r0, #1
 2993              	.LVL328:
 2994              		.loc 1 440 41 view .LVU756
 2995 000a 0D4B     		ldr	r3, .L161
 2996 000c B3F900A0 		ldrsh	r10, [r3]
 2997              		.loc 1 440 30 view .LVU757
 2998 0010 8244     		add	r10, r10, r0
 2999              	.LVL329:
 3000              		.loc 1 440 63 view .LVU758
 3001 0012 0C4B     		ldr	r3, .L161+4
 3002 0014 B3F90060 		ldrsh	r6, [r3]
 3003              		.loc 1 440 51 view .LVU759
 3004 0018 0644     		add	r6, r6, r0
 3005              	.LVL330:
 441:Core/Src/GFX_FUNCTIONS.c **** 
 442:Core/Src/GFX_FUNCTIONS.c ****   // Screen is not cleared for this one -- this is
 443:Core/Src/GFX_FUNCTIONS.c ****   // intentional and does not affect the reported time.
 444:Core/Src/GFX_FUNCTIONS.c ****   for (x = 0; x < w; x += r2) {
 3006              		.loc 1 444 3 is_stmt 1 view .LVU760
 3007              		.loc 1 444 10 is_stmt 0 view .LVU761
 3008 001a 0025     		movs	r5, #0
 3009              		.loc 1 444 3 view .LVU762
 3010 001c 09E0     		b	.L155
 3011              	.LVL331:
 3012              	.L156:
 445:Core/Src/GFX_FUNCTIONS.c ****     for (y = 0; y < h; y += r2) {
 446:Core/Src/GFX_FUNCTIONS.c ****       drawCircle(x, y, radius, color);
 3013              		.loc 1 446 7 is_stmt 1 view .LVU763
 3014 001e 4B46     		mov	r3, r9
 3015 0020 4246     		mov	r2, r8
 3016 0022 21B2     		sxth	r1, r4
 3017 0024 28B2     		sxth	r0, r5
 3018 0026 FFF7FEFF 		bl	drawCircle
 3019              	.LVL332:
 445:Core/Src/GFX_FUNCTIONS.c ****     for (y = 0; y < h; y += r2) {
 3020              		.loc 1 445 26 discriminator 3 view .LVU764
 3021 002a 3C44     		add	r4, r4, r7
 3022              	.LVL333:
 3023              	.L157:
 445:Core/Src/GFX_FUNCTIONS.c ****     for (y = 0; y < h; y += r2) {
 3024              		.loc 1 445 19 discriminator 1 view .LVU765
 3025 002c B442     		cmp	r4, r6
 3026 002e F6DB     		blt	.L156
 444:Core/Src/GFX_FUNCTIONS.c ****     for (y = 0; y < h; y += r2) {
 3027              		.loc 1 444 24 discriminator 2 view .LVU766
 3028 0030 3D44     		add	r5, r5, r7
 3029              	.LVL334:
 3030              	.L155:
 444:Core/Src/GFX_FUNCTIONS.c ****     for (y = 0; y < h; y += r2) {
 3031              		.loc 1 444 17 discriminator 1 view .LVU767
ARM GAS  /tmp/cctVOKLy.s 			page 65


 3032 0032 5545     		cmp	r5, r10
 3033 0034 01DA     		bge	.L160
 445:Core/Src/GFX_FUNCTIONS.c ****     for (y = 0; y < h; y += r2) {
 3034              		.loc 1 445 12 is_stmt 0 view .LVU768
 3035 0036 0024     		movs	r4, #0
 3036 0038 F8E7     		b	.L157
 3037              	.L160:
 447:Core/Src/GFX_FUNCTIONS.c ****     }
 448:Core/Src/GFX_FUNCTIONS.c ****   }
 449:Core/Src/GFX_FUNCTIONS.c **** }
 3038              		.loc 1 449 1 view .LVU769
 3039 003a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3040              	.LVL335:
 3041              	.L162:
 3042              		.loc 1 449 1 view .LVU770
 3043 003e 00BF     		.align	2
 3044              	.L161:
 3045 0040 00000000 		.word	_width
 3046 0044 00000000 		.word	_height
 3047              		.cfi_endproc
 3048              	.LFE87:
 3050              		.section	.text.testTriangles,"ax",%progbits
 3051              		.align	1
 3052              		.global	testTriangles
 3053              		.syntax unified
 3054              		.thumb
 3055              		.thumb_func
 3057              	testTriangles:
 3058              	.LFB88:
 450:Core/Src/GFX_FUNCTIONS.c **** 
 451:Core/Src/GFX_FUNCTIONS.c **** void testTriangles() {
 3059              		.loc 1 451 22 is_stmt 1 view -0
 3060              		.cfi_startproc
 3061              		@ args = 0, pretend = 0, frame = 0
 3062              		@ frame_needed = 0, uses_anonymous_args = 0
 3063 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3064              	.LCFI59:
 3065              		.cfi_def_cfa_offset 20
 3066              		.cfi_offset 4, -20
 3067              		.cfi_offset 5, -16
 3068              		.cfi_offset 6, -12
 3069              		.cfi_offset 7, -8
 3070              		.cfi_offset 14, -4
 3071 0002 85B0     		sub	sp, sp, #20
 3072              	.LCFI60:
 3073              		.cfi_def_cfa_offset 40
 452:Core/Src/GFX_FUNCTIONS.c ****   int n, i, cx = _width / 2 - 1, cy = _height / 2 - 1;
 3074              		.loc 1 452 3 view .LVU772
 3075              		.loc 1 452 25 is_stmt 0 view .LVU773
 3076 0004 184B     		ldr	r3, .L167
 3077 0006 B3F90050 		ldrsh	r5, [r3]
 3078 000a 05EBD575 		add	r5, r5, r5, lsr #31
 3079 000e 6D10     		asrs	r5, r5, #1
 3080              		.loc 1 452 13 view .LVU774
 3081 0010 013D     		subs	r5, r5, #1
 3082              	.LVL336:
 3083              		.loc 1 452 47 view .LVU775
ARM GAS  /tmp/cctVOKLy.s 			page 66


 3084 0012 164B     		ldr	r3, .L167+4
 3085 0014 B3F90060 		ldrsh	r6, [r3]
 3086 0018 06EBD676 		add	r6, r6, r6, lsr #31
 3087 001c 7610     		asrs	r6, r6, #1
 3088              		.loc 1 452 34 view .LVU776
 3089 001e 013E     		subs	r6, r6, #1
 3090              	.LVL337:
 453:Core/Src/GFX_FUNCTIONS.c **** 
 454:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 3091              		.loc 1 454 3 is_stmt 1 view .LVU777
 3092 0020 0020     		movs	r0, #0
 3093 0022 FFF7FEFF 		bl	fillScreen
 3094              	.LVL338:
 455:Core/Src/GFX_FUNCTIONS.c ****   n = min(cx, cy);
 3095              		.loc 1 455 3 view .LVU778
 3096              		.loc 1 455 5 is_stmt 0 view .LVU779
 3097 0026 2F46     		mov	r7, r5
 3098 0028 B542     		cmp	r5, r6
 3099 002a A8BF     		it	ge
 3100 002c 3746     		movge	r7, r6
 3101              	.LVL339:
 456:Core/Src/GFX_FUNCTIONS.c ****   for (i = 0; i < n; i += 5) {
 3102              		.loc 1 456 3 is_stmt 1 view .LVU780
 3103              		.loc 1 456 10 is_stmt 0 view .LVU781
 3104 002e 0024     		movs	r4, #0
 3105              		.loc 1 456 3 view .LVU782
 3106 0030 16E0     		b	.L164
 3107              	.LVL340:
 3108              	.L165:
 457:Core/Src/GFX_FUNCTIONS.c ****     drawTriangle(cx, cy - i,     // peak
 3109              		.loc 1 457 5 is_stmt 1 view .LVU783
 3110              		.loc 1 457 25 is_stmt 0 view .LVU784
 3111 0032 B3B2     		uxth	r3, r6
 3112 0034 A0B2     		uxth	r0, r4
 3113 0036 191A     		subs	r1, r3, r0
 458:Core/Src/GFX_FUNCTIONS.c ****                  cx - i, cy + i, // bottom left
 3114              		.loc 1 458 21 view .LVU785
 3115 0038 1FFA85FC 		uxth	ip, r5
 3116 003c ACEB0002 		sub	r2, ip, r0
 3117              		.loc 1 458 29 view .LVU786
 3118 0040 0344     		add	r3, r3, r0
 457:Core/Src/GFX_FUNCTIONS.c ****     drawTriangle(cx, cy - i,     // peak
 3119              		.loc 1 457 5 view .LVU787
 3120 0042 1BB2     		sxth	r3, r3
 459:Core/Src/GFX_FUNCTIONS.c ****                  cx + i, cy + i, // bottom right
 3121              		.loc 1 459 21 view .LVU788
 3122 0044 6044     		add	r0, r0, ip
 457:Core/Src/GFX_FUNCTIONS.c ****     drawTriangle(cx, cy - i,     // peak
 3123              		.loc 1 457 5 view .LVU789
 3124 0046 C4F3C40C 		ubfx	ip, r4, #3, #5
 3125 004a CDF808C0 		str	ip, [sp, #8]
 3126 004e 0193     		str	r3, [sp, #4]
 3127 0050 00B2     		sxth	r0, r0
 3128 0052 0090     		str	r0, [sp]
 3129 0054 12B2     		sxth	r2, r2
 3130 0056 09B2     		sxth	r1, r1
 3131 0058 28B2     		sxth	r0, r5
ARM GAS  /tmp/cctVOKLy.s 			page 67


 3132 005a FFF7FEFF 		bl	drawTriangle
 3133              	.LVL341:
 456:Core/Src/GFX_FUNCTIONS.c ****     drawTriangle(cx, cy - i,     // peak
 3134              		.loc 1 456 24 is_stmt 1 discriminator 3 view .LVU790
 3135 005e 0534     		adds	r4, r4, #5
 3136              	.LVL342:
 3137              	.L164:
 456:Core/Src/GFX_FUNCTIONS.c ****     drawTriangle(cx, cy - i,     // peak
 3138              		.loc 1 456 17 discriminator 1 view .LVU791
 3139 0060 BC42     		cmp	r4, r7
 3140 0062 E6DB     		blt	.L165
 460:Core/Src/GFX_FUNCTIONS.c ****                  color565(0, 0, i));
 461:Core/Src/GFX_FUNCTIONS.c ****   }
 462:Core/Src/GFX_FUNCTIONS.c **** }
 3141              		.loc 1 462 1 is_stmt 0 view .LVU792
 3142 0064 05B0     		add	sp, sp, #20
 3143              	.LCFI61:
 3144              		.cfi_def_cfa_offset 20
 3145              		@ sp needed
 3146 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 3147              	.LVL343:
 3148              	.L168:
 3149              		.loc 1 462 1 view .LVU793
 3150              		.align	2
 3151              	.L167:
 3152 0068 00000000 		.word	_width
 3153 006c 00000000 		.word	_height
 3154              		.cfi_endproc
 3155              	.LFE88:
 3157              		.section	.text.testFilledTriangles,"ax",%progbits
 3158              		.align	1
 3159              		.global	testFilledTriangles
 3160              		.syntax unified
 3161              		.thumb
 3162              		.thumb_func
 3164              	testFilledTriangles:
 3165              	.LFB89:
 463:Core/Src/GFX_FUNCTIONS.c **** 
 464:Core/Src/GFX_FUNCTIONS.c **** void testFilledTriangles() {
 3166              		.loc 1 464 28 is_stmt 1 view -0
 3167              		.cfi_startproc
 3168              		@ args = 0, pretend = 0, frame = 8
 3169              		@ frame_needed = 0, uses_anonymous_args = 0
 3170 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3171              	.LCFI62:
 3172              		.cfi_def_cfa_offset 36
 3173              		.cfi_offset 4, -36
 3174              		.cfi_offset 5, -32
 3175              		.cfi_offset 6, -28
 3176              		.cfi_offset 7, -24
 3177              		.cfi_offset 8, -20
 3178              		.cfi_offset 9, -16
 3179              		.cfi_offset 10, -12
 3180              		.cfi_offset 11, -8
 3181              		.cfi_offset 14, -4
 3182 0004 87B0     		sub	sp, sp, #28
 3183              	.LCFI63:
ARM GAS  /tmp/cctVOKLy.s 			page 68


 3184              		.cfi_def_cfa_offset 64
 465:Core/Src/GFX_FUNCTIONS.c ****   int i, cx = _width / 2 - 1, cy = _height / 2 - 1;
 3185              		.loc 1 465 3 view .LVU795
 3186              		.loc 1 465 22 is_stmt 0 view .LVU796
 3187 0006 2A4B     		ldr	r3, .L173
 3188 0008 B3F90030 		ldrsh	r3, [r3]
 3189 000c 03EBD373 		add	r3, r3, r3, lsr #31
 3190 0010 5B10     		asrs	r3, r3, #1
 3191              		.loc 1 465 10 view .LVU797
 3192 0012 5C1E     		subs	r4, r3, #1
 3193 0014 0494     		str	r4, [sp, #16]
 3194              	.LVL344:
 3195              		.loc 1 465 44 view .LVU798
 3196 0016 274B     		ldr	r3, .L173+4
 3197 0018 B3F90030 		ldrsh	r3, [r3]
 3198 001c 03EBD373 		add	r3, r3, r3, lsr #31
 3199 0020 5B10     		asrs	r3, r3, #1
 3200              		.loc 1 465 31 view .LVU799
 3201 0022 5D1E     		subs	r5, r3, #1
 3202 0024 0595     		str	r5, [sp, #20]
 3203              	.LVL345:
 466:Core/Src/GFX_FUNCTIONS.c **** 
 467:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 3204              		.loc 1 467 3 is_stmt 1 view .LVU800
 3205 0026 0020     		movs	r0, #0
 3206 0028 FFF7FEFF 		bl	fillScreen
 3207              	.LVL346:
 468:Core/Src/GFX_FUNCTIONS.c ****   for (i = min(cx, cy); i > 10; i -= 5) {
 3208              		.loc 1 468 3 view .LVU801
 3209              		.loc 1 468 10 is_stmt 0 view .LVU802
 3210 002c AC42     		cmp	r4, r5
 3211 002e A8BF     		it	ge
 3212 0030 2C46     		movge	r4, r5
 3213              	.LVL347:
 3214              		.loc 1 468 10 view .LVU803
 3215 0032 A046     		mov	r8, r4
 3216              	.LVL348:
 3217              		.loc 1 468 3 view .LVU804
 3218 0034 35E0     		b	.L170
 3219              	.LVL349:
 3220              	.L171:
 469:Core/Src/GFX_FUNCTIONS.c ****     fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(0, i, i));
 3221              		.loc 1 469 5 is_stmt 1 view .LVU805
 3222 0036 049B     		ldr	r3, [sp, #16]
 3223 0038 0FFA83F9 		sxth	r9, r3
 3224              		.loc 1 469 25 is_stmt 0 view .LVU806
 3225 003c BDF81440 		ldrh	r4, [sp, #20]
 3226 0040 1FFA88F5 		uxth	r5, r8
 3227 0044 A4EB050A 		sub	r10, r4, r5
 3228              		.loc 1 469 5 view .LVU807
 3229 0048 0FFA8AFA 		sxth	r10, r10
 3230              		.loc 1 469 33 view .LVU808
 3231 004c 9BB2     		uxth	r3, r3
 3232 004e A3EB050B 		sub	fp, r3, r5
 3233              		.loc 1 469 5 view .LVU809
 3234 0052 0FFA8BFB 		sxth	fp, fp
 3235              		.loc 1 469 41 view .LVU810
ARM GAS  /tmp/cctVOKLy.s 			page 69


 3236 0056 2C44     		add	r4, r4, r5
 3237              		.loc 1 469 5 view .LVU811
 3238 0058 24B2     		sxth	r4, r4
 3239              		.loc 1 469 49 view .LVU812
 3240 005a 1D44     		add	r5, r5, r3
 3241              		.loc 1 469 5 view .LVU813
 3242 005c 2DB2     		sxth	r5, r5
 3243              		.loc 1 469 62 view .LVU814
 3244 005e 0FFA88F7 		sxth	r7, r8
 3245 0062 FE00     		lsls	r6, r7, #3
 3246 0064 06F4FC66 		and	r6, r6, #2016
 3247 0068 C8F3C403 		ubfx	r3, r8, #3, #5
 3248              		.loc 1 469 5 view .LVU815
 3249 006c 3343     		orrs	r3, r3, r6
 3250 006e 0293     		str	r3, [sp, #8]
 3251 0070 0194     		str	r4, [sp, #4]
 3252 0072 0095     		str	r5, [sp]
 3253 0074 2346     		mov	r3, r4
 3254 0076 5A46     		mov	r2, fp
 3255 0078 5146     		mov	r1, r10
 3256 007a 4846     		mov	r0, r9
 3257 007c FFF7FEFF 		bl	fillTriangle
 3258              	.LVL350:
 470:Core/Src/GFX_FUNCTIONS.c ****     drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, color565(i, i, 0));
 3259              		.loc 1 470 5 is_stmt 1 view .LVU816
 3260              		.loc 1 470 62 is_stmt 0 view .LVU817
 3261 0080 3F02     		lsls	r7, r7, #8
 3262 0082 6FF30A07 		bfc	r7, #0, #11
 3263 0086 3FB2     		sxth	r7, r7
 3264 0088 3E43     		orrs	r6, r6, r7
 3265              		.loc 1 470 5 view .LVU818
 3266 008a B6B2     		uxth	r6, r6
 3267 008c 0296     		str	r6, [sp, #8]
 3268 008e 0194     		str	r4, [sp, #4]
 3269 0090 0095     		str	r5, [sp]
 3270 0092 2346     		mov	r3, r4
 3271 0094 5A46     		mov	r2, fp
 3272 0096 5146     		mov	r1, r10
 3273 0098 4846     		mov	r0, r9
 3274 009a FFF7FEFF 		bl	drawTriangle
 3275              	.LVL351:
 468:Core/Src/GFX_FUNCTIONS.c ****   for (i = min(cx, cy); i > 10; i -= 5) {
 3276              		.loc 1 468 35 is_stmt 1 discriminator 3 view .LVU819
 3277 009e A8F10508 		sub	r8, r8, #5
 3278              	.LVL352:
 3279              	.L170:
 468:Core/Src/GFX_FUNCTIONS.c ****   for (i = min(cx, cy); i > 10; i -= 5) {
 3280              		.loc 1 468 27 discriminator 1 view .LVU820
 3281 00a2 B8F10A0F 		cmp	r8, #10
 3282 00a6 C6DC     		bgt	.L171
 471:Core/Src/GFX_FUNCTIONS.c ****   }
 472:Core/Src/GFX_FUNCTIONS.c **** }
 3283              		.loc 1 472 1 is_stmt 0 view .LVU821
 3284 00a8 07B0     		add	sp, sp, #28
 3285              	.LCFI64:
 3286              		.cfi_def_cfa_offset 36
 3287              		@ sp needed
ARM GAS  /tmp/cctVOKLy.s 			page 70


 3288 00aa BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3289              	.LVL353:
 3290              	.L174:
 3291              		.loc 1 472 1 view .LVU822
 3292 00ae 00BF     		.align	2
 3293              	.L173:
 3294 00b0 00000000 		.word	_width
 3295 00b4 00000000 		.word	_height
 3296              		.cfi_endproc
 3297              	.LFE89:
 3299              		.section	.text.testRoundRects,"ax",%progbits
 3300              		.align	1
 3301              		.global	testRoundRects
 3302              		.syntax unified
 3303              		.thumb
 3304              		.thumb_func
 3306              	testRoundRects:
 3307              	.LFB90:
 473:Core/Src/GFX_FUNCTIONS.c **** 
 474:Core/Src/GFX_FUNCTIONS.c **** void testRoundRects() {
 3308              		.loc 1 474 23 is_stmt 1 view -0
 3309              		.cfi_startproc
 3310              		@ args = 0, pretend = 0, frame = 0
 3311              		@ frame_needed = 0, uses_anonymous_args = 0
 3312 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3313              	.LCFI65:
 3314              		.cfi_def_cfa_offset 28
 3315              		.cfi_offset 4, -28
 3316              		.cfi_offset 5, -24
 3317              		.cfi_offset 6, -20
 3318              		.cfi_offset 7, -16
 3319              		.cfi_offset 8, -12
 3320              		.cfi_offset 9, -8
 3321              		.cfi_offset 14, -4
 3322 0004 83B0     		sub	sp, sp, #12
 3323              	.LCFI66:
 3324              		.cfi_def_cfa_offset 40
 475:Core/Src/GFX_FUNCTIONS.c ****   int w, i, i2, red, step, cx = _width / 2 - 1, cy = _height / 2 - 1;
 3325              		.loc 1 475 3 view .LVU824
 3326              		.loc 1 475 40 is_stmt 0 view .LVU825
 3327 0006 214C     		ldr	r4, .L181
 3328 0008 B4F90070 		ldrsh	r7, [r4]
 3329 000c 07EBD777 		add	r7, r7, r7, lsr #31
 3330 0010 7F10     		asrs	r7, r7, #1
 3331              		.loc 1 475 28 view .LVU826
 3332 0012 013F     		subs	r7, r7, #1
 3333              	.LVL354:
 3334              		.loc 1 475 62 view .LVU827
 3335 0014 1E4D     		ldr	r5, .L181+4
 3336 0016 B5F90060 		ldrsh	r6, [r5]
 3337 001a 06EBD676 		add	r6, r6, r6, lsr #31
 3338 001e 7610     		asrs	r6, r6, #1
 3339              		.loc 1 475 49 view .LVU828
 3340 0020 013E     		subs	r6, r6, #1
 3341              	.LVL355:
 476:Core/Src/GFX_FUNCTIONS.c **** 
 477:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
ARM GAS  /tmp/cctVOKLy.s 			page 71


 3342              		.loc 1 477 3 is_stmt 1 view .LVU829
 3343 0022 0020     		movs	r0, #0
 3344 0024 FFF7FEFF 		bl	fillScreen
 3345              	.LVL356:
 478:Core/Src/GFX_FUNCTIONS.c ****   w = min(_width, _height);
 3346              		.loc 1 478 3 view .LVU830
 3347              		.loc 1 478 7 is_stmt 0 view .LVU831
 3348 0028 B5F90080 		ldrsh	r8, [r5]
 3349 002c B4F90030 		ldrsh	r3, [r4]
 3350 0030 9845     		cmp	r8, r3
 3351 0032 A8BF     		it	ge
 3352 0034 9846     		movge	r8, r3
 3353              	.LVL357:
 479:Core/Src/GFX_FUNCTIONS.c ****   red = 0;
 3354              		.loc 1 479 3 is_stmt 1 view .LVU832
 480:Core/Src/GFX_FUNCTIONS.c ****   step = (256 * 6) / w;
 3355              		.loc 1 480 3 view .LVU833
 3356              		.loc 1 480 8 is_stmt 0 view .LVU834
 3357 0036 4FF4C069 		mov	r9, #1536
 3358 003a 99FBF8F9 		sdiv	r9, r9, r8
 3359              	.LVL358:
 481:Core/Src/GFX_FUNCTIONS.c ****   for (i = 0; i < w; i += 6) {
 3360              		.loc 1 481 3 is_stmt 1 view .LVU835
 479:Core/Src/GFX_FUNCTIONS.c ****   red = 0;
 3361              		.loc 1 479 7 is_stmt 0 view .LVU836
 3362 003e 0025     		movs	r5, #0
 3363              		.loc 1 481 10 view .LVU837
 3364 0040 2C46     		mov	r4, r5
 3365              		.loc 1 481 3 view .LVU838
 3366 0042 0DE0     		b	.L176
 3367              	.LVL359:
 3368              	.L177:
 482:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
 483:Core/Src/GFX_FUNCTIONS.c ****     red += step;
 484:Core/Src/GFX_FUNCTIONS.c ****     drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 3369              		.loc 1 484 50 view .LVU839
 3370 0044 4FEA052E 		lsl	lr, r5, #8
 3371              		.loc 1 484 5 view .LVU840
 3372 0048 0EF47843 		and	r3, lr, #63488
 3373 004c 0193     		str	r3, [sp, #4]
 3374 004e 4CF3CF03 		sbfx	r3, ip, #3, #16
 3375 0052 0093     		str	r3, [sp]
 3376 0054 1346     		mov	r3, r2
 3377 0056 09B2     		sxth	r1, r1
 3378 0058 00B2     		sxth	r0, r0
 3379 005a FFF7FEFF 		bl	drawRoundRect
 3380              	.LVL360:
 481:Core/Src/GFX_FUNCTIONS.c ****   for (i = 0; i < w; i += 6) {
 3381              		.loc 1 481 24 is_stmt 1 discriminator 3 view .LVU841
 3382 005e 0634     		adds	r4, r4, #6
 3383              	.LVL361:
 3384              	.L176:
 481:Core/Src/GFX_FUNCTIONS.c ****   for (i = 0; i < w; i += 6) {
 3385              		.loc 1 481 17 discriminator 1 view .LVU842
 3386 0060 4445     		cmp	r4, r8
 3387 0062 0FDA     		bge	.L180
 482:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
ARM GAS  /tmp/cctVOKLy.s 			page 72


 3388              		.loc 1 482 5 view .LVU843
 482:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
 3389              		.loc 1 482 8 is_stmt 0 view .LVU844
 3390 0064 04EBD473 		add	r3, r4, r4, lsr #31
 483:Core/Src/GFX_FUNCTIONS.c ****     drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 3391              		.loc 1 483 5 is_stmt 1 view .LVU845
 483:Core/Src/GFX_FUNCTIONS.c ****     drawRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(red, 0, 0));
 3392              		.loc 1 483 9 is_stmt 0 view .LVU846
 3393 0068 4D44     		add	r5, r5, r9
 3394              	.LVL362:
 3395              		.loc 1 484 5 is_stmt 1 view .LVU847
 3396              		.loc 1 484 22 is_stmt 0 view .LVU848
 3397 006a C3F34F03 		ubfx	r3, r3, #1, #16
 3398 006e F81A     		subs	r0, r7, r3
 3399 0070 80B2     		uxth	r0, r0
 3400              		.loc 1 484 31 view .LVU849
 3401 0072 F31A     		subs	r3, r6, r3
 3402 0074 99B2     		uxth	r1, r3
 3403              		.loc 1 484 5 view .LVU850
 3404 0076 22B2     		sxth	r2, r4
 3405              		.loc 1 484 45 view .LVU851
 3406 0078 A446     		mov	ip, r4
 3407 007a 002C     		cmp	r4, #0
 3408 007c E2DA     		bge	.L177
 3409 007e 04F1070C 		add	ip, r4, #7
 3410 0082 DFE7     		b	.L177
 3411              	.L180:
 485:Core/Src/GFX_FUNCTIONS.c ****   }
 486:Core/Src/GFX_FUNCTIONS.c **** }
 3412              		.loc 1 486 1 view .LVU852
 3413 0084 03B0     		add	sp, sp, #12
 3414              	.LCFI67:
 3415              		.cfi_def_cfa_offset 28
 3416              		@ sp needed
 3417 0086 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3418              	.LVL363:
 3419              	.L182:
 3420              		.loc 1 486 1 view .LVU853
 3421 008a 00BF     		.align	2
 3422              	.L181:
 3423 008c 00000000 		.word	_width
 3424 0090 00000000 		.word	_height
 3425              		.cfi_endproc
 3426              	.LFE90:
 3428              		.section	.text.testFilledRoundRects,"ax",%progbits
 3429              		.align	1
 3430              		.global	testFilledRoundRects
 3431              		.syntax unified
 3432              		.thumb
 3433              		.thumb_func
 3435              	testFilledRoundRects:
 3436              	.LFB91:
 487:Core/Src/GFX_FUNCTIONS.c **** 
 488:Core/Src/GFX_FUNCTIONS.c **** void testFilledRoundRects() {
 3437              		.loc 1 488 29 is_stmt 1 view -0
 3438              		.cfi_startproc
 3439              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cctVOKLy.s 			page 73


 3440              		@ frame_needed = 0, uses_anonymous_args = 0
 3441 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3442              	.LCFI68:
 3443              		.cfi_def_cfa_offset 24
 3444              		.cfi_offset 4, -24
 3445              		.cfi_offset 5, -20
 3446              		.cfi_offset 6, -16
 3447              		.cfi_offset 7, -12
 3448              		.cfi_offset 8, -8
 3449              		.cfi_offset 14, -4
 3450 0004 82B0     		sub	sp, sp, #8
 3451              	.LCFI69:
 3452              		.cfi_def_cfa_offset 32
 489:Core/Src/GFX_FUNCTIONS.c ****   int i, i2, green, step, cx = _width / 2 - 1, cy = _height / 2 - 1;
 3453              		.loc 1 489 3 view .LVU855
 3454              		.loc 1 489 39 is_stmt 0 view .LVU856
 3455 0006 224D     		ldr	r5, .L189
 3456 0008 B5F90070 		ldrsh	r7, [r5]
 3457 000c 07EBD777 		add	r7, r7, r7, lsr #31
 3458 0010 7F10     		asrs	r7, r7, #1
 3459              		.loc 1 489 27 view .LVU857
 3460 0012 013F     		subs	r7, r7, #1
 3461              	.LVL364:
 3462              		.loc 1 489 61 view .LVU858
 3463 0014 1F4C     		ldr	r4, .L189+4
 3464 0016 B4F90060 		ldrsh	r6, [r4]
 3465 001a 06EBD676 		add	r6, r6, r6, lsr #31
 3466 001e 7610     		asrs	r6, r6, #1
 3467              		.loc 1 489 48 view .LVU859
 3468 0020 013E     		subs	r6, r6, #1
 3469              	.LVL365:
 490:Core/Src/GFX_FUNCTIONS.c **** 
 491:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 3470              		.loc 1 491 3 is_stmt 1 view .LVU860
 3471 0022 0020     		movs	r0, #0
 3472 0024 FFF7FEFF 		bl	fillScreen
 3473              	.LVL366:
 492:Core/Src/GFX_FUNCTIONS.c ****   green = 256;
 3474              		.loc 1 492 3 view .LVU861
 493:Core/Src/GFX_FUNCTIONS.c ****   step = (256 * 6) / min(_width, _height);
 3475              		.loc 1 493 3 view .LVU862
 3476              		.loc 1 493 22 is_stmt 0 view .LVU863
 3477 0028 B4F90040 		ldrsh	r4, [r4]
 3478 002c B5F90030 		ldrsh	r3, [r5]
 3479 0030 9C42     		cmp	r4, r3
 3480 0032 A8BF     		it	ge
 3481 0034 1C46     		movge	r4, r3
 3482              		.loc 1 493 8 view .LVU864
 3483 0036 4FF4C068 		mov	r8, #1536
 3484 003a 98FBF4F8 		sdiv	r8, r8, r4
 3485              	.LVL367:
 494:Core/Src/GFX_FUNCTIONS.c ****   for (i = min(_width, _height); i > 20; i -= 6) {
 3486              		.loc 1 494 3 is_stmt 1 view .LVU865
 492:Core/Src/GFX_FUNCTIONS.c ****   green = 256;
 3487              		.loc 1 492 9 is_stmt 0 view .LVU866
 3488 003e 4FF48075 		mov	r5, #256
 3489              		.loc 1 494 3 view .LVU867
ARM GAS  /tmp/cctVOKLy.s 			page 74


 3490 0042 0DE0     		b	.L184
 3491              	.LVL368:
 3492              	.L185:
 495:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
 496:Core/Src/GFX_FUNCTIONS.c ****     green -= step;
 497:Core/Src/GFX_FUNCTIONS.c ****     fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 3493              		.loc 1 497 50 view .LVU868
 3494 0044 E800     		lsls	r0, r5, #3
 3495              		.loc 1 497 5 view .LVU869
 3496 0046 00F4FC60 		and	r0, r0, #2016
 3497 004a 0190     		str	r0, [sp, #4]
 3498 004c 4CF3CF00 		sbfx	r0, ip, #3, #16
 3499 0050 0090     		str	r0, [sp]
 3500 0052 1346     		mov	r3, r2
 3501 0054 09B2     		sxth	r1, r1
 3502 0056 0FFA8EF0 		sxth	r0, lr
 3503 005a FFF7FEFF 		bl	fillRoundRect
 3504              	.LVL369:
 494:Core/Src/GFX_FUNCTIONS.c ****   for (i = min(_width, _height); i > 20; i -= 6) {
 3505              		.loc 1 494 44 is_stmt 1 discriminator 3 view .LVU870
 3506 005e 063C     		subs	r4, r4, #6
 3507              	.LVL370:
 3508              	.L184:
 494:Core/Src/GFX_FUNCTIONS.c ****   for (i = min(_width, _height); i > 20; i -= 6) {
 3509              		.loc 1 494 36 discriminator 1 view .LVU871
 3510 0060 142C     		cmp	r4, #20
 3511 0062 12DD     		ble	.L188
 495:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
 3512              		.loc 1 495 5 view .LVU872
 495:Core/Src/GFX_FUNCTIONS.c ****     i2 = i / 2;
 3513              		.loc 1 495 8 is_stmt 0 view .LVU873
 3514 0064 04EBD471 		add	r1, r4, r4, lsr #31
 496:Core/Src/GFX_FUNCTIONS.c ****     fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 3515              		.loc 1 496 5 is_stmt 1 view .LVU874
 496:Core/Src/GFX_FUNCTIONS.c ****     fillRoundRect(cx - i2, cy - i2, i, i, i / 8, color565(0, green, 0));
 3516              		.loc 1 496 11 is_stmt 0 view .LVU875
 3517 0068 A5EB0805 		sub	r5, r5, r8
 3518              	.LVL371:
 3519              		.loc 1 497 5 is_stmt 1 view .LVU876
 3520              		.loc 1 497 22 is_stmt 0 view .LVU877
 3521 006c C1F34F01 		ubfx	r1, r1, #1, #16
 3522 0070 A7EB010E 		sub	lr, r7, r1
 3523 0074 1FFA8EFE 		uxth	lr, lr
 3524              		.loc 1 497 31 view .LVU878
 3525 0078 711A     		subs	r1, r6, r1
 3526 007a 89B2     		uxth	r1, r1
 3527              		.loc 1 497 5 view .LVU879
 3528 007c 22B2     		sxth	r2, r4
 3529              		.loc 1 497 45 view .LVU880
 3530 007e A446     		mov	ip, r4
 3531 0080 002C     		cmp	r4, #0
 3532 0082 DFDA     		bge	.L185
 3533 0084 04F1070C 		add	ip, r4, #7
 3534 0088 DCE7     		b	.L185
 3535              	.L188:
 498:Core/Src/GFX_FUNCTIONS.c ****   }
 499:Core/Src/GFX_FUNCTIONS.c **** }
ARM GAS  /tmp/cctVOKLy.s 			page 75


 3536              		.loc 1 499 1 view .LVU881
 3537 008a 02B0     		add	sp, sp, #8
 3538              	.LCFI70:
 3539              		.cfi_def_cfa_offset 24
 3540              		@ sp needed
 3541 008c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3542              	.LVL372:
 3543              	.L190:
 3544              		.loc 1 499 1 view .LVU882
 3545              		.align	2
 3546              	.L189:
 3547 0090 00000000 		.word	_width
 3548 0094 00000000 		.word	_height
 3549              		.cfi_endproc
 3550              	.LFE91:
 3552              		.section	.text.testFillScreen,"ax",%progbits
 3553              		.align	1
 3554              		.global	testFillScreen
 3555              		.syntax unified
 3556              		.thumb
 3557              		.thumb_func
 3559              	testFillScreen:
 3560              	.LFB92:
 500:Core/Src/GFX_FUNCTIONS.c **** void testFillScreen() {
 3561              		.loc 1 500 23 is_stmt 1 view -0
 3562              		.cfi_startproc
 3563              		@ args = 0, pretend = 0, frame = 0
 3564              		@ frame_needed = 0, uses_anonymous_args = 0
 3565 0000 08B5     		push	{r3, lr}
 3566              	.LCFI71:
 3567              		.cfi_def_cfa_offset 8
 3568              		.cfi_offset 3, -8
 3569              		.cfi_offset 14, -4
 501:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 3570              		.loc 1 501 3 view .LVU884
 3571 0002 0020     		movs	r0, #0
 3572 0004 FFF7FEFF 		bl	fillScreen
 3573              	.LVL373:
 502:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(RED);
 3574              		.loc 1 502 3 view .LVU885
 3575 0008 4FF47840 		mov	r0, #63488
 3576 000c FFF7FEFF 		bl	fillScreen
 3577              	.LVL374:
 503:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(GREEN);
 3578              		.loc 1 503 3 view .LVU886
 3579 0010 4FF4FC60 		mov	r0, #2016
 3580 0014 FFF7FEFF 		bl	fillScreen
 3581              	.LVL375:
 504:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLUE);
 3582              		.loc 1 504 3 view .LVU887
 3583 0018 1F20     		movs	r0, #31
 3584 001a FFF7FEFF 		bl	fillScreen
 3585              	.LVL376:
 505:Core/Src/GFX_FUNCTIONS.c ****   fillScreen(BLACK);
 3586              		.loc 1 505 3 view .LVU888
 3587 001e 0020     		movs	r0, #0
 3588 0020 FFF7FEFF 		bl	fillScreen
ARM GAS  /tmp/cctVOKLy.s 			page 76


 3589              	.LVL377:
 506:Core/Src/GFX_FUNCTIONS.c **** }
 3590              		.loc 1 506 1 is_stmt 0 view .LVU889
 3591 0024 08BD     		pop	{r3, pc}
 3592              		.cfi_endproc
 3593              	.LFE92:
 3595              		.section	.text.testAll,"ax",%progbits
 3596              		.align	1
 3597              		.global	testAll
 3598              		.syntax unified
 3599              		.thumb
 3600              		.thumb_func
 3602              	testAll:
 3603              	.LFB93:
 507:Core/Src/GFX_FUNCTIONS.c **** 
 508:Core/Src/GFX_FUNCTIONS.c **** void testAll(void) {
 3604              		.loc 1 508 20 is_stmt 1 view -0
 3605              		.cfi_startproc
 3606              		@ args = 0, pretend = 0, frame = 0
 3607              		@ frame_needed = 0, uses_anonymous_args = 0
 3608 0000 08B5     		push	{r3, lr}
 3609              	.LCFI72:
 3610              		.cfi_def_cfa_offset 8
 3611              		.cfi_offset 3, -8
 3612              		.cfi_offset 14, -4
 509:Core/Src/GFX_FUNCTIONS.c ****   testFillScreen();
 3613              		.loc 1 509 3 view .LVU891
 3614 0002 FFF7FEFF 		bl	testFillScreen
 3615              	.LVL378:
 510:Core/Src/GFX_FUNCTIONS.c ****   testLines(CYAN);
 3616              		.loc 1 510 3 view .LVU892
 3617 0006 40F2FF70 		movw	r0, #2047
 3618 000a FFF7FEFF 		bl	testLines
 3619              	.LVL379:
 511:Core/Src/GFX_FUNCTIONS.c ****   testFastLines(RED, BLUE);
 3620              		.loc 1 511 3 view .LVU893
 3621 000e 1F21     		movs	r1, #31
 3622 0010 4FF47840 		mov	r0, #63488
 3623 0014 FFF7FEFF 		bl	testFastLines
 3624              	.LVL380:
 512:Core/Src/GFX_FUNCTIONS.c ****   testRects(GREEN);
 3625              		.loc 1 512 3 view .LVU894
 3626 0018 4FF4FC60 		mov	r0, #2016
 3627 001c FFF7FEFF 		bl	testRects
 3628              	.LVL381:
 513:Core/Src/GFX_FUNCTIONS.c ****   testFilledRects(YELLOW, MAGENTA);
 3629              		.loc 1 513 3 view .LVU895
 3630 0020 4FF61F01 		movw	r1, #63519
 3631 0024 4FF6E070 		movw	r0, #65504
 3632 0028 FFF7FEFF 		bl	testFilledRects
 3633              	.LVL382:
 514:Core/Src/GFX_FUNCTIONS.c ****   testFilledCircles(10, MAGENTA);
 3634              		.loc 1 514 3 view .LVU896
 3635 002c 4FF61F01 		movw	r1, #63519
 3636 0030 0A20     		movs	r0, #10
 3637 0032 FFF7FEFF 		bl	testFilledCircles
 3638              	.LVL383:
ARM GAS  /tmp/cctVOKLy.s 			page 77


 515:Core/Src/GFX_FUNCTIONS.c ****   testCircles(10, WHITE);
 3639              		.loc 1 515 3 view .LVU897
 3640 0036 4FF6FF71 		movw	r1, #65535
 3641 003a 0A20     		movs	r0, #10
 3642 003c FFF7FEFF 		bl	testCircles
 3643              	.LVL384:
 516:Core/Src/GFX_FUNCTIONS.c ****   testTriangles();
 3644              		.loc 1 516 3 view .LVU898
 3645 0040 FFF7FEFF 		bl	testTriangles
 3646              	.LVL385:
 517:Core/Src/GFX_FUNCTIONS.c ****   testFilledTriangles();
 3647              		.loc 1 517 3 view .LVU899
 3648 0044 FFF7FEFF 		bl	testFilledTriangles
 3649              	.LVL386:
 518:Core/Src/GFX_FUNCTIONS.c ****   testRoundRects();
 3650              		.loc 1 518 3 view .LVU900
 3651 0048 FFF7FEFF 		bl	testRoundRects
 3652              	.LVL387:
 519:Core/Src/GFX_FUNCTIONS.c ****   testFilledRoundRects();
 3653              		.loc 1 519 3 view .LVU901
 3654 004c FFF7FEFF 		bl	testFilledRoundRects
 3655              	.LVL388:
 520:Core/Src/GFX_FUNCTIONS.c **** }
 3656              		.loc 1 520 1 is_stmt 0 view .LVU902
 3657 0050 08BD     		pop	{r3, pc}
 3658              		.cfi_endproc
 3659              	.LFE93:
 3661              		.text
 3662              	.Letext0:
 3663              		.file 2 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 3664              		.file 3 "Core/Inc/ST7735.h"
ARM GAS  /tmp/cctVOKLy.s 			page 78


DEFINED SYMBOLS
                            *ABS*:00000000 GFX_FUNCTIONS.c
     /tmp/cctVOKLy.s:19     .text.drawPixel:00000000 $t
     /tmp/cctVOKLy.s:25     .text.drawPixel:00000000 drawPixel
     /tmp/cctVOKLy.s:51     .text.fillRect:00000000 $t
     /tmp/cctVOKLy.s:57     .text.fillRect:00000000 fillRect
     /tmp/cctVOKLy.s:97     .text.writePixel:00000000 $t
     /tmp/cctVOKLy.s:103    .text.writePixel:00000000 writePixel
     /tmp/cctVOKLy.s:125    .text.writeLine:00000000 $t
     /tmp/cctVOKLy.s:131    .text.writeLine:00000000 writeLine
     /tmp/cctVOKLy.s:328    .text.drawFastVLine:00000000 $t
     /tmp/cctVOKLy.s:334    .text.drawFastVLine:00000000 drawFastVLine
     /tmp/cctVOKLy.s:375    .text.drawFastHLine:00000000 $t
     /tmp/cctVOKLy.s:381    .text.drawFastHLine:00000000 drawFastHLine
     /tmp/cctVOKLy.s:422    .text.drawLine:00000000 $t
     /tmp/cctVOKLy.s:428    .text.drawLine:00000000 drawLine
     /tmp/cctVOKLy.s:529    .text.drawCircle:00000000 $t
     /tmp/cctVOKLy.s:535    .text.drawCircle:00000000 drawCircle
     /tmp/cctVOKLy.s:781    .text.drawCircleHelper:00000000 $t
     /tmp/cctVOKLy.s:787    .text.drawCircleHelper:00000000 drawCircleHelper
     /tmp/cctVOKLy.s:1037   .text.fillCircleHelper:00000000 $t
     /tmp/cctVOKLy.s:1043   .text.fillCircleHelper:00000000 fillCircleHelper
     /tmp/cctVOKLy.s:1298   .text.fillCircle:00000000 $t
     /tmp/cctVOKLy.s:1304   .text.fillCircle:00000000 fillCircle
     /tmp/cctVOKLy.s:1365   .text.drawRect:00000000 $t
     /tmp/cctVOKLy.s:1371   .text.drawRect:00000000 drawRect
     /tmp/cctVOKLy.s:1439   .text.drawRoundRect:00000000 $t
     /tmp/cctVOKLy.s:1445   .text.drawRoundRect:00000000 drawRoundRect
     /tmp/cctVOKLy.s:1630   .text.fillRoundRect:00000000 $t
     /tmp/cctVOKLy.s:1636   .text.fillRoundRect:00000000 fillRoundRect
     /tmp/cctVOKLy.s:1760   .text.drawTriangle:00000000 $t
     /tmp/cctVOKLy.s:1766   .text.drawTriangle:00000000 drawTriangle
     /tmp/cctVOKLy.s:1826   .text.fillTriangle:00000000 $t
     /tmp/cctVOKLy.s:1832   .text.fillTriangle:00000000 fillTriangle
     /tmp/cctVOKLy.s:2233   .text.fillScreen:00000000 $t
     /tmp/cctVOKLy.s:2239   .text.fillScreen:00000000 fillScreen
     /tmp/cctVOKLy.s:2275   .text.fillScreen:00000020 $d
     /tmp/cctVOKLy.s:2281   .text.testLines:00000000 $t
     /tmp/cctVOKLy.s:2287   .text.testLines:00000000 testLines
     /tmp/cctVOKLy.s:2544   .text.testLines:00000114 $d
     /tmp/cctVOKLy.s:2550   .text.testFastLines:00000000 $t
     /tmp/cctVOKLy.s:2556   .text.testFastLines:00000000 testFastLines
     /tmp/cctVOKLy.s:2639   .text.testFastLines:0000004c $d
     /tmp/cctVOKLy.s:2645   .text.testRects:00000000 $t
     /tmp/cctVOKLy.s:2651   .text.testRects:00000000 testRects
     /tmp/cctVOKLy.s:2744   .text.testRects:00000060 $d
     /tmp/cctVOKLy.s:2750   .text.testFilledRects:00000000 $t
     /tmp/cctVOKLy.s:2756   .text.testFilledRects:00000000 testFilledRects
     /tmp/cctVOKLy.s:2867   .text.testFilledRects:00000084 $d
     /tmp/cctVOKLy.s:2873   .text.testFilledCircles:00000000 $t
     /tmp/cctVOKLy.s:2879   .text.testFilledCircles:00000000 testFilledCircles
     /tmp/cctVOKLy.s:2957   .text.testFilledCircles:00000040 $d
     /tmp/cctVOKLy.s:2963   .text.testCircles:00000000 $t
     /tmp/cctVOKLy.s:2969   .text.testCircles:00000000 testCircles
     /tmp/cctVOKLy.s:3045   .text.testCircles:00000040 $d
     /tmp/cctVOKLy.s:3051   .text.testTriangles:00000000 $t
     /tmp/cctVOKLy.s:3057   .text.testTriangles:00000000 testTriangles
ARM GAS  /tmp/cctVOKLy.s 			page 79


     /tmp/cctVOKLy.s:3152   .text.testTriangles:00000068 $d
     /tmp/cctVOKLy.s:3158   .text.testFilledTriangles:00000000 $t
     /tmp/cctVOKLy.s:3164   .text.testFilledTriangles:00000000 testFilledTriangles
     /tmp/cctVOKLy.s:3294   .text.testFilledTriangles:000000b0 $d
     /tmp/cctVOKLy.s:3300   .text.testRoundRects:00000000 $t
     /tmp/cctVOKLy.s:3306   .text.testRoundRects:00000000 testRoundRects
     /tmp/cctVOKLy.s:3423   .text.testRoundRects:0000008c $d
     /tmp/cctVOKLy.s:3429   .text.testFilledRoundRects:00000000 $t
     /tmp/cctVOKLy.s:3435   .text.testFilledRoundRects:00000000 testFilledRoundRects
     /tmp/cctVOKLy.s:3547   .text.testFilledRoundRects:00000090 $d
     /tmp/cctVOKLy.s:3553   .text.testFillScreen:00000000 $t
     /tmp/cctVOKLy.s:3559   .text.testFillScreen:00000000 testFillScreen
     /tmp/cctVOKLy.s:3596   .text.testAll:00000000 $t
     /tmp/cctVOKLy.s:3602   .text.testAll:00000000 testAll

UNDEFINED SYMBOLS
ST7735_DrawPixel
ST7735_FillRectangle
_height
_width
